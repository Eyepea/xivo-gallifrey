2007-11-13  Corentin Le Gall <clegall@proformatique.com>

        pf_escape_0x23.patch
        $Revision$
        $Date$
        Bugfix / Behavioral change

        This patch is a backport from the 1.4 branch.
        It was originally intended to be :
          http://svn.digium.com/view/asterisk/branches/1.4/channels/
                        /chan_sip.c?view=diff&rev=89090&r1=89089&r2=89090
          (svn log) This patch makes it possible for SIP phones to dial
                extensions defined with '#' characters in extensions.conf
                AND maintain their escaped characters when forming URI's
        However, an update has been set more recently :
          http://svn.digium.com/view/asterisk/branches/1.4/channels/
                        /chan_sip.c?view=diff&rev=89119&r1=89118&r2=89119
          (svn log) Rework of the commit I made yesterday to use the already
                built-in ast_uri_decode function as opposed to my home-rolled
                one. Also added comments.
                Thanks to oej for pointing me in the right direction
	This latter version is the one given here.

        Patch status: a few tests (OK) have been done, need more statistics

Index: asterisk-1.2.24/channels/chan_sip.c
===================================================================
--- asterisk-1.2.24.orig/channels/chan_sip.c	2007-11-13 11:37:02.000000000 +0100
+++ asterisk-1.2.24/channels/chan_sip.c	2007-11-13 11:37:03.000000000 +0100
@@ -2796,6 +2796,7 @@
 	char iabuf[INET_ADDRSTRLEN];
 	char peer[MAXHOSTNAMELEN];
 #endif	
+	char *decoded_exten;
 	
 	ast_mutex_unlock(&i->lock);
 	/* Don't hold a sip pvt lock while we allocate a channel */
@@ -2860,7 +2861,13 @@
 		ast_copy_string(tmp->musicclass, i->musicclass, sizeof(tmp->musicclass));
 	i->owner = tmp;
 	ast_copy_string(tmp->context, i->context, sizeof(tmp->context));
-	ast_copy_string(tmp->exten, i->exten, sizeof(tmp->exten));
+	/* Since it is valid to have extensions in the dialplan that have unescaped characters in them
+	 * we should decode the uri before storing it in the channel, but leave it encoded in the sip_pvt
+	 * structure so that there aren't issues when forming URI's
+	 */
+	decoded_exten = ast_strdupa(i->exten);
+	ast_uri_decode(decoded_exten);
+	ast_copy_string(tmp->exten, decoded_exten, sizeof(tmp->exten));
 
 	if (!ast_strlen_zero(i->cid_num))
 		tmp->cid.cid_num = strdup(i->cid_num);
@@ -6917,9 +6924,12 @@
 	if (sip_debug_test_pvt(p))
 		ast_verbose("Looking for %s in %s (domain %s)\n", user, p->context, p->domain);
 
-	/* Return 0 if we have a matching extension */
-	if (ast_exists_extension(NULL, p->context, user, 1, from) ||
-		!strcmp(uri, ast_pickup_ext())) {
+        /* Return 0 if we have a matching extension */
+        char *decoded_uri = ast_strdupa(uri);
+        ast_uri_decode(decoded_uri);
+        if (ast_exists_extension(NULL, p->context, uri, 1, S_OR(p->cid_num, from)) ||
+            ast_exists_extension(NULL, p->context, decoded_uri, 1, S_OR(p->cid_num, from)) ||
+            !strcmp(uri, ast_pickup_ext())) {
 		if (!oreq)
 			ast_copy_string(p->exten, user, sizeof(p->exten));
 		return 0;
Index: asterisk-1.2.24/include/asterisk/strings.h
===================================================================
--- asterisk-1.2.24.orig/include/asterisk/strings.h	2007-11-13 11:37:02.000000000 +0100
+++ asterisk-1.2.24/include/asterisk/strings.h	2007-11-13 11:37:03.000000000 +0100
@@ -40,6 +40,11 @@
  */
 #define S_OR(a, b)      (!ast_strlen_zero(a) ? (a) : (b))
 
+/*! \brief returns the equivalent of logic or for strings:
+ * first one if not empty, otherwise second one.
+ */
+#define S_OR(a, b)      (!ast_strlen_zero(a) ? (a) : (b))
+
 /*!
   \brief Gets a pointer to the first non-whitespace character in a string.
   \param ast_skip_blanks function being used
