2007-09-05  Guillaume Knispel <gknispel@proformatique.com>

	pf_h323_incoming_options.patch
	$Revision$
	$Date$
	Bugfix

	This patch adds a callback to the chan_h323.c code which is called at
	the very start of the handling of an incoming connection. It lets the
	ast_h323.cpp code retrieve options of the called user from
	MyH323EndPoint::CreateConnection so that options are properly set when
	creating a new MyH323Connection.

	With this patch Asterisk will correctly refuse to do FastStart and/or
	H245Tunneling for incoming calls to users configured in such a way.

Index: asterisk-classic/channels/chan_h323.c
===================================================================
--- asterisk-classic.orig/channels/chan_h323.c	2007-10-21 01:35:48.000000000 +0200
+++ asterisk-classic/channels/chan_h323.c	2007-10-21 01:35:49.000000000 +0200
@@ -94,6 +94,7 @@
 rfc2833_cb on_set_rfc2833_payload;
 hangup_cb on_hangup;
 setcapabilities_cb on_setcapabilities;
+getincconopts_cb on_creategetincomingoptions;
 
 /* global debug flag */
 int h323debug;
@@ -1313,6 +1314,24 @@
 }
 
 /**
+ *  Call-back function for incoming connection
+ *
+ *  Returns 1 on success
+ */
+int get_incoming_options(call_options_t *inc_opts, const call_details_t *cd)
+{
+	struct oh323_user *user = NULL;
+	memcpy(inc_opts, &global_options, sizeof(global_options));
+	if ((!strcasecmp(cd->sourceIp, gatekeeper)) && (gkroute == -1) && (usingGk))
+		return 1;
+	user = find_user(cd);
+	if (user == NULL)
+		return 1;
+	memcpy(inc_opts, &user->options, sizeof(user->options));
+	return 1;
+}
+
+/**
  *  Call-back function for incoming calls
  *
  *  Returns 1 on success
@@ -2408,7 +2427,8 @@
 						progress,
 						set_dtmf_payload,
 						hangup_connection,
-						set_local_capabilities);
+						set_local_capabilities,
+						get_incoming_options);
 		/* start the h.323 listener */
 		if (h323_start_listener(h323_signalling_port, bindaddr)) {
 			ast_log(LOG_ERROR, "Unable to create H323 listener.\n");
Index: asterisk-classic/channels/h323/ast_h323.cpp
===================================================================
--- asterisk-classic.orig/channels/h323/ast_h323.cpp	2007-10-21 01:35:45.000000000 +0200
+++ asterisk-classic/channels/h323/ast_h323.cpp	2007-10-21 01:35:49.000000000 +0200
@@ -549,9 +549,30 @@
 H323Connection * MyH323EndPoint::CreateConnection(unsigned callReference, void *o, H323Transport *transport, H323SignalPDU *setupPDU)
 {
 	unsigned options = 0;
+	call_options_t incoming_opts;
 	call_options_t *opts = (call_options_t *)o;
 	MyH323Connection *conn;
 
+	if (opts == NULL && setupPDU != NULL) {
+		call_details_t cd;
+		PString ipStr;
+		PString sourceAliases;
+		PIPSocket::Address Ip;
+		WORD sourcePort;
+
+		memset(&cd, 0, sizeof(cd));
+		memset(&incoming_opts, 0, sizeof(incoming_opts));
+
+		transport->GetRemoteAddress().GetIpAndPort(Ip, sourcePort);
+ 		ipStr = Ip.AsString();
+		sourceAliases = setupPDU->GetSourceAliases();
+		cd.sourceIp = const_cast<char*>((const char *)(ipStr));
+		cd.call_source_aliases = const_cast<char*>((const char *)sourceAliases);
+
+		if (on_creategetincomingoptions(&incoming_opts, &cd))
+			opts = &incoming_opts;
+	}
+
 	if (opts && opts->noFastStart) {
 		options |= H323Connection::FastStartOptionDisable;
 	} else {
@@ -1249,7 +1270,8 @@
 			    progress_cb		pgfunc,
 			    rfc2833_cb		dtmffunc,
 			    hangup_cb		hangupfunc,
-			    setcapabilities_cb	capabilityfunc)
+			    setcapabilities_cb	capabilityfunc,
+			    getincconopts_cb	gicoptsfunc)
 {
 	on_incoming_call = ifunc;
 	on_outgoing_call = sfunc;
@@ -1264,6 +1286,7 @@
 	on_set_rfc2833_payload = dtmffunc;
 	on_hangup = hangupfunc;
 	on_setcapabilities = capabilityfunc;
+	on_creategetincomingoptions = gicoptsfunc;
 }
 
 /**
Index: asterisk-classic/channels/h323/chan_h323.h
===================================================================
--- asterisk-classic.orig/channels/h323/chan_h323.h	2007-10-21 01:35:45.000000000 +0200
+++ asterisk-classic/channels/h323/chan_h323.h	2007-10-21 01:35:49.000000000 +0200
@@ -171,6 +171,9 @@
 typedef void (*setcapabilities_cb)(unsigned, const char *);
 extern setcapabilities_cb on_setcapabilities;
 
+typedef int (*getincconopts_cb)(call_options_t *, const call_details_t *);
+extern getincconopts_cb on_creategetincomingoptions;
+
 /* debug flag */
 extern int h323debug;
 
@@ -205,7 +208,8 @@
 				    progress_cb,
 				    rfc2833_cb,
 				    hangup_cb,
-				    setcapabilities_cb);
+				    setcapabilities_cb,
+				    getincconopts_cb);
 	int h323_set_capabilities(const char *, int, int);
 	int h323_set_alias(struct oh323_alias *);
 	int h323_set_gk(int, char *, char *);
