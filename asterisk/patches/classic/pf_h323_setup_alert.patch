2007-02-02  Guillaume Knispel <gknispel@proformatique.com>

	pf_h323_setup_alert.patch
	$Revision$
	$Date$
	Bugfix / Backport from Asterisk 1.4

	Correctly propagate progress_setup and progress_alert between
	chan_h323.c and ast_h323.cpp for both incoming and outgoing calls.
	Note that this patch introduce the SetCallOptions method of
	MyH323Connection, that is used by other patches for other options
	propagations.

Index: asterisk-classic/channels/h323/ast_h323.cpp
===================================================================
--- asterisk-classic.orig/channels/h323/ast_h323.cpp	2007-10-21 01:12:56.000000000 +0200
+++ asterisk-classic/channels/h323/ast_h323.cpp	2007-10-21 01:35:22.000000000 +0200
@@ -337,8 +337,6 @@
 		connection->SetLocalPartyName(connection->ast_cid_name);
 	}
 
-	connection->dtmfCodec = (RTP_DataFrame::PayloadTypes)opts->dtmfcodec;
-
 	if (h323debug) {
 		cout << "\t-- " << GetLocalUserName() << " is calling host " << fullAddress << endl;
 		cout << "\t-- Call token is " << (const char *)token << endl;
@@ -548,10 +546,11 @@
 	return;
 }
 
-H323Connection * MyH323EndPoint::CreateConnection(unsigned callReference, void *o)
+H323Connection * MyH323EndPoint::CreateConnection(unsigned callReference, void *o, H323Transport *transport, H323SignalPDU *setupPDU)
 {
 	unsigned options = 0;
 	call_options_t *opts = (call_options_t *)o;
+	MyH323Connection *conn;
 
 	if (opts && opts->noFastStart) {
 		options |= H323Connection::FastStartOptionDisable;
@@ -571,7 +570,12 @@
 		options |= H323Connection::SilenceSUppressionOptionEnable;
 	}
 #endif
-	return new MyH323Connection(*this, callReference, options);
+	conn = new MyH323Connection(*this, callReference, options);
+	if (conn) {
+		if (opts)
+			conn->SetCallOptions(opts);
+	}
+	return conn;
 }
 
 /* MyH323Connection Implementation */    
@@ -580,6 +584,10 @@
 	: H323Connection(ep, callReference, options)
 {
 	cause = -1;
+	sessionId = 0;
+	bridging = FALSE;
+	progressSetup = progressAlert = 0;
+	dtmfCodec = (RTP_DataFrame::PayloadTypes)0;
 	if (h323debug) {
 		cout << "	== New H.323 Connection created." << endl;
 	}
@@ -694,6 +702,15 @@
         return connectionState != ShuttingDownConnection;
 }
 
+void MyH323Connection::SetCallOptions(void *o)
+{
+	call_options_t *opts = (call_options_t *)o;
+
+	progressSetup = opts->progress_setup;
+	progressAlert = opts->progress_alert;
+	dtmfCodec = (RTP_DataFrame::PayloadTypes)opts->dtmfcodec;
+}
+
 BOOL MyH323Connection::OnReceivedSignalSetup(const H323SignalPDU & setupPDU)
 {
 	call_details_t cd;
Index: asterisk-classic/channels/h323/ast_h323.h
===================================================================
--- asterisk-classic.orig/channels/h323/ast_h323.h	2007-10-21 01:12:56.000000000 +0200
+++ asterisk-classic/channels/h323/ast_h323.h	2007-10-21 01:35:22.000000000 +0200
@@ -136,7 +136,7 @@
 	void OnClosedLogicalChannel(H323Connection &, const H323Channel &);
 	void OnConnectionEstablished(H323Connection &, const PString &);
 	void OnConnectionCleared(H323Connection &, const PString &);
-	H323Connection * CreateConnection(unsigned, void *);
+	H323Connection * CreateConnection(unsigned, void *, H323Transport *, H323SignalPDU *);
 	void SendUserTone(const PString &, char);
 	BOOL OnConnectionForwarded(H323Connection &, const PString &, const H323SignalPDU &);
 	BOOL ForwardConnection(H323Connection &, const PString &, const H323SignalPDU &);
@@ -178,6 +178,7 @@
 	BOOL OnReceivedCapabilitySet(const H323Capabilities &, const H245_MultiplexCapability *,
 				     H245_TerminalCapabilitySetReject &);
 	void SetCause(int _cause) { cause = _cause; };
+	void SetCallOptions(void *opts);
 
 	PString sourceAliases;
 	PString destAliases;
