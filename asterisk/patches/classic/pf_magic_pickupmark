2009-04-15  Adrien DELLE CAVE <decryptus@proformatique.com>

	pf_magic_pickupmark
	$Revision$
	$Date$

	Added possibility to do a magic pickup with PICKUPMARK.
	PICKUPMARK variable can contains multiple extensions separated by an '&'.

Index: asterisk-1.4.29/channels/chan_sip.c
===================================================================
--- asterisk-1.4.29.orig/channels/chan_sip.c	2010-01-20 17:33:51.000000000 +0100
+++ asterisk-1.4.29/channels/chan_sip.c	2010-01-20 17:47:07.000000000 +0100
@@ -14888,7 +14888,10 @@
 		return -1;
 	}
 
-	snprintf(argument, length, "%s@%s", extension, context);
+	if (!ast_strlen_zero(context))
+		snprintf(argument, length, "%s@%s", extension, context);
+	else
+		snprintf(argument, length - 1, "%s", extension);
 
 	/* There is no point in capturing the return value since pickup_exec
 	   doesn't return anything meaningful unless the passed data is an empty
@@ -15099,8 +15102,18 @@
 					error = 1;
 				} else {
 					ast_log(LOG_NOTICE, "Trying to pick up %s@%s\n", subscription->exten, subscription->context);
-					pickup->exten   = ast_strdup(subscription->exten);
-					pickup->context = ast_strdup(subscription->context);
+
+					if (ast_asprintf(&pickup->exten,
+							 "%s%%%s@PICKUPMARK&%s@%s",
+							 subscription->exten,
+							 subscription->context,
+							 subscription->exten,
+							 subscription->context) < 0) {
+						pickup->exten = NULL;
+					}
+
+					pickup->context = ast_strdup("");
+
 					ast_mutex_unlock(&subscription->lock);
 					if (subscription->owner) {
 						ast_channel_unlock(subscription->owner);
Index: asterisk-1.4.29/apps/app_directed_pickup.c
===================================================================
--- asterisk-1.4.29.orig/apps/app_directed_pickup.c	2010-01-20 17:33:50.000000000 +0100
+++ asterisk-1.4.29/apps/app_directed_pickup.c	2010-01-20 17:47:07.000000000 +0100
@@ -115,22 +115,35 @@
 /* Attempt to pick up specified mark */
 static int pickup_by_mark(struct ast_channel *chan, char *mark)
 {
-	int res = -1;
-	const char *tmp = NULL;
+	int res;
+	const char *tmp;
+	char *pmarktmp;
+	char *exten;
+	char *scan;
 	struct ast_channel *target = NULL;
 
 	while ((target = ast_channel_walk_locked(target))) {
-		if ((tmp = pbx_builtin_getvar_helper(target, PICKUPMARK)) &&
-		    !strcasecmp(tmp, mark) &&
-		    can_pickup(target)) {
-			res = pickup_do(chan, target);
+		if (!(tmp = pbx_builtin_getvar_helper(target, PICKUPMARK)) || ast_strlen_zero(tmp)) {
 			ast_channel_unlock(target);
-			break;
+			continue;
 		}
+
+		pmarktmp = ast_strdup(tmp);
+		scan = pmarktmp;
+
+		while ((exten = strsep(&scan, "&"))) {
+			if (!strcasecmp(exten, mark) && can_pickup(target)) {
+				res = pickup_do(chan, target);
+				ast_free(pmarktmp);
+				ast_channel_unlock(target);
+				return res;
+			}
+		}
+		ast_free(pmarktmp);
 		ast_channel_unlock(target);
 	}
 
-	return res;
+	return -1;
 }
 
 /* Main application entry point */
