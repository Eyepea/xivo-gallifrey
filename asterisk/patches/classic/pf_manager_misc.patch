2008-11-25  Corentin Le Gall <clegall@proformatique.com>

	pf_manager_misc.patch
	$Revision$
	$Date$
        Miscellaneous addenda in Manager Events
        - backport of "MeetMeList" Manager Command from 1.6 branch
        - backport of "Transfer" and "Masquerade" Manager Events from 1.6 branch
        - added misc parameters to MeetMeJoin event
        - added Data contents to the Dial event
        - added Application Name and Data to the Status event
        - added Uniqueid information to the ParkedCall and QueueEntry events
        - added a HangupRequest event to know which side ends a call
        - added a Reason information to the Leave event

Index: asterisk-1.4.24/apps/app_dial.c
===================================================================
--- asterisk-1.4.24.orig/apps/app_dial.c	2009-05-27 12:17:59.000000000 +0200
+++ asterisk-1.4.24/apps/app_dial.c	2009-05-27 12:56:37.000000000 +0200
@@ -395,16 +395,21 @@
 static void senddialevent(struct ast_channel *src, struct ast_channel *dst)
 {
 	/* XXX do we need also CallerIDnum ? */
-	manager_event(EVENT_FLAG_CALL, "Dial", 
-			   "Source: %s\r\n"
-			   "Destination: %s\r\n"
-			   "CallerID: %s\r\n"
-			   "CallerIDName: %s\r\n"
-			   "SrcUniqueID: %s\r\n"
-			   "DestUniqueID: %s\r\n",
-			   src->name, dst->name, S_OR(src->cid.cid_num, "<unknown>"),
-			   S_OR(src->cid.cid_name, "<unknown>"), src->uniqueid,
-			   dst->uniqueid);
+	manager_event(EVENT_FLAG_CALL, "Dial",
+                      "Source: %s\r\n"
+                      "Destination: %s\r\n"
+                      "Data: %s\r\n"
+                      "CallerID: %s\r\n"
+                      "CallerIDName: %s\r\n"
+                      "SrcUniqueID: %s\r\n"
+                      "DestUniqueID: %s\r\n",
+                      src->name,
+                      dst->name,
+                      src->data ? src->data : "",
+                      S_OR(src->cid.cid_num, "<unknown>"),
+                      S_OR(src->cid.cid_name, "<unknown>"),
+                      src->uniqueid,
+                      dst->uniqueid);
 }
 
 static struct ast_channel *wait_for_answer(struct ast_channel *in, struct dial_localuser *outgoing, int *to, struct ast_flags *peerflags, int *sentringing, char *status, size_t statussize, int busystart, int nochanstart, int congestionstart, int priority_jump, int *result)
Index: asterisk-1.4.24/apps/app_meetme.c
===================================================================
--- asterisk-1.4.24.orig/apps/app_meetme.c	2009-05-27 12:17:59.000000000 +0200
+++ asterisk-1.4.24/apps/app_meetme.c	2009-05-27 12:18:03.000000000 +0200
@@ -1818,11 +1818,22 @@
 
 	if (!sent_event) {
 		manager_event(EVENT_FLAG_CALL, "MeetmeJoin", 
-			      "Channel: %s\r\n"
-			      "Uniqueid: %s\r\n"
-			      "Meetme: %s\r\n"
-			      "Usernum: %d\r\n",
-			      chan->name, chan->uniqueid, conf->confno, user->user_no);
+                              "Channel: %s\r\n"
+                              "Uniqueid: %s\r\n"
+                              "Meetme: %s\r\n"
+                              "PseudoChan: %s\r\n"
+                              "Admin: %s\r\n"
+                              "Usernum: %d\r\n"
+                              "CallerIDnum: %s\r\n"
+                              "CallerIDname: %s\r\n",
+                              chan->name,
+                              chan->uniqueid,
+                              conf->confno,
+                              conf->chan->name,
+                              user->userflags & CONFFLAG_ADMIN ? "Yes" : "No",
+                              user->user_no,
+                              S_OR(user->chan->cid.cid_num, "<unknown>"),
+                              S_OR(user->chan->cid.cid_name, "<unknown>"));
 		sent_event = 1;
 	}
 
@@ -2421,7 +2432,9 @@
 				      "CallerIDnum: %s\r\n"
 				      "CallerIDname: %s\r\n"
 				      "Duration: %ld\r\n",
-				      chan->name, chan->uniqueid, conf->confno, 
+                                      chan->name,
+                                      chan->uniqueid,
+                                      conf->confno,
 				      user->user_no,
 				      S_OR(user->chan->cid.cid_num, "<unknown>"),
 				      S_OR(user->chan->cid.cid_name, "<unknown>"),
@@ -3143,6 +3156,85 @@
 	return meetmemute(s, m, 0);
 }
 
+static char mandescr_meetmelist[] =
+"Description: Lists all users in a particular MeetMe conference.\n"
+"MeetmeList will follow as separate events, followed by a final event called\n"
+"MeetmeListComplete.\n"
+"Variables:\n"
+"    *ActionId: <id>\n"
+"    *Conference: <confno>\n";
+
+static int action_meetmelist(struct mansession *s, const struct message *m)
+{
+	const char *actionid = astman_get_header(m, "ActionID");
+	const char *conference = astman_get_header(m, "Conference");
+	char idText[80] = "";
+	struct ast_conference *cnf;
+	struct ast_conf_user *user;
+	int total = 0;
+
+	if (!ast_strlen_zero(actionid))
+		snprintf(idText, sizeof(idText), "ActionID: %s\r\n", actionid);
+
+	if (AST_LIST_EMPTY(&confs)) {
+		astman_send_error(s, m, "No active conferences.");
+		return 0;
+	}
+
+	astman_send_ack(s, m, "Meetme user list will follow");
+
+	/* Find the right conference */
+	AST_LIST_LOCK(&confs);
+	AST_LIST_TRAVERSE(&confs, cnf, list) {
+		/* If we ask for one particular, and this isn't it, skip it */
+		if (!ast_strlen_zero(conference) && strcmp(cnf->confno, conference))
+			continue;
+
+		/* Show all the users */
+		AST_LIST_TRAVERSE(&cnf->userlist, user, list) {
+			total++;
+			astman_append(s,
+                                      "Event: MeetmeList\r\n"
+                                      "%s"
+                                      "Conference: %s\r\n"
+                                      "PseudoChan: %s\r\n"
+                                      "UserNumber: %d\r\n"
+                                      "CallerIDNum: %s\r\n"
+                                      "CallerIDName: %s\r\n"
+                                      "Channel: %s\r\n"
+                                      "Uniqueid: %s\r\n"
+                                      "Admin: %s\r\n"
+                                      "Role: %s\r\n"
+                                      "MarkedUser: %s\r\n"
+                                      "Muted: %s\r\n"
+                                      "Talking: %s\r\n"
+                                      "\r\n",
+                                      idText,
+                                      cnf->confno,
+                                      cnf->chan->name,
+                                      user->user_no,
+                                      S_OR(user->chan->cid.cid_num, "<unknown>"),
+                                      S_OR(user->chan->cid.cid_name, "<no name>"),
+                                      user->chan->name,
+                                      user->chan->uniqueid,
+                                      user->userflags & CONFFLAG_ADMIN ? "Yes" : "No",
+                                      user->userflags & CONFFLAG_MONITOR ? "Listen only" : user->userflags & CONFFLAG_TALKER ? "Talk only" : "Talk and listen",
+                                      user->userflags & CONFFLAG_MARKEDUSER ? "Yes" : "No",
+                                      user->adminflags & ADMINFLAG_MUTED ? "By admin" : user->adminflags & ADMINFLAG_SELFMUTED ? "By self" : "No",
+                                      user->talking > 0 ? "Yes" : user->talking == 0 ? "No" : "Not monitored");
+		}
+	}
+	AST_LIST_UNLOCK(&confs);
+	/* Send final confirmation */
+	astman_append(s,
+                      "Event: MeetmeListComplete\r\n"
+                      "EventList: Complete\r\n"
+                      "ListItems: %d\r\n"
+                      "%s"
+                      "\r\n", total, idText);
+	return 0;
+}
+
 static void *recordthread(void *args)
 {
 	struct ast_conference *cnf = args;
@@ -4970,6 +5062,7 @@
 	ast_cli_unregister_multiple(cli_meetme, ARRAY_LEN(cli_meetme));
 	res = ast_manager_unregister("MeetmeMute");
 	res |= ast_manager_unregister("MeetmeUnmute");
+	res |= ast_manager_unregister("MeetmeList");
 	res |= ast_unregister_application(app3);
 	res |= ast_unregister_application(app2);
 	res |= ast_unregister_application(app);
@@ -4993,10 +5086,12 @@
 	res |= load_config(0);
 
 	ast_cli_register_multiple(cli_meetme, ARRAY_LEN(cli_meetme));
-	res |= ast_manager_register("MeetmeMute", EVENT_FLAG_CALL, 
+	res |= ast_manager_register("MeetmeMute", EVENT_FLAG_CALL,
 				    action_meetmemute, "Mute a Meetme user");
-	res |= ast_manager_register("MeetmeUnmute", EVENT_FLAG_CALL, 
+	res |= ast_manager_register("MeetmeUnmute", EVENT_FLAG_CALL,
 				    action_meetmeunmute, "Unmute a Meetme user");
+	res |= ast_manager_register2("MeetmeList", EVENT_FLAG_CALL,
+                                     action_meetmelist, "List participants in a conference", mandescr_meetmelist);
 	res |= ast_register_application(app3, admin_exec, synopsis3, descrip3);
 	res |= ast_register_application(app2, count_exec, synopsis2, descrip2);
 	res |= ast_register_application(app, conf_exec, synopsis, descrip);
Index: asterisk-1.4.24/main/manager.c
===================================================================
--- asterisk-1.4.24.orig/main/manager.c	2009-05-27 12:17:59.000000000 +0200
+++ asterisk-1.4.24/main/manager.c	2009-05-27 12:18:03.000000000 +0200
@@ -1564,49 +1564,53 @@
 				elapsed_seconds = now.tv_sec - c->cdr->start.tv_sec;
 			}
 			astman_append(s,
-			"Event: Status\r\n"
-			"Privilege: Call\r\n"
-			"Channel: %s\r\n"
-			"CallerID: %s\r\n"		/* This parameter is deprecated and will be removed post-1.4 */
-			"CallerIDNum: %s\r\n"
-			"CallerIDName: %s\r\n"
-			"Account: %s\r\n"
-			"State: %s\r\n"
-			"Context: %s\r\n"
-			"Extension: %s\r\n"
-			"Priority: %d\r\n"
-			"Seconds: %ld\r\n"
-			"%s"
-			"Uniqueid: %s\r\n"
-			"%s"
-			"\r\n",
-			c->name, 
-			S_OR(c->cid.cid_num, "<unknown>"), 
-			S_OR(c->cid.cid_num, "<unknown>"), 
-			S_OR(c->cid.cid_name, "<unknown>"), 
-			c->accountcode,
-			ast_state2str(c->_state), c->context,
-			c->exten, c->priority, (long)elapsed_seconds, bridge, c->uniqueid, idText);
+                                      "Event: Status\r\n"
+                                      "Privilege: Call\r\n"
+                                      "Channel: %s\r\n"
+                                      "Application: %s\r\n"
+                                      "AppData: %s\r\n"
+                                      "CallerIDNum: %s\r\n"
+                                      "CallerIDName: %s\r\n"
+                                      "Account: %s\r\n"
+                                      "State: %s\r\n"
+                                      "Context: %s\r\n"
+                                      "Extension: %s\r\n"
+                                      "Priority: %d\r\n"
+                                      "Seconds: %ld\r\n"
+                                      "%s"
+                                      "Uniqueid: %s\r\n"
+                                      "%s"
+                                      "\r\n",
+                                      c->name,
+                                      c->appl ? c->appl : "",
+                                      c->data ? c->data : "",
+                                      S_OR(c->cid.cid_num, "<unknown>"),
+                                      S_OR(c->cid.cid_name, "<unknown>"),
+                                      c->accountcode,
+                                      ast_state2str(c->_state), c->context,
+                                      c->exten, c->priority, (long)elapsed_seconds, bridge, c->uniqueid, idText);
 		} else {
 			astman_append(s,
-			"Event: Status\r\n"
-			"Privilege: Call\r\n"
-			"Channel: %s\r\n"
-			"CallerID: %s\r\n"		/* This parameter is deprecated and will be removed post-1.4 */
-			"CallerIDNum: %s\r\n"
-			"CallerIDName: %s\r\n"
-			"Account: %s\r\n"
-			"State: %s\r\n"
-			"%s"
-			"Uniqueid: %s\r\n"
-			"%s"
-			"\r\n",
-			c->name, 
-			S_OR(c->cid.cid_num, "<unknown>"), 
-			S_OR(c->cid.cid_num, "<unknown>"), 
-			S_OR(c->cid.cid_name, "<unknown>"), 
-			c->accountcode,
-			ast_state2str(c->_state), bridge, c->uniqueid, idText);
+                                      "Event: Status\r\n"
+                                      "Privilege: Call\r\n"
+                                      "Channel: %s\r\n"
+                                      "Application: %s\r\n"
+                                      "AppData: %s\r\n"
+                                      "CallerIDNum: %s\r\n"
+                                      "CallerIDName: %s\r\n"
+                                      "Account: %s\r\n"
+                                      "State: %s\r\n"
+                                      "%s"
+                                      "Uniqueid: %s\r\n"
+                                      "%s"
+                                      "\r\n",
+                                      c->name,
+                                      c->appl ? c->appl : "",
+                                      c->data ? c->data : "",
+                                      S_OR(c->cid.cid_num, "<unknown>"),
+                                      S_OR(c->cid.cid_name, "<unknown>"),
+                                      c->accountcode,
+                                      ast_state2str(c->_state), bridge, c->uniqueid, idText);
 		}
 		ast_channel_unlock(c);
 		if (!all)
Index: asterisk-1.4.24/res/res_features.c
===================================================================
--- asterisk-1.4.24.orig/res/res_features.c	2009-05-27 12:17:59.000000000 +0200
+++ asterisk-1.4.24/res/res_features.c	2009-05-27 12:56:38.000000000 +0200
@@ -421,7 +421,7 @@
 {
 	struct ast_context *con;
 	int parkingnum_copy;
-	const char *event_from;
+	const char *event_from, *event_from_uniqueid, *event_from_calleridnum, *event_from_calleridname;
 
 	/* Get a valid space if not already done */
 	if (pu == NULL)
@@ -490,22 +490,38 @@
 
 	if (peer) {
 		event_from = peer->name;
+		event_from_uniqueid = peer->uniqueid;
+                event_from_calleridnum = peer->cid.cid_num;
+                event_from_calleridname = peer->cid.cid_name;
 	} else {
 		event_from = pbx_builtin_getvar_helper(chan, "BLINDTRANSFER");
+		event_from_uniqueid = 0;
+                event_from_calleridnum = 0;
+                event_from_calleridname = 0;
 	}
 
 	manager_event(EVENT_FLAG_CALL, "ParkedCall",
-		"Exten: %s\r\n"
-		"Channel: %s\r\n"
-		"From: %s\r\n"
-		"Timeout: %ld\r\n"
-		"CallerID: %s\r\n"
-		"CallerIDName: %s\r\n",
-		pu->parkingexten, pu->chan->name, event_from ? event_from : "",
-		(long)pu->start.tv_sec + (long)(pu->parkingtime/1000) - (long)time(NULL),
-		S_OR(pu->chan->cid.cid_num, "<unknown>"),
-		S_OR(pu->chan->cid.cid_name, "<unknown>")
-		);
+                      "Exten: %s\r\n"
+                      "Channel: %s\r\n"
+                      "Uniqueid: %s\r\n"
+                      "From: %s\r\n"
+                      "FromCallerIDNum: %s\r\n"
+                      "FromCallerIDName: %s\r\n"
+                      "FromUniqueid: %s\r\n"
+                      "Timeout: %ld\r\n"
+                      "CallerID: %s\r\n"
+                      "CallerIDName: %s\r\n",
+                      pu->parkingexten,
+                      pu->chan->name,
+                      pu->chan->uniqueid,
+                      event_from ? event_from : "",
+                      event_from_calleridnum ? event_from_calleridnum : "<unknown>",
+                      event_from_calleridname ? event_from_calleridname : "<unknown>",
+                      event_from_uniqueid ? event_from_uniqueid : "<unknown>",
+                      (long)pu->start.tv_sec + (long)(pu->parkingtime/1000) - (long)time(NULL),
+                      S_OR(pu->chan->cid.cid_num, "<unknown>"),
+                      S_OR(pu->chan->cid.cid_name, "<unknown>")
+                      );
 
 	if (peer && adsipark && ast_adsi_available(peer)) {
 		adsi_announce_park(peer, pu->parkingexten);	/* Only supports parking numbers */
@@ -2125,15 +2141,17 @@
 static void post_manager_event(const char *s, char *parkingexten, struct ast_channel *chan)
 {
 	manager_event(EVENT_FLAG_CALL, s,
-		"Exten: %s\r\n"
-		"Channel: %s\r\n"
-		"CallerID: %s\r\n"
-		"CallerIDName: %s\r\n\r\n",
-		parkingexten, 
-		chan->name,
-		S_OR(chan->cid.cid_num, "<unknown>"),
-		S_OR(chan->cid.cid_name, "<unknown>")
-		);
+                      "Exten: %s\r\n"
+                      "Channel: %s\r\n"
+                      "Uniqueid: %s\r\n"
+                      "CallerID: %s\r\n"
+                      "CallerIDName: %s\r\n\r\n",
+                      parkingexten,
+                      chan->name,
+                      chan->uniqueid,
+                      S_OR(chan->cid.cid_num, "<unknown>"),
+                      S_OR(chan->cid.cid_name, "<unknown>")
+                      );
 }
 
 static char *callback_dialoptions(struct ast_flags *features_callee, struct ast_flags *features_caller, char *options, size_t len)
@@ -2468,15 +2486,21 @@
 			ast_log(LOG_WARNING, "Whoa, no parking context?\n");
 
 		manager_event(EVENT_FLAG_CALL, "UnParkedCall",
-			"Exten: %s\r\n"
-			"Channel: %s\r\n"
-			"From: %s\r\n"
-			"CallerID: %s\r\n"
-			"CallerIDName: %s\r\n",
-			pu->parkingexten, pu->chan->name, chan->name,
-			S_OR(pu->chan->cid.cid_num, "<unknown>"),
-			S_OR(pu->chan->cid.cid_name, "<unknown>")
-			);
+                              "Exten: %s\r\n"
+                              "Channel: %s\r\n"
+                              "Uniqueid: %s\r\n"
+                              "From: %s\r\n"
+                              "UniqueidFrom: %s\r\n"
+                              "CallerID: %s\r\n"
+                              "CallerIDName: %s\r\n",
+                              pu->parkingexten,
+                              pu->chan->name,
+                              pu->chan->uniqueid,
+                              chan->name,
+                              chan->uniqueid,
+                              S_OR(pu->chan->cid.cid_num, "<unknown>"),
+                              S_OR(pu->chan->cid.cid_name, "<unknown>")
+                              );
 
 		free(pu);
 	}
Index: asterisk-1.4.24/channels/chan_sip.c
===================================================================
--- asterisk-1.4.24.orig/channels/chan_sip.c	2009-05-27 12:17:59.000000000 +0200
+++ asterisk-1.4.24/channels/chan_sip.c	2009-05-27 12:58:03.000000000 +0200
@@ -8158,7 +8158,12 @@
 
 	destroy_association(peer);	/* remove registration data from storage */
 	
-	manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "Peer: SIP/%s\r\nPeerStatus: Unregistered\r\nCause: Expired\r\n", peer->name);
+	manager_event(EVENT_FLAG_SYSTEM,
+                      "PeerStatus",
+                      "Peer: SIP/%s\r\n"
+                      "PeerStatus: Unregistered\r\n"
+                      "Cause: Expired\r\n",
+                      peer->name);
 	register_peer_exten(peer, FALSE);	/* Remove regexten */
 	peer->expire = -1;
 	ast_device_state_changed("SIP/%s", peer->name);
@@ -8419,7 +8424,11 @@
 		if (option_verbose > 2)
 			ast_verbose(VERBOSE_PREFIX_3 "Unregistered SIP '%s'\n", peer->name);
 
-		manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "Peer: SIP/%s\r\nPeerStatus: Unregistered\r\n", peer->name);
+		manager_event(EVENT_FLAG_SYSTEM,
+                              "PeerStatus",
+                              "Peer: SIP/%s\r\n"
+                              "PeerStatus: Unregistered\r\n",
+                              peer->name);
 		return PARSE_REGISTER_UPDATE;
 	}
 
@@ -8506,8 +8515,7 @@
 	snprintf(data, sizeof(data), "%s:%d:%d:%s:%s", ast_inet_ntoa(peer->addr.sin_addr), ntohs(peer->addr.sin_port), expiry, peer->username, peer->fullcontact);
 	if (!ast_test_flag(&peer->flags[1], SIP_PAGE2_RT_FROMCONTACT)) 
 		ast_db_put("SIP/Registry", peer->name, data);
-	manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "Peer: SIP/%s\r\nPeerStatus: Registered\r\n", peer->name);
-
+        
 	/* Is this a new IP address for us? */
 	if (option_verbose > 2 && inaddrcmp(&peer->addr, &oldsin)) {
 		ast_verbose(VERBOSE_PREFIX_3 "Registered SIP '%s' at %s port %d\n", peer->name, ast_inet_ntoa(peer->addr.sin_addr), ntohs(peer->addr.sin_port));
@@ -8522,6 +8530,19 @@
 		if (option_verbose > 3)
 			ast_verbose(VERBOSE_PREFIX_3 "Saved useragent \"%s\" for peer %s\n", peer->useragent, peer->name);  
 	}
+        
+	manager_event(EVENT_FLAG_SYSTEM,
+                      "PeerStatus",
+                      "Peer: SIP/%s\r\n"
+                      "PeerStatus: Registered\r\n"
+                      "PeerIP: %s\r\n"
+                      "PeerPort: %d\r\n"
+                      "UserAgent: %s\r\n",
+                      peer->name,
+                      ast_inet_ntoa(peer->addr.sin_addr),
+                      ntohs(peer->addr.sin_port),
+                      useragent);
+        
 	return PARSE_REGISTER_UPDATE;
 }
 
@@ -9030,7 +9051,11 @@
 			case PARSE_REGISTER_UPDATE:
 				/* Say OK and ask subsystem to retransmit msg counter */
 				transmit_response_with_date(p, "200 OK", req);
-				manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "Peer: SIP/%s\r\nPeerStatus: Registered\r\n", peer->name);
+				manager_event(EVENT_FLAG_SYSTEM,
+                                              "PeerStatus",
+                                              "Peer: SIP/%s\r\n"
+                                              "PeerStatus: Registered\r\n",
+                                              peer->name);
 				peer->lastmsgssent = -1;
 				res = 0;
 				break;
@@ -12948,9 +12973,12 @@
 			peer->name, s, pingtime, peer->maxms);
 		ast_device_state_changed("SIP/%s", peer->name);
 		ast_update_realtime("sippeers", "name", peer->name, "lastms", str_lastms, NULL);
-		manager_event(EVENT_FLAG_SYSTEM, "PeerStatus",
-			"Peer: SIP/%s\r\nPeerStatus: %s\r\nTime: %d\r\n",
-			peer->name, s, pingtime);
+		manager_event(EVENT_FLAG_SYSTEM,
+                              "PeerStatus",
+                              "Peer: SIP/%s\r\n"
+                              "PeerStatus: %s\r\n"
+                              "Time: %d\r\n",
+                              peer->name, s, pingtime);
 	}
 
 	if (!AST_SCHED_DEL(sched, peer->pokeexpire)) {
@@ -15042,6 +15070,19 @@
 	ast_set_flag(&transferer->flags[0], SIP_DEFER_BYE_ON_TRANSFER);	/* Delay hangup */
 
 	/* Perform the transfer */
+	manager_event(EVENT_FLAG_CALL, "Transfer",
+                      "TransferMethod: SIP\r\n"
+                      "TransferType: Attended\r\n"
+                      "Channel: %s\r\n"
+                      "Uniqueid: %s\r\n"
+                      "SIP-Callid: %s\r\n"
+                      "TargetChannel: %s\r\n"
+                      "TargetUniqueid: %s\r\n",
+                      transferer->owner->name,
+                      transferer->owner->uniqueid,
+                      transferer->callid,
+                      target.chan1->name,
+                      target.chan1->uniqueid);
 	res = attempt_transfer(current, &target);
 	ast_mutex_unlock(&targetcall_pvt->lock);
 	if (res) {
@@ -15308,6 +15349,22 @@
 		ast_clear_flag(&p->flags[0], SIP_GOTREFER);	
 		p->refer->status = REFER_200OK;
 		append_history(p, "Xfer", "REFER to call parking.");
+		manager_event(EVENT_FLAG_CALL, "Transfer",
+                              "TransferMethod: SIP\r\n"
+                              "TransferType: Blind\r\n"
+                              "Channel: %s\r\n"
+                              "Uniqueid: %s\r\n"
+                              "SIP-Callid: %s\r\n"
+                              "TargetChannel: %s\r\n"
+                              "TargetUniqueid: %s\r\n"
+                              "TransferExten: %s\r\n"
+                              "Transfer2Parking: Yes\r\n",
+                              current.chan1->name,
+                              current.chan1->uniqueid,
+                              p->callid,
+                              current.chan2->name,
+                              current.chan2->uniqueid,
+                              p->refer->refer_to);
 		if (sipdebug && option_debug > 3)
 			ast_log(LOG_DEBUG, "SIP transfer to parking: trying to park %s. Parked by %s\n", current.chan2->name, current.chan1->name);
 		sip_park(current.chan2, current.chan1, req, seqno);
@@ -15379,6 +15436,22 @@
 	res = ast_async_goto(current.chan2, p->refer->refer_to_context, p->refer->refer_to, 1);
 
 	if (!res) {
+		manager_event(EVENT_FLAG_CALL, "Transfer",
+                              "TransferMethod: SIP\r\n"
+                              "TransferType: Blind\r\n"
+                              "Channel: %s\r\n"
+                              "Uniqueid: %s\r\n"
+                              "SIP-Callid: %s\r\n"
+                              "TargetChannel: %s\r\n"
+                              "TargetUniqueid: %s\r\n"
+                              "TransferExten: %s\r\n"
+                              "TransferContext: %s\r\n",
+                              current.chan1->name,
+                              current.chan1->uniqueid,
+                              p->callid,
+                              current.chan2->name,
+                              current.chan2->uniqueid,
+                              p->refer->refer_to, p->refer->refer_to_context);
 		/* Success  - we have a new channel */
 		if (option_debug > 2)
 			ast_log(LOG_DEBUG, "%s transfer succeeded. Telling transferer.\n", p->refer->attendedtransfer? "Attended" : "Blind");
@@ -16657,7 +16730,12 @@
 	if (peer->lastms > -1) {
 		ast_log(LOG_NOTICE, "Peer '%s' is now UNREACHABLE!  Last qualify: %d\n", peer->name, peer->lastms);
 		ast_update_realtime("sippeers", "name", peer->name, "lastms", "-1", NULL);
-		manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "Peer: SIP/%s\r\nPeerStatus: Unreachable\r\nTime: %d\r\n", peer->name, -1);
+		manager_event(EVENT_FLAG_SYSTEM,
+                              "PeerStatus",
+                              "Peer: SIP/%s\r\n"
+                              "PeerStatus: Unreachable\r\n"
+                              "Time: %d\r\n",
+                              peer->name, -1);
 	}
 	if (peer->call)
 		sip_destroy(peer->call);
Index: asterisk-1.4.24/main/channel.c
===================================================================
--- asterisk-1.4.24.orig/main/channel.c	2009-05-27 12:17:59.000000000 +0200
+++ asterisk-1.4.24/main/channel.c	2009-05-27 12:56:38.000000000 +0200
@@ -978,6 +978,12 @@
 		chan->_softhangup |= AST_SOFTHANGUP_DEV;
 		ast_channel_unlock(chan);
 	}
+        if(chan)
+                manager_event(EVENT_FLAG_CALL, "HangupRequest",
+                              "Channel: %s\r\n"
+                              "Uniqueid: %s\r\n",
+                              chan->name,
+                              chan->uniqueid);
 	return ast_queue_frame(chan, &f);
 }
 
@@ -3559,6 +3565,14 @@
 		ast_log(LOG_DEBUG, "Actually Masquerading %s(%d) into the structure of %s(%d)\n",
 			clone->name, clone->_state, original->name, original->_state);
 
+	manager_event(EVENT_FLAG_CALL, "Masquerade",
+                      "Clone: %s\r\n"
+                      "CloneState: %s\r\n"
+                      "Original: %s\r\n"
+                      "OriginalState: %s\r\n",
+                      clone->name, ast_state2str(clone->_state),
+                      original->name, ast_state2str(original->_state));
+
 	/* XXX This is a seriously wacked out operation.  We're essentially putting the guts of
 	   the clone channel into the original channel.  Start by killing off the original
 	   channel's backend.   I'm not sure we're going to keep this function, because
@@ -3831,18 +3845,30 @@
 		chan->cid.cid_ani = ast_strdup(ani);
 	}
 	manager_event(EVENT_FLAG_CALL, "Newcallerid",
-				"Channel: %s\r\n"
-				"CallerID: %s\r\n"
-				"CallerIDName: %s\r\n"
-				"Uniqueid: %s\r\n"
-				"CID-CallingPres: %d (%s)\r\n",
-				chan->name,
-				S_OR(chan->cid.cid_num, "<Unknown>"),
-				S_OR(chan->cid.cid_name, "<Unknown>"),
-				chan->uniqueid,
-				chan->cid.cid_pres,
-				ast_describe_caller_presentation(chan->cid.cid_pres)
-				);
+                      "Channel: %s\r\n"
+                      "CallerID: %s\r\n"
+                      "CallerIDName: %s\r\n"
+                      "ANI: %s\r\n"
+                      "DNID: %s\r\n"
+                      "RDNIS: %s\r\n"
+                      "Uniqueid: %s\r\n"
+                      "ANI2: %d\r\n"
+                      "TON: %d\r\n"
+                      "TNS: %d\r\n"
+                      "CID-CallingPres: %d (%s)\r\n",
+                      chan->name,
+                      S_OR(chan->cid.cid_num, "<Unknown>"),
+                      S_OR(chan->cid.cid_name, "<Unknown>"),
+                      S_OR(chan->cid.cid_ani, "<Unknown>"),
+                      S_OR(chan->cid.cid_dnid, "<Unknown>"),
+                      S_OR(chan->cid.cid_rdnis, "<Unknown>"),
+                      chan->uniqueid,
+                      chan->cid.cid_ani2,
+                      chan->cid.cid_ton,
+                      chan->cid.cid_tns,
+                      chan->cid.cid_pres,
+                      ast_describe_caller_presentation(chan->cid.cid_pres)
+                      );
 	
 	ast_channel_unlock(chan);
 }
@@ -4136,8 +4162,15 @@
 		      "Uniqueid1: %s\r\n"
 		      "Uniqueid2: %s\r\n"
 		      "CallerID1: %s\r\n"
-		      "CallerID2: %s\r\n",
-		      c0->name, c1->name, c0->uniqueid, c1->uniqueid, c0->cid.cid_num, c1->cid.cid_num);
+                      "CallerIDName1: %s\r\n"
+		      "CallerID2: %s\r\n"
+		      "CallerIDName2: %s\r\n",
+		      c0->name, c1->name,
+                      c0->uniqueid, c1->uniqueid,
+                      S_OR(c0->cid.cid_num, "<unknown>"),
+                      S_OR(c0->cid.cid_name, "<unknown>"),
+                      S_OR(c1->cid.cid_num, "<unknown>"),
+                      S_OR(c1->cid.cid_name, "<unknown>"));
 
 	o0nativeformats = c0->nativeformats;
 	o1nativeformats = c1->nativeformats;
@@ -4262,9 +4295,17 @@
 					      "Channel2: %s\r\n"
 					      "Uniqueid1: %s\r\n"
 					      "Uniqueid2: %s\r\n"
+                                              "Where: loop\r\n"
 					      "CallerID1: %s\r\n"
-					      "CallerID2: %s\r\n",
-					      c0->name, c1->name, c0->uniqueid, c1->uniqueid, c0->cid.cid_num, c1->cid.cid_num);
+                                              "CallerIDName1: %s\r\n"
+					      "CallerID2: %s\r\n"
+                                              "CallerIDName2: %s\r\n",
+					      c0->name, c1->name,
+                                              c0->uniqueid, c1->uniqueid,
+                                              S_OR(c0->cid.cid_num, "<unknown>"),
+                                              S_OR(c0->cid.cid_name, "<unknown>"),
+                                              S_OR(c1->cid.cid_num, "<unknown>"),
+                                              S_OR(c1->cid.cid_name, "<unknown>"));
 				if (option_debug)
 					ast_log(LOG_DEBUG, "Returning from native bridge, channels: %s, %s\n", c0->name, c1->name);
 
@@ -4307,9 +4348,17 @@
 					      "Channel2: %s\r\n"
 					      "Uniqueid1: %s\r\n"
 					      "Uniqueid2: %s\r\n"
+                                              "Where: incompatible\r\n"
 					      "CallerID1: %s\r\n"
-					      "CallerID2: %s\r\n",
-					      c0->name, c1->name, c0->uniqueid, c1->uniqueid, c0->cid.cid_num, c1->cid.cid_num);
+                                              "CallerIDName1: %s\r\n"
+					      "CallerID2: %s\r\n"
+                                              "CallerIDName2: %s\r\n",
+					      c0->name, c1->name,
+                                              c0->uniqueid, c1->uniqueid,
+                                              S_OR(c0->cid.cid_num, "<unknown>"),
+                                              S_OR(c0->cid.cid_name, "<unknown>"),
+                                              S_OR(c1->cid.cid_num, "<unknown>"),
+                                              S_OR(c1->cid.cid_name, "<unknown>"));
 				return AST_BRIDGE_FAILED;
 			}
 			o0nativeformats = c0->nativeformats;
@@ -4346,9 +4395,17 @@
 		      "Channel2: %s\r\n"
 		      "Uniqueid1: %s\r\n"
 		      "Uniqueid2: %s\r\n"
-		      "CallerID1: %s\r\n"
-		      "CallerID2: %s\r\n",
-		      c0->name, c1->name, c0->uniqueid, c1->uniqueid, c0->cid.cid_num, c1->cid.cid_num);
+                      "Where: loopisover\r\n"
+                      "CallerID1: %s\r\n"
+                      "CallerIDName1: %s\r\n"
+                      "CallerID2: %s\r\n"
+                      "CallerIDName2: %s\r\n",
+                      c0->name, c1->name,
+                      c0->uniqueid, c1->uniqueid,
+                      S_OR(c0->cid.cid_num, "<unknown>"),
+                      S_OR(c0->cid.cid_name, "<unknown>"),
+                      S_OR(c1->cid.cid_num, "<unknown>"),
+                      S_OR(c1->cid.cid_name, "<unknown>"));
 	if (option_debug)
 		ast_log(LOG_DEBUG, "Bridge stops bridging channels %s and %s\n", c0->name, c1->name);
 
Index: asterisk-1.4.24/apps/app_queue.c
===================================================================
--- asterisk-1.4.24.orig/apps/app_queue.c	2009-05-27 12:17:59.000000000 +0200
+++ asterisk-1.4.24/apps/app_queue.c	2009-05-27 12:56:37.000000000 +0200
@@ -616,17 +616,19 @@
 				}
 
 				manager_event(EVENT_FLAG_AGENT, "QueueMemberStatus",
-					"Queue: %s\r\n"
-					"Location: %s\r\n"
-					"MemberName: %s\r\n"
-					"Membership: %s\r\n"
-					"Penalty: %d\r\n"
-					"CallsTaken: %d\r\n"
-					"LastCall: %d\r\n"
-					"Status: %d\r\n"
-					"Paused: %d\r\n",
-					q->name, cur->interface, cur->membername, cur->dynamic ? "dynamic" : cur->realtime ? "realtime" : "static",
-					cur->penalty, cur->calls, (int)cur->lastcall, cur->status, cur->paused);
+                                              "Queue: %s\r\n"
+                                              "Location: %s\r\n"
+                                              "MemberName: %s\r\n"
+                                              "Membership: %s\r\n"
+                                              "Penalty: %d\r\n"
+                                              "CallsTaken: %d\r\n"
+                                              "LastCall: %d\r\n"
+                                              "Status: %d\r\n"
+                                              "Paused: %d\r\n",
+                                              q->name, cur->interface, cur->membername,
+                                              cur->dynamic ? "dynamic" : cur->realtime ? "realtime" : "static",
+                                              cur->penalty, cur->calls, (int)cur->lastcall,
+                                              cur->status, cur->paused);
 			}
 			ao2_ref(cur, -1);
 		}
@@ -1468,11 +1470,18 @@
 		q->count++;
 		res = 0;
 		manager_event(EVENT_FLAG_CALL, "Join",
-			"Channel: %s\r\nCallerID: %s\r\nCallerIDName: %s\r\nQueue: %s\r\nPosition: %d\r\nCount: %d\r\nUniqueid: %s\r\n",
-			qe->chan->name,
-			S_OR(qe->chan->cid.cid_num, "unknown"), /* XXX somewhere else it is <unknown> */
-			S_OR(qe->chan->cid.cid_name, "unknown"),
-			q->name, qe->pos, q->count, qe->chan->uniqueid );
+                              "Channel: %s\r\n"
+                              "CallerID: %s\r\n"
+                              "CallerIDName: %s\r\n"
+                              "Queue: %s\r\n"
+                              "Position: %d\r\n"
+                              "Count: %d\r\n"
+                              "Uniqueid: %s\r\n",
+                              qe->chan->name,
+                              S_OR(qe->chan->cid.cid_num, "unknown"), /* XXX somewhere else it is <unknown> */
+                              S_OR(qe->chan->cid.cid_name, "unknown"),
+                              q->name,
+                              qe->pos, q->count, qe->chan->uniqueid );
 		if (option_debug)
 			ast_log(LOG_DEBUG, "Queue '%s' Join, Channel '%s', Position '%d'\n", q->name, qe->chan->name, qe->pos );
 	}
@@ -1657,7 +1666,7 @@
 }
 
 
-static void leave_queue(struct queue_ent *qe)
+static void leave_queue(struct queue_ent *qe, int reason)
 {
 	struct call_queue *q;
 	struct queue_ent *cur, *prev = NULL;
@@ -1674,8 +1683,16 @@
 
 			/* Take us out of the queue */
 			manager_event(EVENT_FLAG_CALL, "Leave",
-				"Channel: %s\r\nQueue: %s\r\nCount: %d\r\nUniqueid: %s\r\n",
-				qe->chan->name, q->name,  q->count, qe->chan->uniqueid);
+                                      "Channel: %s\r\n"
+                                      "Queue: %s\r\n"
+                                      "Count: %d\r\n"
+                                      "Reason: %d\r\n"
+                                      "Uniqueid: %s\r\n",
+                                      qe->chan->name,
+                                      q->name,
+                                      q->count,
+                                      reason,
+                                      qe->chan->uniqueid);
 			if (option_debug)
 				ast_log(LOG_DEBUG, "Queue '%s' Leave, Channel '%s'\n", q->name, qe->chan->name );
 			/* Take us out of the queue */
@@ -1912,21 +1929,26 @@
 	} else if (qe->parent->eventwhencalled) {
 		char vars[2048];
 
-		manager_event(EVENT_FLAG_AGENT, "AgentCalled",
-					"AgentCalled: %s\r\n"
-					"AgentName: %s\r\n"
-					"ChannelCalling: %s\r\n"
-					"CallerID: %s\r\n"
-					"CallerIDName: %s\r\n"
-					"Context: %s\r\n"
-					"Extension: %s\r\n"
-					"Priority: %d\r\n"
-					"%s",
-					tmp->interface, tmp->member->membername, qe->chan->name,
-					tmp->chan->cid.cid_num ? tmp->chan->cid.cid_num : "unknown",
-					tmp->chan->cid.cid_name ? tmp->chan->cid.cid_name : "unknown",
-					qe->chan->context, qe->chan->exten, qe->chan->priority,
-					qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");
+		ast_queue_log(qe->parent->name, qe->chan->uniqueid, tmp->member->membername, "AGENTCALLED", "%ld|", (long)time(NULL) - qe->start);
+                manager_event(EVENT_FLAG_AGENT, "AgentCalled",
+                              "AgentCalled: %s\r\n"
+                              "AgentName: %s\r\n"
+                              "ChannelCalling: %s\r\n"
+                              "CallerID: %s\r\n"
+                              "CallerIDName: %s\r\n"
+                              "Queue: %s\r\n"
+                              "Context: %s\r\n"
+                              "Extension: %s\r\n"
+                              "Priority: %d\r\n"
+                              "%s",
+                              tmp->interface, tmp->member->membername, qe->chan->name,
+                              tmp->chan->cid.cid_num ? tmp->chan->cid.cid_num : "unknown",
+                              tmp->chan->cid.cid_name ? tmp->chan->cid.cid_name : "unknown",
+                              qe->parent->name,
+                              qe->chan->context,
+                              qe->chan->exten,
+                              qe->chan->priority,
+                              qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");
 		if (option_verbose > 2)
 			ast_verbose(VERBOSE_PREFIX_3 "Called %s\n", tmp->interface);
 	}
@@ -2454,7 +2476,7 @@
 		if (qe->parent->leavewhenempty && (stat == QUEUE_NO_MEMBERS)) {
 			*reason = QUEUE_LEAVEEMPTY;
 			ast_queue_log(qe->parent->name, qe->chan->uniqueid, "NONE", "EXITEMPTY", "%d|%d|%ld", qe->pos, qe->opos, (long)time(NULL) - qe->start);
-			leave_queue(qe);
+			leave_queue(qe, *reason);
 			break;
 		}
 
@@ -2462,7 +2484,7 @@
 		if ((qe->parent->leavewhenempty == QUEUE_EMPTY_STRICT) && (stat == QUEUE_NO_REACHABLE_MEMBERS)) {
 			*reason = QUEUE_LEAVEUNAVAIL;
 			ast_queue_log(qe->parent->name, qe->chan->uniqueid, "NONE", "EXITEMPTY", "%d|%d|%ld", qe->pos, qe->opos, (long)time(NULL) - qe->start);
-			leave_queue(qe);
+			leave_queue(qe, *reason);
 			break;
 		}
 
@@ -3123,7 +3145,7 @@
 			}
 		}
 		/* Drop out of the queue at this point, to prepare for next caller */
-		leave_queue(qe);			
+		leave_queue(qe, -1);
 		if (!ast_strlen_zero(url) && ast_channel_supports_html(peer)) {
 			if (option_debug)
 				ast_log(LOG_DEBUG, "app_queue: sendurl=%s.\n", url);
@@ -3327,10 +3349,11 @@
 			}
 			q->membercount--;
 			manager_event(EVENT_FLAG_AGENT, "QueueMemberRemoved",
-				"Queue: %s\r\n"
-				"Location: %s\r\n"
-				"MemberName: %s\r\n",
-				q->name, mem->interface, mem->membername);
+                                      "Queue: %s\r\n"
+                                      "Location: %s\r\n"
+                                      "MemberName: %s\r\n",
+                                      q->name,
+                                      mem->interface, mem->membername);
 			ao2_unlink(q->members, mem);
 			ao2_ref(mem, -1);
 
@@ -3375,19 +3398,19 @@
 			ao2_link(q->members, new_member);
 			q->membercount++;
 			manager_event(EVENT_FLAG_AGENT, "QueueMemberAdded",
-				"Queue: %s\r\n"
-				"Location: %s\r\n"
-				"MemberName: %s\r\n"
-				"Membership: %s\r\n"
-				"Penalty: %d\r\n"
-				"CallsTaken: %d\r\n"
-				"LastCall: %d\r\n"
-				"Status: %d\r\n"
-				"Paused: %d\r\n",
-				q->name, new_member->interface, new_member->membername,
-				"dynamic",
-				new_member->penalty, new_member->calls, (int) new_member->lastcall,
-				new_member->status, new_member->paused);
+                                      "Queue: %s\r\n"
+                                      "Location: %s\r\n"
+                                      "MemberName: %s\r\n"
+                                      "Membership: %s\r\n"
+                                      "Penalty: %d\r\n"
+                                      "CallsTaken: %d\r\n"
+                                      "LastCall: %d\r\n"
+                                      "Status: %d\r\n"
+                                      "Paused: %d\r\n",
+                                      q->name, new_member->interface, new_member->membername,
+                                      "dynamic",
+                                      new_member->penalty, new_member->calls, (int) new_member->lastcall,
+                                      new_member->status, new_member->paused);
 			
 			ao2_ref(new_member, -1);
 			new_member = NULL;
@@ -3439,11 +3462,12 @@
 				ast_queue_log(q->name, "NONE", mem->membername, (paused ? "PAUSE" : "UNPAUSE"), "%s", "");
 
 				manager_event(EVENT_FLAG_AGENT, "QueueMemberPaused",
-					"Queue: %s\r\n"
-					"Location: %s\r\n"
-					"MemberName: %s\r\n"
-					"Paused: %d\r\n",
-						q->name, mem->interface, mem->membername, paused);
+                                              "Queue: %s\r\n"
+                                              "Location: %s\r\n"
+                                              "MemberName: %s\r\n"
+                                              "Paused: %d\r\n",
+                                              q->name,
+                                              mem->interface, mem->membername, paused);
 				ao2_ref(mem, -1);
 			}
 		}
@@ -4096,7 +4120,7 @@
 			}			
 			ast_stopstream(chan);
 		}
-		leave_queue(&qe);
+		leave_queue(&qe, reason);
 		if (reason != QUEUE_UNKNOWN)
 			set_queue_result(chan, reason);
 	} else {
@@ -4701,19 +4725,22 @@
 			while ((mem = ao2_iterator_next(&mem_iter))) {
 				if (ast_strlen_zero(memberfilter) || !strcmp(mem->interface, memberfilter)) {
 					astman_append(s, "Event: QueueMember\r\n"
-						"Queue: %s\r\n"
-						"Name: %s\r\n"
-						"Location: %s\r\n"
-						"Membership: %s\r\n"
-						"Penalty: %d\r\n"
-						"CallsTaken: %d\r\n"
-						"LastCall: %d\r\n"
-						"Status: %d\r\n"
-						"Paused: %d\r\n"
-						"%s"
-						"\r\n",
-						q->name, mem->membername, mem->interface, mem->dynamic ? "dynamic" : "static",
-						mem->penalty, mem->calls, (int)mem->lastcall, mem->status, mem->paused, idText);
+                                                      "Queue: %s\r\n"
+                                                      "Name: %s\r\n"
+                                                      "Location: %s\r\n"
+                                                      "Membership: %s\r\n"
+                                                      "Penalty: %d\r\n"
+                                                      "CallsTaken: %d\r\n"
+                                                      "LastCall: %d\r\n"
+                                                      "Status: %d\r\n"
+                                                      "Paused: %d\r\n"
+                                                      "%s"
+                                                      "\r\n",
+                                                      q->name,
+                                                      mem->membername, mem->interface,
+                                                      mem->dynamic ? "dynamic" : "static",
+                                                      mem->penalty, mem->calls,
+                                                      (int)mem->lastcall, mem->status, mem->paused, idText);
 				}
 				ao2_ref(mem, -1);
 			}
@@ -4721,18 +4748,21 @@
 			pos = 1;
 			for (qe = q->head; qe; qe = qe->next) {
 				astman_append(s, "Event: QueueEntry\r\n"
-					"Queue: %s\r\n"
-					"Position: %d\r\n"
-					"Channel: %s\r\n"
-					"CallerID: %s\r\n"
-					"CallerIDName: %s\r\n"
-					"Wait: %ld\r\n"
-					"%s"
-					"\r\n",
-					q->name, pos++, qe->chan->name,
-					S_OR(qe->chan->cid.cid_num, "unknown"),
-					S_OR(qe->chan->cid.cid_name, "unknown"),
-					(long) (now - qe->start), idText);
+                                              "Queue: %s\r\n"
+                                              "Position: %d\r\n"
+                                              "Channel: %s\r\n"
+                                              "Uniqueid: %s\r\n"
+                                              "CallerID: %s\r\n"
+                                              "CallerIDName: %s\r\n"
+                                              "Wait: %ld\r\n"
+                                              "%s"
+                                              "\r\n",
+                                              q->name, pos++,
+                                              qe->chan->name,
+                                              qe->chan->uniqueid,
+                                              S_OR(qe->chan->cid.cid_num, "unknown"),
+                                              S_OR(qe->chan->cid.cid_name, "unknown"),
+                                              (long) (now - qe->start), idText);
 			}
 		}
 		ast_mutex_unlock(&q->lock);
Index: asterisk-1.4.24/res/res_agi.c
===================================================================
--- asterisk-1.4.24.orig/res/res_agi.c	2009-05-27 12:17:59.000000000 +0200
+++ asterisk-1.4.24/res/res_agi.c	2009-05-27 12:18:03.000000000 +0200
@@ -414,6 +414,7 @@
 	/* ANI/DNIS */
 	fdprintf(fd, "agi_callerid: %s\n", S_OR(chan->cid.cid_num, "unknown"));
 	fdprintf(fd, "agi_calleridname: %s\n", S_OR(chan->cid.cid_name, "unknown"));
+	fdprintf(fd, "agi_calleridani: %s\n", S_OR(chan->cid.cid_ani, "unknown"));
 	fdprintf(fd, "agi_callingpres: %d\n", chan->cid.cid_pres);
 	fdprintf(fd, "agi_callingani2: %d\n", chan->cid.cid_ani2);
 	fdprintf(fd, "agi_callington: %d\n", chan->cid.cid_ton);
