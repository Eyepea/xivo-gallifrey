Index: asterisk-1.4.39.1/apps/app_meetme.c
===================================================================
--- asterisk-1.4.39.1.orig/apps/app_meetme.c	2011-01-21 17:09:23.000000000 +0100
+++ asterisk-1.4.39.1/apps/app_meetme.c	2011-01-21 17:17:47.000000000 +0100
@@ -81,9 +81,13 @@
 #define DEFAULT_AUDIO_BUFFERS  32
 
 enum {
-	ADMINFLAG_MUTED =     (1 << 1), /*!< User is muted */
-	ADMINFLAG_SELFMUTED = (1 << 2), /*!< User muted self */
-	ADMINFLAG_KICKME =    (1 << 3)  /*!< User has been kicked */
+	ADMINFLAG_MUTED =           (1 << 1), /*!< User is muted */
+	ADMINFLAG_SELFMUTED =       (1 << 2), /*!< User muted self */
+	ADMINFLAG_KICKME =          (1 << 3), /*!< User has been kicked */
+	ADMINFLAG_NOAUTHED =        (1 << 4), /*!< User is currently waiting for acceptance */
+	ADMINFLAG_AUTH_REQUESTING = (1 << 5), /*!< User is in a auth requesting process by an admin */
+	ADMINFLAG_SILENCED_KICK   = (1 << 6), /*!< Silenced kicked */
+	ADMINFLAG_TALK_TO_ADMIN   = (1 << 7), /*!< User talks to admin */
 };
 
 #define MEETME_DELAYDETECTTALK     300
@@ -167,11 +171,18 @@
 	CONFFLAG_SLA_TRUNK = (1 << 27),
 	/*! Do not write any audio to this channel until the state is up. */
 	CONFFLAG_NO_AUDIO_UNTIL_UP = (1 << 28),
+	/*! Administrator moderates users who join. */
+	CONFFLAG_MODERATION = (1 << 29),
+	/*! No anonymous calls. */
+	CONFFLAG_NOANONYMOUS = (1 << 30),
+	/*! Timeout. */
+	CONFFLAG_TIMEOUT = (1 << 31),
 };
 
 enum {
 	OPT_ARG_WAITMARKED = 0,
-	OPT_ARG_ARRAY_SIZE = 1,
+	OPT_ARG_TIMEOUT = 1,
+	OPT_ARG_ARRAY_SIZE = 2,
 };
 
 AST_APP_OPTIONS(meetme_opts, BEGIN_OPTIONS
@@ -184,8 +195,11 @@
 	AST_APP_OPTION('E', CONFFLAG_EMPTYNOPIN ),
 	AST_APP_OPTION('e', CONFFLAG_EMPTY ),
 	AST_APP_OPTION('F', CONFFLAG_PASS_DTMF ),
+	AST_APP_OPTION('h', CONFFLAG_NOANONYMOUS ),
 	AST_APP_OPTION('i', CONFFLAG_INTROUSER ),
 	AST_APP_OPTION('I', CONFFLAG_INTROUSERNOREVIEW ),
+	AST_APP_OPTION('k', CONFFLAG_MODERATION ),
+	AST_APP_OPTION_ARG('L', CONFFLAG_TIMEOUT, OPT_ARG_TIMEOUT ),
 	AST_APP_OPTION('M', CONFFLAG_MOH ),
 	AST_APP_OPTION('m', CONFFLAG_STARTMUTED ),
 	AST_APP_OPTION('o', CONFFLAG_OPTIMIZETALKER ),
@@ -235,9 +249,15 @@
 "      'e' -- select an empty conference\n"
 "      'E' -- select an empty pinless conference\n"
 "      'F' -- Pass DTMF through the conference.\n"
+"      'h' -- disallow anonymous calls.\n"
 "      'i' -- announce user join/leave with review\n"
 "      'I' -- announce user join/leave without review\n"
+"      'k' -- moderation mode - all invited users wait admin to join\n"
+"             conference. He can accept or kick or talk to each invited.\n"
+"             It automatically set the 'I' flag.\n"
 "      'l' -- set listen only mode (Listen only, no talking)\n"
+"      'L(<secs>[^<minusers>[^<timeoutannounce>]])'\n"
+"          -- set a timeout on conference.\n"
 "      'm' -- set initially muted\n"
 "      'M' -- enable music on hold when the conference has a single caller\n"
 "      'o' -- set talker optimization - treats talkers who aren't speaking as\n"
@@ -347,11 +367,15 @@
 	int zapconf;                            /*!< Zaptel Conf # */
 	int users;                              /*!< Number of active users */
 	int markedusers;                        /*!< Number of marked users */
+	int noauthorized;                       /*!< Number of no yet authorized users */
+	int kicked;                             /*!< Number of kicked users who don't leave conf yet */
 	time_t start;                           /*!< Start time (s) */
+	time_t begin;                           /*!< Conference begin (s) */
 	int refcount;                           /*!< reference count of usage */
 	enum recording_state recording:2;       /*!< recording status */
 	unsigned int isdynamic:1;               /*!< Created on the fly? */
 	unsigned int locked:1;                  /*!< Is the conference locked? */
+	unsigned int paused;                    /*!< Is the conference paused? */
 	pthread_t recordthread;                 /*!< thread for recording */
 	ast_mutex_t recordthreadlock;           /*!< control threads trying to start recordthread */
 	pthread_attr_t attr;                    /*!< thread attribute */
@@ -600,6 +624,11 @@
 		return "(not talking)";
 }
 
+static inline int count_real_users(struct ast_conference *conf)
+{
+	return conf->users - conf->noauthorized - conf->kicked;
+}
+
 static int careful_write(int fd, unsigned char *data, int len, int block)
 {
 	int res;
@@ -914,9 +943,9 @@
 			min = ((now - cnf->start) % 3600) / 60;
 			sec = (now - cnf->start) % 60;
 
-			ast_cli(fd, data_format, cnf->confno, cnf->users, cmdline, hr, min, sec, cnf->isdynamic ? "Dynamic" : "Static");
+			ast_cli(fd, data_format, cnf->confno, count_real_users(cnf), cmdline, hr, min, sec, cnf->isdynamic ? "Dynamic" : "Static");
 
-			total += cnf->users; 	
+			total += count_real_users(cnf);
 		}
 		AST_LIST_UNLOCK(&confs);
 		ast_cli(fd, "* Total number of MeetMe users: %d\n", total);
@@ -993,7 +1022,7 @@
 			min = ((now - user->jointime) % 3600) / 60;
 			sec = (now - user->jointime) % 60;
 			if (!concise) {
-				ast_cli(fd, "User #: %-2.2d %12.12s %-20.20s Channel: %s %s %s %s %s %02d:%02d:%02d\n",
+				ast_cli(fd, "User #: %-2.2d %12.12s %-20.20s Channel: %s %s %s %s %s %s %02d:%02d:%02d\n",
 					user->user_no,
 					S_OR(user->chan->cid.cid_num, "<unknown>"),
 					S_OR(user->chan->cid.cid_name, "<no name>"),
@@ -1001,9 +1030,10 @@
 					user->userflags & CONFFLAG_ADMIN ? "(Admin)" : "",
 					user->userflags & CONFFLAG_MONITOR ? "(Listen only)" : "",
 					user->adminflags & ADMINFLAG_MUTED ? "(Admin Muted)" : user->adminflags & ADMINFLAG_SELFMUTED ? "(Muted)" : "",
+					user->adminflags & ADMINFLAG_NOAUTHED ? "(Noauthed)" : "",
 					istalking(user->talking), hr, min, sec); 
 			} else {
-				ast_cli(fd, "%d!%s!%s!%s!%s!%s!%s!%d!%02d:%02d:%02d\n",
+				ast_cli(fd, "%d!%s!%s!%s!%s!%s!%s!%s!%d!%02d:%02d:%02d\n",
 					user->user_no,
 					S_OR(user->chan->cid.cid_num, ""),
 					S_OR(user->chan->cid.cid_name, ""),
@@ -1011,6 +1041,7 @@
 					user->userflags  & CONFFLAG_ADMIN   ? "1" : "",
 					user->userflags  & CONFFLAG_MONITOR ? "1" : "",
 					user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)  ? "1" : "",
+					user->adminflags & ADMINFLAG_NOAUTHED ? "1" : "",
 					user->talking, hr, min, sec);
 			}
 			ao2_ref(user, -1);
@@ -1566,6 +1597,201 @@
 	}
 }
 
+static void meetme_pause(struct ast_conference *conf, int b)
+{
+	if ((b && conf->paused == 0) ||
+	   (!b && conf->paused == 1)) {
+		manager_event(EVENT_FLAG_CALL, "MeetmePause",
+					"Meetme: %s\r\n"
+					"Status: %s\r\n",
+					conf->confno, b ? "on" : "off");
+	}
+
+	if (b)
+		conf->paused++;
+	else if (conf->paused > 0)
+		conf->paused--;
+
+	if (!conf->paused)
+	{
+		/* Be sure there isn't admin talks anymore. */
+		struct ast_conf_user *user;
+		struct ao2_iterator user_iter = ao2_iterator_init(conf->usercontainer, 0);
+		while ((user = ao2_iterator_next(&user_iter)))
+			user->adminflags &= ~ADMINFLAG_TALK_TO_ADMIN;
+	}
+}
+
+static void meetme_mod_silence_kick(struct ast_conference *conf, struct ast_conf_user* admin,
+                                    struct ast_conf_user* usr)
+{
+	usr->adminflags &= ~(ADMINFLAG_AUTH_REQUESTING|ADMINFLAG_TALK_TO_ADMIN);
+	usr->adminflags |= ADMINFLAG_SILENCED_KICK;
+	conf->noauthorized--;
+	conf->kicked++;
+	if (admin->adminflags & ADMINFLAG_TALK_TO_ADMIN && conf->noauthorized == 0)
+		meetme_pause(conf, 0);
+	admin->adminflags &= ~ADMINFLAG_TALK_TO_ADMIN;
+}
+
+static void meetme_mod_authorize(struct ast_conference *conf, struct ast_conf_user* admin,
+                                 struct ast_conf_user* usr)
+{
+	usr->adminflags &= ~(ADMINFLAG_NOAUTHED|ADMINFLAG_AUTH_REQUESTING|ADMINFLAG_TALK_TO_ADMIN);
+	manager_event(EVENT_FLAG_CALL, "MeetmeNoAuthed",
+			"Channel: %s\r\n"
+			"Uniqueid: %s\r\n"
+			"Meetme: %s\r\n"
+			"Usernum: %d\r\n"
+			"Status: off\r\n",
+			usr->chan->name, usr->chan->uniqueid, conf->confno, usr->user_no);
+	conf->noauthorized--;
+	if (admin->adminflags & ADMINFLAG_TALK_TO_ADMIN && conf->noauthorized == 0)
+		meetme_pause(conf, 0);
+	admin->adminflags &= ~ADMINFLAG_TALK_TO_ADMIN;
+}
+
+static void meetme_mod_talk(struct ast_conference *conf, struct ast_conf_user* admin,
+                            struct ast_conf_user* usr)
+{
+	if (!(admin->adminflags & ADMINFLAG_TALK_TO_ADMIN)) {
+		admin->adminflags |= ADMINFLAG_TALK_TO_ADMIN;
+		usr->adminflags |= ADMINFLAG_TALK_TO_ADMIN;
+		if (!conf->paused)
+			meetme_pause(conf, 1);
+	}
+}
+
+/* The moderation menu.
+ *
+ * @return  if the menu is still active.
+ */
+static int meetme_moderation_menu(struct ast_channel *chan, struct ast_conference *conf,
+                                  struct ast_conf_user* admin, int dtmf, int* auth_requesting)
+{
+	struct ast_conf_user* usr;
+	int menu_active = 1;
+
+	usr = ao2_find(conf->usercontainer, auth_requesting, 0);
+
+	if (!usr || !(usr->adminflags & ADMINFLAG_AUTH_REQUESTING)) {
+		ast_log(LOG_WARNING, "The moderated user left.\n");
+		*auth_requesting = menu_active = 0;
+		if (admin->adminflags & ADMINFLAG_TALK_TO_ADMIN)
+			meetme_pause(conf, 0);
+		admin->adminflags &= ~ADMINFLAG_TALK_TO_ADMIN;
+	} else if (dtmf) {
+		switch(dtmf) {
+		case '1': /* Silenced kick */
+			meetme_mod_silence_kick(conf, admin, usr);
+			*auth_requesting = menu_active = 0;
+			break;
+		case '2': /* Authorized */
+			meetme_mod_authorize(conf, admin, usr);
+			*auth_requesting = menu_active = 0;
+			break;
+		case '3': /* Talk to user. */
+			meetme_mod_talk(conf, admin, usr);
+			break;
+		default:
+			if (!ast_streamfile(chan, "conf-errormenu", chan->language))
+				ast_waitstream(chan, "");
+			break;
+		}
+	}
+	return menu_active;
+}
+
+static int conf_announce(struct ast_channel *chan, struct ast_conference *conf, struct ast_conf_user *user)
+{
+	int keepplaying = 1;
+	int count = 0;
+	int res = 0;
+	const char* message = "conf-otherinparty";
+
+	if ((user->userflags & CONFFLAG_QUIET) ||
+	    !(user->userflags & CONFFLAG_ANNOUNCEUSERCOUNT) ||
+	    (user->adminflags & ADMINFLAG_NOAUTHED)) {
+		return 0;
+	}
+
+	if (conf->noauthorized > 0 && (user->userflags & CONFFLAG_ADMIN)) {
+		count = conf->noauthorized;
+		message = "conf-moderation-noauthed";
+	} else {
+		count = count_real_users(conf) - 1;
+	}
+
+	if (count < 1)
+		return 0;
+
+	if (count == 1 && (conf->noauthorized == 0 || !(user->userflags & CONFFLAG_ADMIN))) {
+		if (!ast_streamfile(chan,"conf-onlyone",chan->language)) {
+			res = ast_waitstream(chan, AST_DIGIT_ANY);
+			ast_stopstream(chan);
+			if (res > 0)
+				keepplaying=0;
+			else if (res == -1)
+				return -1;
+		}
+	} else {
+		if (!ast_streamfile(chan, "conf-thereare", chan->language)) {
+			res = ast_waitstream(chan, AST_DIGIT_ANY);
+			ast_stopstream(chan);
+			if (res > 0)
+				keepplaying=0;
+			else if (res == -1)
+				return -1;
+		}
+		if (keepplaying) {
+			res = ast_say_number(chan, count, AST_DIGIT_ANY, chan->language, (char *) NULL);
+			if (res > 0)
+				keepplaying=0;
+			else if (res == -1)
+				return -1;
+		}
+		if (keepplaying && !ast_streamfile(chan, message, chan->language)) {
+			res = ast_waitstream(chan, AST_DIGIT_ANY);
+			ast_stopstream(chan);
+			if (res > 0)
+				keepplaying=0;
+			else if (res == -1)
+				return -1;
+		}
+	}
+
+	return res;
+}
+
+static int conf_announce_user_join(struct ast_channel *chan, struct ast_conference *conf, struct ast_conf_user *user)
+{
+	if (!(user->userflags & CONFFLAG_QUIET) &&
+	    ((user->userflags & CONFFLAG_INTROUSER) || (user->userflags & CONFFLAG_INTROUSERNOREVIEW)) &&
+	    count_real_users(conf) > 1 &&
+	    !(user->adminflags & ADMINFLAG_NOAUTHED)) {
+		struct announce_listitem *item;
+		if (!(item = ao2_alloc(sizeof(*item), NULL)))
+			return -1;
+		ast_copy_string(item->namerecloc, user->namerecloc, sizeof(item->namerecloc));
+		ast_copy_string(item->language, chan->language, sizeof(item->language));
+		item->confchan = conf->chan;
+		item->confusers = count_real_users(conf);
+		item->announcetype = CONF_HASJOIN;
+		ast_mutex_lock(&conf->announcelistlock);
+		ao2_ref(item, +1); /* add one more so we can determine when announce_thread is done playing it */
+		AST_LIST_INSERT_TAIL(&conf->announcelist, item, entry);
+		ast_cond_signal(&conf->announcelist_addition);
+		ast_mutex_unlock(&conf->announcelistlock);
+
+		while (!ast_check_hangup(conf->chan) && ao2_ref(item, 0) == 2 && !ast_safe_sleep(chan, 1000)) {
+			;
+		}
+		ao2_ref(item, -1);
+	}
+
+	return 0;
+}
+
 static int conf_run(struct ast_channel *chan, struct ast_conference *conf, int confflags, char *optargs[])
 {
 	struct ast_conf_user *user = NULL;
@@ -1585,9 +1811,14 @@
 	int firstpass = 0;
 	int lastmarked = 0;
 	int currentmarked = 0;
+	int lastnoauth = 0;
+	int currentnoauth = 0;
+	int ispaused = 0;
+	int waspaused = 0;
 	int ret = -1;
 	int x;
 	int menu_active = 0;
+	int auth_requesting = 0; /* 0 if no request, or user_no of moderated user. */
 	int using_pseudo = 0;
 	int duration=20;
 	int hr, min, sec;
@@ -1602,6 +1833,7 @@
 	char recordingtmp[AST_MAX_EXTENSION] = "";
 	char members[10] = "";
 	int dtmf, opt_waitmarked_timeout = 0;
+	int opt_timeout = 0, opt_timeout_warning = 0, opt_timeout_minusers = 1;
 	time_t timeout = 0;
 	struct dahdi_bufferinfo bi;
 	char __buf[CONF_SIZE + AST_FRIENDLY_OFFSET];
@@ -1613,6 +1845,13 @@
 		return ret;
 	}
 
+	/* Set flags dependences when moderation is set. */
+	if (confflags & CONFFLAG_MODERATION) {
+		if (!(confflags & (CONFFLAG_INTROUSER|CONFFLAG_INTROUSERNOREVIEW)))
+			confflags |= CONFFLAG_INTROUSERNOREVIEW;
+		confflags |= CONFFLAG_STARMENU;
+	}
+
 	/* Possible timeout waiting for marked user */
 	if ((confflags & CONFFLAG_WAITMARKED) &&
 		!ast_strlen_zero(optargs[OPT_ARG_WAITMARKED]) &&
@@ -1621,6 +1860,22 @@
 		timeout = time(NULL) + opt_waitmarked_timeout;
 	}
 
+	if ((confflags & CONFFLAG_TIMEOUT) &&
+		!ast_strlen_zero(optargs[OPT_ARG_TIMEOUT])) {
+		char *endptr = optargs[OPT_ARG_TIMEOUT];
+		opt_timeout = strtoul(endptr, &endptr, 10);
+		if (*endptr != '\0') {
+			endptr++; /* skip the separator. */
+			opt_timeout_minusers = strtoul(endptr, &endptr, 10);
+			if (*endptr != '\0') {
+				endptr++; /* skip the separator. */
+				opt_timeout_warning = strtoul(endptr, &endptr, 10);
+				if (opt_timeout_warning > opt_timeout)
+					opt_timeout_warning = 0;
+			}
+		}
+	}
+
 	if (confflags & CONFFLAG_RECORDCONF) {
 		if (!conf->recordingfilename) {
 			conf->recordingfilename = pbx_builtin_getvar_helper(chan, "MEETME_RECORDINGFILE");
@@ -1710,10 +1965,38 @@
 			goto outrun;
 	}
 
+	/* Disallow users who call with a hidden number to join this conference. */
+	if ((confflags & CONFFLAG_NOANONYMOUS) && ast_strlen_zero(user->chan->cid.cid_num)) {
+		if (!ast_streamfile(chan, "conf-nohidden", chan->language))
+			ast_waitstream(chan, "");
+		goto outrun;
+	}
+
 	ast_mutex_lock(&conf->playlock);
 
-	if (confflags & CONFFLAG_MARKEDUSER)
+	if (confflags & CONFFLAG_ADMIN) {
+		if (conf->paused)
+		{
+			/* Check if there isn't any talk before disable pause. */
+			struct ao2_iterator user_iter = ao2_iterator_init(conf->usercontainer, 0);
+			while ((usr = ao2_iterator_next(&user_iter))) {
+				if (usr->adminflags & ADMINFLAG_TALK_TO_ADMIN)
+					break;
+			}
+			if (!usr)
+				meetme_pause(conf, 0);
+		}
+
+		/* Directly request admin about waiting users. */
+		if(conf->noauthorized > 0)
+			user->adminflags |= ADMINFLAG_AUTH_REQUESTING;
+	} else if (confflags & CONFFLAG_MODERATION) {
+		user->adminflags |= ADMINFLAG_NOAUTHED;
+		conf->noauthorized++;
+	}
+	if (confflags & CONFFLAG_MARKEDUSER) {
 		conf->markedusers++;
+	}
 	conf->users++;
 	/* Update table */
 	snprintf(members, sizeof(members), "%d", conf->users);
@@ -1735,53 +2018,18 @@
 			ast_copy_string(exitcontext, chan->context, sizeof(exitcontext));
 	}
 
-	if ( !(confflags & (CONFFLAG_QUIET | CONFFLAG_NOONLYPERSON)) ) {
-		if (conf->users == 1 && !(confflags & CONFFLAG_WAITMARKED))
+	if ( !(confflags & CONFFLAG_QUIET) ) {
+		if ((confflags & CONFFLAG_NOONLYPERSON) && count_real_users(conf) == 1 && !(confflags & CONFFLAG_WAITMARKED) && !(user->adminflags & ADMINFLAG_NOAUTHED))
 			if (!ast_streamfile(chan, "conf-onlyperson", chan->language))
 				ast_waitstream(chan, "");
-		if ((confflags & CONFFLAG_WAITMARKED) && conf->markedusers == 0)
+		if (((confflags & CONFFLAG_WAITMARKED) && conf->markedusers == 0 && !(confflags & CONFFLAG_MARKEDUSER)) ||
+		    (user->adminflags & ADMINFLAG_NOAUTHED))
 			if (!ast_streamfile(chan, "conf-waitforleader", chan->language))
 				ast_waitstream(chan, "");
 	}
 
-	if (!(confflags & CONFFLAG_QUIET) && (confflags & CONFFLAG_ANNOUNCEUSERCOUNT) && conf->users > 1) {
-		int keepplaying = 1;
-
-		if (conf->users == 2) { 
-			if (!ast_streamfile(chan,"conf-onlyone",chan->language)) {
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-				ast_stopstream(chan);
-				if (res > 0)
-					keepplaying=0;
-				else if (res == -1)
-					goto outrun;
-			}
-		} else { 
-			if (!ast_streamfile(chan, "conf-thereare", chan->language)) {
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-				ast_stopstream(chan);
-				if (res > 0)
-					keepplaying=0;
-				else if (res == -1)
-					goto outrun;
-			}
-			if (keepplaying) {
-				res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, chan->language, (char *) NULL);
-				if (res > 0)
-					keepplaying=0;
-				else if (res == -1)
-					goto outrun;
-			}
-			if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", chan->language)) {
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-				ast_stopstream(chan);
-				if (res > 0)
-					keepplaying=0;
-				else if (res == -1) 
-					goto outrun;
-			}
-		}
-	}
+	if (conf_announce(chan, conf, user) < 0)
+		goto outrun;
 
 	if (!(confflags & CONFFLAG_NO_AUDIO_UNTIL_UP)) {
 		/* We're leaving this alone until the state gets changed to up */
@@ -1856,28 +2104,10 @@
 	ztc.chan = 0;	
 	ztc.confno = conf->zapconf;
 
-	if (!(confflags & CONFFLAG_QUIET) && ((confflags & CONFFLAG_INTROUSER) || (confflags & CONFFLAG_INTROUSERNOREVIEW)) && conf->users > 1) {
-		struct announce_listitem *item;
-		if (!(item = ao2_alloc(sizeof(*item), NULL)))
-			return -1;
-		ast_copy_string(item->namerecloc, user->namerecloc, sizeof(item->namerecloc));
-		ast_copy_string(item->language, chan->language, sizeof(item->language));
-		item->confchan = conf->chan;
-		item->confusers = conf->users;
-		item->announcetype = CONF_HASJOIN;
-		ast_mutex_lock(&conf->announcelistlock);
-		ao2_ref(item, +1); /* add one more so we can determine when announce_thread is done playing it */
-		AST_LIST_INSERT_TAIL(&conf->announcelist, item, entry);
-		ast_cond_signal(&conf->announcelist_addition);
-		ast_mutex_unlock(&conf->announcelistlock);
-
-		while (!ast_check_hangup(conf->chan) && ao2_ref(item, 0) == 2 && !ast_safe_sleep(chan, 1000)) {
-			;
-		}
-		ao2_ref(item, -1);
-	}
+	if(conf_announce_user_join(chan, conf, user) < 0)
+		return -1;
 
-	if (confflags & CONFFLAG_WAITMARKED && !conf->markedusers)
+	if ((confflags & CONFFLAG_WAITMARKED && !conf->markedusers) || (user->adminflags & ADMINFLAG_NOAUTHED))
 		ztc.confmode = DAHDI_CONF_CONF;
 	else if (confflags & CONFFLAG_MONITOR)
 		ztc.confmode = DAHDI_CONF_CONFMON | DAHDI_CONF_LISTENER;
@@ -1897,29 +2127,32 @@
 
 	if (!sent_event) {
 		manager_event(EVENT_FLAG_CALL, "MeetmeJoin", 
-                              "Channel: %s\r\n"
-                              "Uniqueid: %s\r\n"
-                              "Meetme: %s\r\n"
-                              "PseudoChan: %s\r\n"
-                              "Admin: %s\r\n"
-                              "Usernum: %d\r\n"
-                              "CallerIDnum: %s\r\n"
-                              "CallerIDname: %s\r\n",
-                              chan->name,
-                              chan->uniqueid,
-                              conf->confno,
-                              (conf->chan ? conf->chan->name : "<unknown>"),
-                              user->userflags & CONFFLAG_ADMIN ? "Yes" : "No",
-                              user->user_no,
-                              S_OR(user->chan->cid.cid_num, "<unknown>"),
-                              S_OR(user->chan->cid.cid_name, "<unknown>"));
+		              "Channel: %s\r\n"
+		              "Uniqueid: %s\r\n"
+		              "Meetme: %s\r\n"
+		              "PseudoChan: %s\r\n"
+		              "Admin: %s\r\n"
+		              "NoAuthed: %s\r\n"
+		              "Usernum: %d\r\n"
+		              "CallerIDnum: %s\r\n"
+		              "CallerIDname: %s\r\n",
+		              chan->name,
+		              chan->uniqueid,
+		              conf->confno,
+		              (conf->chan ? conf->chan->name : "<unknown>"),
+		              user->userflags & CONFFLAG_ADMIN ? "Yes" : "No",
+		              user->adminflags & ADMINFLAG_NOAUTHED ? "Yes" : "No",
+		              user->user_no,
+		              S_OR(user->chan->cid.cid_num, "<unknown>"),
+		              S_OR(user->chan->cid.cid_name, "<unknown>"));
 		sent_event = 1;
 	}
 
 	if (!firstpass && !(confflags & CONFFLAG_MONITOR) && !(confflags & CONFFLAG_ADMIN)) {
 		firstpass = 1;
 		if (!(confflags & CONFFLAG_QUIET))
-			if (!(confflags & CONFFLAG_WAITMARKED) || ((confflags & CONFFLAG_MARKEDUSER) && (conf->markedusers >= 1)))
+			if (!(user->adminflags & ADMINFLAG_NOAUTHED) &&
+			    (!(confflags & CONFFLAG_WAITMARKED) || ((confflags & CONFFLAG_MARKEDUSER) && (conf->markedusers >= 1))))
 				conf_play(chan, conf, ENTER);
 	}
 
@@ -1968,6 +2201,7 @@
 		}	
 		for(;;) {
 			int menu_was_active = 0;
+			int auth_requested = 0;
 
 			outfd = -1;
 			ms = -1;
@@ -1975,6 +2209,32 @@
 			if (timeout && time(NULL) >= timeout)
 				break;
 
+			/* Conference room has a timeout. */
+			if (opt_timeout && conf->begin) {
+				now = time(NULL);
+				if (opt_timeout_warning && (now + opt_timeout_warning) >= (conf->begin + opt_timeout)) {
+					if (!ast_streamfile(chan, "conf-warn-timeout", chan->language)) {
+						const char *message = "minutes";
+						if (opt_timeout_warning >= 60)
+							opt_timeout_warning /= 60;
+						else
+							message = "seconds";
+
+						ast_waitstream(chan, "");
+						ast_say_number(chan, opt_timeout_warning, "", chan->language, (char *) NULL);
+						if(!ast_streamfile(chan, message, chan->language))
+							ast_waitstream(chan, "");
+					}
+
+					opt_timeout_warning = 0;
+				}
+				if (now >= (conf->begin + opt_timeout)) {
+					if (!ast_streamfile(chan, "conf-timeouted", chan->language))
+						ast_waitstream(chan, "");
+					break;
+				}
+			}
+
 			/* if we have just exited from the menu, and the user had a channel-driver
 			   volume adjustment, restore it
 			*/
@@ -1982,15 +2242,19 @@
 				set_talk_volume(user, user->listen.desired);
 
 			menu_was_active = menu_active;
+			auth_requested = auth_requesting;
 
 			currentmarked = conf->markedusers;
+			currentnoauth = conf->noauthorized;
+			ispaused = conf->paused;
+
 			if (!(confflags & CONFFLAG_QUIET) &&
 			    (confflags & CONFFLAG_MARKEDUSER) &&
 			    (confflags & CONFFLAG_WAITMARKED) &&
 			    lastmarked == 0) {
-				if (currentmarked == 1 && conf->users > 1) {
-					ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, chan->language, (char *) NULL);
-					if (conf->users - 1 == 1) {
+				if (currentmarked == 1 && count_real_users(conf) > 1) {
+					ast_say_number(chan, count_real_users(conf) - 1, AST_DIGIT_ANY, chan->language, (char *) NULL);
+					if (count_real_users(conf) - 1 == 1) {
 						if (!ast_streamfile(chan, "conf-userwilljoin", chan->language))
 							ast_waitstream(chan, "");
 					} else {
@@ -1998,7 +2262,8 @@
 							ast_waitstream(chan, "");
 					}
 				}
-				if (conf->users == 1 && ! (confflags & CONFFLAG_MARKEDUSER))
+				/* How does this happen, as we check above that user is marked... */
+				if (count_real_users(conf) == 1 && ! (confflags & CONFFLAG_MARKEDUSER))
 					if (!ast_streamfile(chan, "conf-onlyperson", chan->language))
 						ast_waitstream(chan, "");
 			}
@@ -2006,13 +2271,43 @@
 			/* Update the struct with the actual confflags */
 			user->userflags = confflags;
 
-			if (confflags & CONFFLAG_WAITMARKED) {
-				if(currentmarked == 0) {
-					if (lastmarked != 0) {
-						if (!(confflags & CONFFLAG_QUIET))
+			/* Allow me or not to talk with admin. */
+			if ((user->adminflags & ADMINFLAG_TALK_TO_ADMIN) && !(ztc.confmode & DAHDI_CONF_TALKER)) {
+				if (musiconhold && (confflags & CONFFLAG_MOH)) {
+					ast_moh_stop(chan);
+					musiconhold = 0;
+				}
+				ztc.confmode = DAHDI_CONF_CONF | DAHDI_CONF_TALKER | DAHDI_CONF_LISTENER;
+				if (ioctl(fd, DAHDI_SETCONF, &ztc)) {
+					ast_log(LOG_WARNING, "Error setting conference\n");
+					close(fd);
+					goto outrun;
+				}
+			} else if (!(user->adminflags & ADMINFLAG_TALK_TO_ADMIN) &&
+			           (ztc.confmode & DAHDI_CONF_TALKER) &&
+			           (user->adminflags & ADMINFLAG_NOAUTHED)) {
+				ztc.confmode = DAHDI_CONF_CONF;
+				if (ioctl(fd, DAHDI_SETCONF, &ztc)) {
+					ast_log(LOG_WARNING, "Error setting conference\n");
+					close(fd);
+					goto outrun;
+				}
+				if (musiconhold == 0 && (confflags & CONFFLAG_MOH)) {
+					ast_moh_start(chan, NULL, NULL);
+					musiconhold = 1;
+				}
+			}
+
+			if ((confflags & CONFFLAG_WAITMARKED) || (confflags & CONFFLAG_MODERATION)) {
+				if((confflags & CONFFLAG_WAITMARKED && currentmarked == 0) || (user->adminflags & ADMINFLAG_NOAUTHED) || ispaused) {
+					/* Marked users left, or a new no authorized user joined. */
+					if (((currentmarked == 0 && lastmarked != 0) ||
+					     (ispaused && !waspaused)) &&
+					    !(user->adminflags & ADMINFLAG_NOAUTHED)) {
+						if (!(confflags & CONFFLAG_QUIET) && !(confflags & CONFFLAG_MARKEDUSER))
 							if (!ast_streamfile(chan, "conf-leaderhasleft", chan->language))
 								ast_waitstream(chan, "");
-						if(confflags & CONFFLAG_MARKEDEXIT)
+						if(confflags & CONFFLAG_MARKEDEXIT && !ispaused)
 							break;
 						else {
 							ztc.confmode = DAHDI_CONF_CONF;
@@ -2023,11 +2318,17 @@
 							}
 						}
 					}
-					if (musiconhold == 0 && (confflags & CONFFLAG_MOH)) {
+					if (musiconhold == 0 && (confflags & CONFFLAG_MOH) && !(user->adminflags & ADMINFLAG_TALK_TO_ADMIN)) {
 						ast_moh_start(chan, NULL, NULL);
 						musiconhold = 1;
 					}
-				} else if(currentmarked >= 1 && lastmarked == 0) {
+				} else if ((!(confflags & CONFFLAG_WAITMARKED) || currentmarked >= 1) &&
+					   !ispaused &&
+					   !(user->adminflags & (ADMINFLAG_SILENCED_KICK|ADMINFLAG_NOAUTHED)) &&
+					   ztc.confmode == DAHDI_CONF_CONF &&
+					   (((confflags & CONFFLAG_WAITMARKED) && lastmarked == 0) ||
+					    currentnoauth < lastnoauth ||
+					    waspaused)) {
 					/* Marked user entered, so cancel timeout */
 					timeout = 0;
 					if (confflags & CONFFLAG_MONITOR)
@@ -2049,13 +2350,76 @@
 						if (!ast_streamfile(chan, "conf-placeintoconf", chan->language))
 							ast_waitstream(chan, "");
 						conf_play(chan, conf, ENTER);
+						conf_announce(chan, conf, user);
+						conf_announce_user_join(chan, conf, user);
 					}
 				}
 			}
 
+			/* Conference begins when there aren't any no authorized people. */
+			if (!conf->begin &&
+			    !currentnoauth &&
+			    (!(confflags & CONFFLAG_WAITMARKED) || currentmarked > 0) &&
+			    conf->users >= opt_timeout_minusers) {
+				conf->begin = time(NULL);
+			}
+
+			if ((confflags & CONFFLAG_ADMIN) && currentnoauth > 0 && (!auth_requesting || lastnoauth != currentnoauth)) {
+				/* There are new unauthorized people.
+				 *
+				 * Find a no authorized user who is not yet in
+				 * an * auth request process. Then ask admin to
+				 * kick or authorize him.
+				 */
+				if (user->adminflags & ADMINFLAG_AUTH_REQUESTING) {
+					struct ao2_iterator user_iter = ao2_iterator_init(conf->usercontainer, 0);
+					while ((usr = ao2_iterator_next(&user_iter))) {
+						if ((usr->adminflags & ADMINFLAG_NOAUTHED) &&
+						   !(usr->adminflags & (ADMINFLAG_AUTH_REQUESTING|ADMINFLAG_SILENCED_KICK)))
+							break;
+					}
+					if(usr) {
+						if (musiconhold) {
+							ast_moh_stop(chan);
+							musiconhold = 0;
+						}
+						usr->adminflags |= ADMINFLAG_AUTH_REQUESTING;
+
+						/* Say request to admin. */
+						if (!ast_streamfile(chan, usr->namerecloc, chan->language))
+							ast_waitstream(chan, "");
+						dtmf = 0;
+						if (!ast_streamfile(chan, "conf-moderation-ask", chan->language))
+						{
+							dtmf = ast_waitstream(chan, AST_DIGIT_ANY);
+							ast_stopstream(chan);
+						}
+						auth_requesting = usr->user_no;
+						if (dtmf)
+							menu_active = meetme_moderation_menu(chan, conf, user, dtmf, &auth_requesting);
+						else
+							menu_active = 1;
+					}
+					else
+					{
+						user->adminflags &= ~ADMINFLAG_AUTH_REQUESTING;
+						menu_active = auth_requesting = 0;
+					}
+				} else if (currentnoauth != lastnoauth) {
+					/* During conversation, beep admin to tell him that there are
+					 * no authorized users who wait. */
+					if (!ast_streamfile(chan, "beep", chan->language))
+						ast_waitstream(chan, "");
+				}
+			}
+			else if (currentnoauth == 0 && lastnoauth > 0 && (confflags & CONFFLAG_ADMIN)) {
+				user->adminflags &= ~ADMINFLAG_AUTH_REQUESTING;
+				menu_active = auth_requesting = 0;
+			}
+
 			/* trying to add moh for single person conf */
-			if ((confflags & CONFFLAG_MOH) && !(confflags & CONFFLAG_WAITMARKED)) {
-				if (conf->users == 1) {
+			if ((confflags & CONFFLAG_MOH) && !(confflags & (CONFFLAG_WAITMARKED|CONFFLAG_MODERATION))) {
+				if (count_real_users(conf) == 1) {
 					if (musiconhold == 0) {
 						ast_moh_start(chan, NULL, NULL);
 						musiconhold = 1;
@@ -2069,7 +2433,7 @@
 			}
 			
 			/* Leave if the last marked user left */
-			if (currentmarked == 0 && lastmarked != 0 && (confflags & CONFFLAG_MARKEDEXIT)) {
+			if (currentmarked == 0 && lastmarked != 0 && (confflags & CONFFLAG_MARKEDEXIT) && !ispaused) {
 				ret = -1;
 				break;
 			}
@@ -2100,7 +2464,11 @@
 			}
 
 			/* If I should be un-muted but am not talker, un-mute me */
-			if (!(user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED)) && !(confflags & CONFFLAG_MONITOR) && !(ztc.confmode & DAHDI_CONF_TALKER)) {
+			if (!(user->adminflags & (ADMINFLAG_MUTED|ADMINFLAG_SELFMUTED|ADMINFLAG_NOAUTHED)) &&
+			    !(confflags & CONFFLAG_MONITOR) &&
+			    (!(confflags & CONFFLAG_WAITMARKED) || currentmarked > 0) &&
+			    !(ztc.confmode & DAHDI_CONF_TALKER) &&
+			    !ispaused) {
 				ztc.confmode |= DAHDI_CONF_TALKER;
 				if (ioctl(fd, DAHDI_SETCONF, &ztc)) {
 					ast_log(LOG_WARNING, "Error setting conference - Un/Mute \n");
@@ -2121,7 +2489,7 @@
 			if (user->adminflags & ADMINFLAG_KICKME) {
 				//You have been kicked.
 				if (!(confflags & CONFFLAG_QUIET) && 
-					!ast_streamfile(chan, "conf-kicked", chan->language)) {
+				    !ast_streamfile(chan, "conf-kicked", chan->language)) {
 					ast_waitstream(chan, "");
 				}
 				ret = 0;
@@ -2216,7 +2584,13 @@
 					if (musiconhold) {
 			   			ast_moh_stop(chan);
 					}
-					if ((confflags & CONFFLAG_ADMIN)) {
+					if (auth_requesting) {
+						/* Request authorization from admin for a user. */
+						dtmf = f->subclass;
+
+						menu_active = meetme_moderation_menu(chan, conf, user, dtmf, &auth_requesting);
+
+					} else if ((confflags & CONFFLAG_ADMIN)) {
 						/* Admin menu */
 						if (!menu_active) {
 							menu_active = 1;
@@ -2229,6 +2603,14 @@
 						} else 
 							dtmf = f->subclass;
 						if (dtmf) {
+							/* Check here to break the main loop. */
+							if (dtmf == '#') {
+								meetme_pause(conf, 1);
+								ret = 0;
+								ast_frfree(f);
+								break;
+							}
+
 							switch(dtmf) {
 							case '1': /* Un/Mute */
 								menu_active = 0;
@@ -2290,6 +2672,16 @@
 							case '9':
 								tweak_talk_volume(user, VOL_UP);
 								break;
+							case '*':
+								menu_active = 0;
+								if (conf->noauthorized > 0) {
+									conf_announce(chan, conf, user);
+									user->adminflags |= ADMINFLAG_AUTH_REQUESTING;
+								} else {
+									if (!ast_streamfile(chan, "conf-moderation-noinvited", chan->language))
+										ast_waitstream(chan, "");
+								}
+								break;
 							default:
 								menu_active = 0;
 								/* Play an error message! */
@@ -2486,6 +2878,8 @@
 					ast_log(LOG_WARNING, "Failed to read frame: %s\n", strerror(errno));
 			}
 			lastmarked = currentmarked;
+			lastnoauth = currentnoauth;
+			waspaused = ispaused;
 		}
 	}
 
@@ -2507,23 +2901,28 @@
 
 	reset_volumes(user);
 
-	if (!(confflags & CONFFLAG_QUIET) && !(confflags & CONFFLAG_MONITOR) && !(confflags & CONFFLAG_ADMIN))
+	if (!(confflags & CONFFLAG_QUIET) && !(confflags & CONFFLAG_MONITOR) && !(confflags & CONFFLAG_ADMIN) && !(user->adminflags & (ADMINFLAG_NOAUTHED|ADMINFLAG_SILENCED_KICK)))
 		conf_play(chan, conf, LEAVE);
 
-	if (!(confflags & CONFFLAG_QUIET) && ((confflags & CONFFLAG_INTROUSER) || (confflags & CONFFLAG_INTROUSERNOREVIEW)) && conf->users > 1) {
+	if (!(confflags & CONFFLAG_QUIET) &&
+	    ((confflags & CONFFLAG_INTROUSER) || (confflags & CONFFLAG_INTROUSERNOREVIEW)) &&
+	    count_real_users(conf) > 1 &&
+	    !(user->adminflags & (ADMINFLAG_NOAUTHED|ADMINFLAG_SILENCED_KICK))) {
 		struct announce_listitem *item;
 		if (!(item = ao2_alloc(sizeof(*item), NULL)))
 			return -1;
 		ast_copy_string(item->namerecloc, user->namerecloc, sizeof(item->namerecloc));
 		ast_copy_string(item->language, chan->language, sizeof(item->language));
 		item->confchan = conf->chan;
-		item->confusers = conf->users;
+		item->confusers = count_real_users(conf);
 		item->announcetype = CONF_HASLEFT;
 		ast_mutex_lock(&conf->announcelistlock);
 		AST_LIST_INSERT_TAIL(&conf->announcelist, item, entry);
 		ast_cond_signal(&conf->announcelist_addition);
 		ast_mutex_unlock(&conf->announcelistlock);
-	} else if (!(confflags & CONFFLAG_QUIET) && ((confflags & CONFFLAG_INTROUSER) || (confflags & CONFFLAG_INTROUSERNOREVIEW)) && conf->users == 1) {
+	} else if (!(confflags & CONFFLAG_QUIET) &&
+	           ((confflags & CONFFLAG_INTROUSER) || (confflags & CONFFLAG_INTROUSERNOREVIEW)) &&
+		   (count_real_users(conf) == 1 || (user->adminflags & (ADMINFLAG_NOAUTHED|ADMINFLAG_SILENCED_KICK)))) {
 		/* Last person is leaving, so no reason to try and announce, but should delete the name recording */
 		ast_filedelete(user->namerecloc, NULL);
 	}
@@ -2565,8 +2964,24 @@
 			/* Update table */
 			snprintf(members, sizeof(members), "%d", conf->users);
 			ast_update_realtime("meetme", "confno", conf->confno, "members", members, NULL);
-			if (confflags & CONFFLAG_MARKEDUSER) 
+			if (confflags & CONFFLAG_ADMIN) {
+				if (auth_requesting) {
+					struct ao2_iterator user_iter = ao2_iterator_init(conf->usercontainer, 0);
+					while ((usr = ao2_iterator_next(&user_iter))) {
+						/* Moderated user is released. */
+						if (usr->user_no == auth_requesting)
+							usr->adminflags &= ~(ADMINFLAG_AUTH_REQUESTING|ADMINFLAG_TALK_TO_ADMIN);
+					}
+				}
+				if (user->adminflags & ADMINFLAG_TALK_TO_ADMIN)
+					meetme_pause(conf, 0);
+			}
+			if (confflags & CONFFLAG_MARKEDUSER)
 				conf->markedusers--;
+			if (user->adminflags & ADMINFLAG_SILENCED_KICK)
+				conf->kicked--;
+			else if (user->adminflags & ADMINFLAG_NOAUTHED)
+				conf->noauthorized--;
 		}
 		/* Remove ourselves from the container */
 		ao2_unlink(conf->usercontainer, user); 
@@ -2767,7 +3182,7 @@
 	conf = find_conf(chan, args.confno, 0, 0, NULL, 0, 1, NULL);
 
 	if (conf) {
-		count = conf->users;
+		count = count_real_users(conf);
 		dispose_conf(conf);
 		conf = NULL;
 	} else
@@ -2983,7 +3398,7 @@
 								/* Pin correct */
 								allowretry = 0;
 								if (!ast_strlen_zero(cnf->pinadmin) && !strcasecmp(pin, cnf->pinadmin)) 
-									ast_set_flag(&confflags, CONFFLAG_ADMIN);
+									ast_set_flag(&confflags, CONFFLAG_MARKEDUSER|CONFFLAG_ADMIN);
 								/* Run the conference */
 								res = conf_run(chan, cnf, confflags.flags, optargs);
 								break;
@@ -3247,6 +3662,168 @@
 	return 0;
 }
 
+static int meetme_moderation(struct mansession *s, const struct message *m, int action)
+{
+	struct ast_conference *conf;
+	struct ast_conf_user *user, *admin;
+	const char *confid = astman_get_header(m, "Meetme");
+	char *userid = ast_strdupa(astman_get_header(m, "Usernum"));
+	char *adminid = ast_strdupa(astman_get_header(m, "Adminnum"));
+	int userno, adminno;
+
+	if (ast_strlen_zero(confid)) {
+		astman_send_error(s, m, "Meetme conference not specified");
+		return 0;
+	}
+
+	if (ast_strlen_zero(userid)) {
+		astman_send_error(s, m, "Meetme user number not specified");
+		return 0;
+	}
+
+	userno = strtoul(userid, &userid, 10);
+
+	if (*userid) {
+		astman_send_error(s, m, "Invalid user number");
+		return 0;
+	}
+
+	if (ast_strlen_zero(adminid)) {
+		astman_send_error(s, m, "Meetme admin number not specified");
+		return 0;
+	}
+
+	adminno = strtoul(adminid, &adminid, 10);
+
+	if (*adminid) {
+		astman_send_error(s, m, "Invalid admin number");
+		return 0;
+	}
+
+	/* Look in the conference list */
+	AST_LIST_LOCK(&confs);
+	AST_LIST_TRAVERSE(&confs, conf, list) {
+		if (!strcmp(confid, conf->confno))
+			break;
+	}
+
+	if (!conf) {
+		AST_LIST_UNLOCK(&confs);
+		astman_send_error(s, m, "Meetme conference does not exist");
+		return 0;
+	}
+
+	user = ao2_find(conf->usercontainer, &userno, 0);
+
+	if (!user) {
+		AST_LIST_UNLOCK(&confs);
+		astman_send_error(s, m, "User number not found");
+		return 0;
+	}
+
+	if (!(user->adminflags & ADMINFLAG_NOAUTHED)) {
+		AST_LIST_UNLOCK(&confs);
+		astman_send_error(s, m, "User already is authorized.");
+		return 0;
+	}
+
+	admin = ao2_find(conf->usercontainer, &adminno, 0);
+
+	if (!admin && !(admin->userflags & CONFFLAG_ADMIN)) {
+		AST_LIST_UNLOCK(&confs);
+		astman_send_error(s, m, "Admin number not found");
+		return 0;
+	}
+	if (action == ADMINFLAG_TALK_TO_ADMIN) {
+		meetme_mod_talk(conf, admin, user);
+		astman_send_ack(s, m, "Start talk");
+	}
+	else {
+		if (action == ADMINFLAG_AUTH_REQUESTING) {
+			meetme_mod_authorize(conf, admin, user);
+			astman_send_ack(s, m, "User authorized");
+		} else if (action == ADMINFLAG_SILENCED_KICK) {
+			meetme_mod_silence_kick(conf, admin, user);
+			astman_send_ack(s, m, "User is kicked");
+		} else {
+			AST_LIST_UNLOCK(&confs);
+			astman_send_error(s, m, "Action is invalid.");
+			return 0;
+		}
+	}
+
+	AST_LIST_UNLOCK(&confs);
+
+	return 0;
+}
+
+static int action_meetmeaccept(struct mansession *s, const struct message *m)
+{
+	return meetme_moderation(s, m, ADMINFLAG_AUTH_REQUESTING);
+}
+
+static int action_meetmekick(struct mansession *s, const struct message *m)
+{
+	return meetme_moderation(s, m, ADMINFLAG_SILENCED_KICK);
+}
+
+static int action_meetmetalk(struct mansession *s, const struct message *m)
+{
+	return meetme_moderation(s, m, ADMINFLAG_TALK_TO_ADMIN);
+}
+
+static int action_meetmepause(struct mansession *s, const struct message *m)
+{
+	struct ast_conference *conf;
+	const char *confid = astman_get_header(m, "Meetme");
+	const char *pause = astman_get_header(m, "Status");
+	int is_paused;
+
+	if (ast_strlen_zero(confid)) {
+		astman_send_error(s, m, "Meetme conference not specified");
+		return 0;
+	}
+
+	if (ast_strlen_zero(pause)) {
+		astman_send_error(s, m, "Pause status not specified");
+		return 0;
+	}
+
+	if (!strcmp(pause, "on"))
+		is_paused = 1;
+	else if (!strcmp(pause, "off"))
+		is_paused = 0;
+	else {
+		astman_send_error(s, m, "Pause status must be 'on' or 'off'");
+		return 0;
+	}
+
+	/* Look in the conference list */
+	AST_LIST_LOCK(&confs);
+	AST_LIST_TRAVERSE(&confs, conf, list) {
+		if (!strcmp(confid, conf->confno))
+			break;
+	}
+
+	if (!conf) {
+		AST_LIST_UNLOCK(&confs);
+		astman_send_error(s, m, "Meetme conference does not exist");
+		return 0;
+	}
+
+	if (is_paused && !conf->paused)
+		meetme_pause(conf, 1);
+	else if (!is_paused && conf->paused)
+		meetme_pause(conf, 0);
+
+	AST_LIST_UNLOCK(&confs);
+
+	ast_log(LOG_NOTICE, "Requested to %spause conf %s \n", conf->paused ? "" : "un", conf->confno);
+
+	astman_send_ack(s, m, conf->paused ? "Conf paused" : "Conf unpaused");
+	return 0;
+}
+
 static int meetmemute(struct mansession *s, const struct message *m, int mute)
 {
 	struct ast_conference *conf;
@@ -3367,6 +3944,7 @@
                                       "Channel: %s\r\n"
                                       "Uniqueid: %s\r\n"
                                       "Admin: %s\r\n"
+                                      "NoAuthed: %s\r\n"
                                       "Role: %s\r\n"
                                       "MarkedUser: %s\r\n"
                                       "Muted: %s\r\n"
@@ -3381,6 +3959,7 @@
                                       user->chan->name,
                                       user->chan->uniqueid,
                                       user->userflags & CONFFLAG_ADMIN ? "Yes" : "No",
+                                      user->adminflags & ADMINFLAG_NOAUTHED ? "Yes" : "No",
                                       user->userflags & CONFFLAG_MONITOR ? "Listen only" : user->userflags & CONFFLAG_TALKER ? "Talk only" : "Talk and listen",
                                       user->userflags & CONFFLAG_MARKEDUSER ? "Yes" : "No",
                                       user->adminflags & ADMINFLAG_MUTED ? "By admin" : user->adminflags & ADMINFLAG_SELFMUTED ? "By self" : "No",
@@ -5226,6 +5805,9 @@
 	res = ast_manager_unregister("MeetmeMute");
 	res |= ast_manager_unregister("MeetmeUnmute");
 	res |= ast_manager_unregister("MeetmeList");
+	res |= ast_manager_unregister("MeetmeAccept");
+	res |= ast_manager_unregister("MeetmeKick");
+	res |= ast_manager_unregister("MeetmeTalk");
 	res |= ast_unregister_application(app3);
 	res |= ast_unregister_application(app2);
 	res |= ast_unregister_application(app);
@@ -5255,6 +5837,14 @@
 				    action_meetmeunmute, "Unmute a Meetme user");
 	res |= ast_manager_register2("MeetmeList", EVENT_FLAG_CALL,
                                      action_meetmelist, "List participants in a conference", mandescr_meetmelist);
+	res |= ast_manager_register("MeetmeAccept", EVENT_FLAG_CALL,
+                                    action_meetmeaccept, "Accept a no authorized user in a conference");
+	res |= ast_manager_register("MeetmeKick", EVENT_FLAG_CALL,
+                                    action_meetmekick, "Kick a user from a conference");
+	res |= ast_manager_register("MeetmeTalk", EVENT_FLAG_CALL,
+                                    action_meetmetalk, "Talk to a no authorized user");
+	res |= ast_manager_register("MeetmePause", EVENT_FLAG_CALL,
+                                    action_meetmepause, "Pause/unpause conference");
 	res |= ast_register_application(app3, admin_exec, synopsis3, descrip3);
 	res |= ast_register_application(app2, count_exec, synopsis2, descrip2);
 	res |= ast_register_application(app, conf_exec, synopsis, descrip);
