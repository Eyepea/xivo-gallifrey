#!/usr/bin/python
#
# Authors : Sylvain Boily, Guillaume Knispel
#           Proformatique
#           67, rue Voltaire
#           92800 PUTEAUX
#           (+33/0)1.41.38.99.60
#           mailto:technique@proformatique.com
#           (C) 2007 Proformatique
#

__version__ = "$Revision: 1041 $ $Date: 2007-07-04 16:13:37 +0200 (Wed, 04 Jul 2007) $"
__license__ = """
    Copyright (C) 2007, Proformatique

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

CONFIG_FILE = '/etc/asterisk/xivo_agi.conf'

import xivo.to_path

import sys
import anysql
from BackSQL import backsqlite
from BackSQL import backmysql
import ConfigParser
from ConfigDict import *

from antiloop import *

from agi import *

options = { "db_uri" : "" }
conf_obj = ConfigParser.ConfigParser()
conf_obj.readfp(open(CONFIG_FILE))
FillDictFromConfigSection(options, conf_obj, "db")

def get_all_users(context):
        try:
                conn = anysql.connect_by_uri(options['db_uri'])
        except:
                agi.verbose("Unable to connect to %s" %options['db_uri'])
                raise

        query = "SELECT name FROM userfeatures WHERE context='%s'" % context
        cursor = conn.cursor()
        cursor.execute(query)
        r = cursor.fetchall()

	return r

agi = AGI()

user_src = agi.get_variable(agi.env['agi_callerid'])
context = agi.get_variable('MACRO_CONTEXT')
res = get_all_users(context)

graph = {}

for u in res:
	user = u[0]
	families = ['/FWD/Unc', '/FWD/Busy', '/FWD/RNA']
	for f in families:
		try:
			status = agi.database_get(context + '/users/' + user + f, 'Status')
		except:
			status = 0
		if int(status):
			family = context + '/users/' + user + f
			key = 'Number'
			try:
				dest = agi.database_get(family, key)
			except:
				dest = None
			if dest is not None:
                                dest_list = graph.setdefault(user, [])
                                dest_list.append(dest)
                                graph.setdefault(dest, [])

try:
        # XXX: possible bug if change the number for forward
        user_dest = agi.get_variable('MACRO_EXTEN')[3:]
except AGIAppError:
        agi.verbose("Handled exception for missing variable MACRO_EXTEN")

agi.verbose(user_dest)
dest_list = graph.setdefault(user_src, [])
dest_list.append(user_dest)

# XXX: modify the graph so that a potentialy overwritten transfer is removed,
# and that the to be configured transfer is in the graph.

might_loop = loop(graph, user_src)
if might_loop is not None:
	agi.set_variable('LOOP', 1)
	agi.verbose('There is a loop on forward !')
	agi.verbose(repr(might_loop))
