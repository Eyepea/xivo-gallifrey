#!/usr/bin/python
#
# Authors : Sylvain Boily, Guillaume Knispel
#           Proformatique
#           67, rue Voltaire
#           92800 PUTEAUX
#           (+33/0)1.41.38.99.60
#           mailto:technique@proformatique.com
#           (C) 2007 Proformatique
#

__version__ = "$Revision: 917 $ $Date: 2007-06-15 16:33:51 +0200 (Fri, 15 Jun 2007) $"
__license__ = """
    Copyright (C) 2007, Proformatique

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

CONFIG_FILE = '/etc/asterisk/xivo_agi.conf'
CONFIG_LIB_PATH = 'py_lib_path'

import sys
from xivo import ConfigPath
from xivo.ConfigPath import *
ConfiguredPathHelper(CONFIG_FILE, CONFIG_LIB_PATH)
import anysql
from BackSQL import backsqlite
from BackSQL import backmysql
import ConfigParser
from ConfigDict import *

options = { "db_uri" : "" }
conf_obj = ConfigParser.ConfigParser()
conf_obj.readfp(open(CONFIG_FILE))
FillDictFromConfigSection(options, conf_obj, "db")

from agi import *

import operator, string

try:
        conn = anysql.connect_by_uri(options['db_uri'])
except:
        print "VERBOSE \"Unable to connect to %s\"" %options['db_uri']
        raise

# This is the configuration file, please do not change the path because if was editable by xivo web interface
file = "/etc/asterisk/xivo_boss-secretary.conf"

agi = AGI()

if len(sys.argv) != 4:
	print "Error for args!"
        agi.verbose("Error for args found!")
        sys.exit()

user = sys.argv[1]
context = sys.argv[2]
callerid = sys.argv[3]

# XXX TODO: change to use not static technologie
tech = 'SIP'

try:
        config = ConfigParser.ConfigParser()
        config.readfp(open(file))
except IOError:
	agi.verbose('Configuration file not found : %s' % file)
        raise

if not config.has_section('general'):
	agi.verbose('Erreur general section doesn\'t exist')
	sys.exit()

if int(config.get('general','actived')) != 1:
	agi.verbose('Function not actived')
	sys.exit()

if int(config.get(user,'actived')) != 1:
	agi.verbose('Function for user %s not actived' % user)
	sys.exit()

if config.get(user,'type') != 'boss':
	agi.verbose('Sorry this user is not a boss')
	sys.exit()

secretary = config.get(user,'secretary').split(',')
nbring = config.get(user,'nbring')
strategy = config.get(user,'strategy')
s_number = []

if secretary:
	for s in secretary:
		if config.get(s,'context') == context:
			s_num = config.get(s,'number')
			if s_num == callerid:
				agi.verbose('No filter is actived')
				sys.exit()
			s_number.append(s_num)

t = str(int(nbring)*5)
if t != "0":
	agi.appexec("DIAL", "%s/%s|%s" %(tech, user, t))

for num in s_number:
	agi.set_callerid("\"%s Filtrage actif <%s>\"" %(user,callerid))
	agi.appexec("DIAL", "Local/%s@%s" %(num, context))
