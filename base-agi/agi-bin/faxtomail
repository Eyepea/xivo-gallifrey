#!/usr/bin/python
#
# Authors : Sylvain Boily, Guillaume Knispel
#           Proformatique
#           67, rue Voltaire
#           92800 PUTEAUX
#           (+33/0)1.41.38.99.60
#           mailto:technique@proformatique.com
#           (C) 2007 Proformatique
#

__version__ = "$Revision$ $Date$"
__license__ = """
    Copyright (C) 2007, Proformatique

    This software is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

CONFIG_FILE = '/etc/asterisk/xivo_agi.conf'
CONFIG_LIB_PATH = 'py_lib_path'

import sys
from xivo import ConfigPath
from xivo.ConfigPath import *
ConfiguredPathHelper(CONFIG_FILE, CONFIG_LIB_PATH)
import anysql
from BackSQL import backsqlite
from BackSQL import backmysql
import ConfigParser
from ConfigDict import *
from agi import *

options = { "db_uri" : "" }
conf_obj = ConfigParser.ConfigParser()
conf_obj.readfp(open(CONFIG_FILE))
FillDictFromConfigSection(options, conf_obj, "db")

import string, re, os, datetime

agi = AGI()

if len(sys.argv) != 4:
	agi.verbose("Missing arguments")
	sys.exit()


if sys.argv[1].isdigit():
	agi.verbose("OK, argv[1] is a phone number!")
	callexten = sys.argv[1]
else:
	agi.verbose("Error, argv[1] is not a phone number!")
	callexten = "Num√©ro Inconnu"

filename = sys.argv[2]
filepdf = string.replace(filename,".tif",".pdf")

if sys.argv[3].isdigit():
	mailbox = sys.argv[3]
else:
	agi.verbose("Error it's not a phone number!")

try:
        conn = anysql.connect_by_uri(options['db_uri'])
except:
        agi.verbose("Unable to connect to %s" %options['db_uri'])
        raise

query = "SELECT email, fullname FROM uservoicemail WHERE mailbox='%s'" % mailbox
cursor = conn.cursor()
cursor.execute(query)
r = cursor.fetchone()

if not r:
	agi.verbose("Sorry there is not user for this FAX")
	sys.exit()

mail = r[0]
name = r[1]
date = datetime.datetime.now()

if not mail and not name:
	agi.verbose("Sorry there is no person at this number")
	agi.verbose("Missing mail or name")
	sys.exit()
else:
	try:
		if os.stat(filename).st_size != 0:
			agi.verbose("Convert tif to pdf")
			os.system("/usr/bin/tiff2pdf -o %s %s" %(filepdf, filename))
			agi.verbose("Send FAX to %s (%s) at %s" %(mail, name, date))
			os.system("echo \"Un nouveau fax est arrive pour %s, il est joint dans ce mail !\n\nCordialement,\nService IPBX\" | /usr/bin/mutt -s \"Reception FAX de %s\" -a %s %s" %(name, callexten, filepdf, mail))
			try:
				os.remove(filepdf)
				os.remove(filename)
			except OSError:
				agi.verbose("Error while trying to remove '%s' and '%s'" % (filename, filepdf))
				raise
		else:
			agi.verbose("Sorry the file is empty")
			try:
				os.remove(filename)
			except OSError:
				agi.verbose("Error while trying to remove '%s'" % filename)
				raise
	except OSError:
		agi.verbose("Error during fax conversion, maybe no fax received...")
		raise
