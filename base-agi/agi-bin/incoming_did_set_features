#!/usr/bin/python
#
# Authors : Sylvain Boily, Guillaume Knispel, Richard Braun
#	   Proformatique
#	   67, rue Voltaire
#	   92800 PUTEAUX
#	   (+33/0)1.41.38.99.60
#	   mailto:technique@proformatique.com
#	   (C) 2007 Proformatique

# TODO: Filter commented SQL rows

__version__ = "$Revision$ $Date$"
__license__ = """
    Copyright (C) 2007, Proformatique

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

CONFIG_FILE = '/etc/asterisk/xivo_agi.conf'

import xivo.to_path

import sys
import anysql
import except_tb
from BackSQL import backsqlite
from BackSQL import backmysql
import ConfigDict
from agi import *

db_uri = ConfigDict.ReadSingleKey(CONFIG_FILE, 'db', 'db_uri')

agi = AGI()

def dp_break(message, show_tb = False):
	agi.verbose(message)

	if show_tb:
		except_tb.log_exception(agi.verbose)

	agi.hangup()
	sys.exit(1)

def db_connect():
	try:
		conn = anysql.connect_by_uri(db_uri)
	except:
		dp_break("Unable to connect to %s" % db_uri, True)

	return conn

def setvars(type, typeval, type_varname, typeval_varname):
	agi.set_variable(type_varname, type)

	if type == 'endcall' or type == 'application' or type == 'schedule' or type == 'sound' or type == 'custom':
		agi.set_variable(typeval_varname, typeval)
	elif type == 'user':
		cursor.query("SELECT ${columns} FROM userfeatures WHERE id = %s", ('number',), (typeval,))
		res = cursor.fetchone()

		if not res:
			dp_break("Database inconsistency: unable to find linked destination user '%s'" % typeval)

		agi.set_variable(typeval_varname, res['number'])
	elif type == 'group':
		cursor.query("SELECT ${columns} FROM groupfeatures WHERE id = %s", ('number',), (typeval,))
		res = cursor.fetchone()

		if not res:
			dp_break("Database inconsistency: unable to find linked destination group '%s'" % typeval)

		agi.set_variable(typeval_varname, res['number'])
	elif type == 'queue':
		cursor.query("SELECT ${columns} FROM queuefeatures WHERE id = %s", ('number',), (typeval,))
		res = cursor.fetchone()

		if not res:
			dp_break("Database inconsistency: unable to find linked destination queue'%s'" % typeval)

		agi.set_variable(typeval_varname, res['number'])
	elif type == 'meetme':
		cursor.query("SELECT ${columns} FROM meetmefeatures WHERE id = %s", ('number',), (typeval,))
		res = cursor.fetchone()

		if not res:
			dp_break("Database inconsistency: unable to find linked destination conference room'%s'" % typeval)

		agi.set_variable(typeval_varname, res['number'])
	else:
		dp_break("Unknown dial status destination type '%s'" % type)

# Cursors have a weak reference on their connection, so make a strong one.
conn = db_connect()
cursor = conn.cursor()
srcnum = agi.get_variable('REAL_SRCNUM')
dstnum = agi.get_variable('REAL_DSTNUM')
context = agi.get_variable('REAL_CONTEXT')
exten_pattern = agi.get_variable('REAL_EXTENPATTERN')

# TODO: handle caller ID.

cursor.query("SELECT ${columns} FROM extenumbers INNER JOIN incall "
             "ON incall.id = extenumbers.typeval "
             "WHERE extenumbers.exten = %s "
             "AND extenumbers.context = %s "
             "AND extenumbers.type = 'incall' "
             "AND incall.linked = 1 "
             "AND incall.commented = 0",
             [('incall.' + x) for x in ('type', 'typeval')],
             (exten_pattern, context))
res = cursor.fetchone()

if not res:
	dp_break("Unknown extension '%s'" % exten_pattern)

setvars(res['incall.type'], res['incall.typeval'], "XIVO_DIDTYPE", "XIVO_DIDTYPEVAL")
agi.verbose('AGI script "%s" successfully executed' % sys.argv[0])
