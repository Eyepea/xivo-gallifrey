#!/usr/bin/python
#
# Authors : Sylvain Boily, Guillaume Knispel, Richard Braun
#	   Proformatique
#	   67, rue Voltaire
#	   92800 PUTEAUX
#	   (+33/0)1.41.38.99.60
#	   mailto:technique@proformatique.com
#	   (C) 2007 Proformatique

__version__ = "$Revision$ $Date$"
__license__ = """
    Copyright (C) 2007, Proformatique

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

CONFIG_FILE = '/etc/asterisk/xivo_agi.conf'

import xivo.to_path

import sys
import time
import anysql
import except_tb
import agi_helpers
from BackSQL import backsqlite
from BackSQL import backmysql
import ConfigDict
from agi import *

agi = AGI()
db_uri = ConfigDict.ReadSingleKey(CONFIG_FILE, 'db', 'db_uri')

def ds_set_fwd_vars(id, status, type_varname, typeval1_varname, typeval2_varname):
	cursor.query("SELECT ${columns} FROM dialstatus WHERE status = %s AND category = %s AND categoryval = %s AND linked = 1",
                     ('type', 'typeval', 'applicationval'),
                     (status, 'group', id))
	res = cursor.fetchone()

	if not res:
		type = "endcall"
		typeval = "none"
		applicationval = None
	else:
		type = res['type']
		typeval = res['typeval']
		applicationval = res['applicationval']

	agi_helpers.set_fwd_vars(agi, cursor, type, typeval, applicationval, type_varname, typeval1_varname, typeval2_varname)

# Cursors have a weak reference on their connection, so make a strong one.
conn = agi_helpers.db_connect(agi, db_uri)
cursor = conn.cursor()
dstnum = agi.get_variable('REAL_DSTNUM')
context = agi.get_variable('REAL_CONTEXT')

cursor.query("SELECT ${columns} FROM groupfeatures INNER JOIN queue "
             "ON groupfeatures.name = queue.name "
             "WHERE groupfeatures.number = %s "
             "AND groupfeatures.context = %s "
             "AND groupfeatures.deleted = 0 "
             "AND queue.commented = 0 "
             "AND queue.category = 'group'",
             ('groupfeatures.id', 'groupfeatures.name', 'groupfeatures.timeout', 'queue.musiconhold'),
             (dstnum, context))
res = cursor.fetchone()

if not res:
	agi_helpers.dp_break(agi, "Unknown group number '%s'" % dstnum)

id = res['groupfeatures.id']
name = res['groupfeatures.name']
timeout = res['groupfeatures.timeout']
options = ""

if not res['queue.musiconhold']:
	options += "r"

agi.set_variable('XIVO_GROUPNAME', name)
agi.set_variable('XIVO_GROUPOPTIONS', options)

if timeout:
	agi.set_variable('XIVO_GROUPTIMEOUT', timeout)

ds_set_fwd_vars(id, 'busy', 'XIVO_FWD_TYPEBUSY', 'XIVO_FWD_TYPEVAL1BUSY', 'XIVO_FWD_TYPEVAL2BUSY')
ds_set_fwd_vars(id, 'noanswer', 'XIVO_FWD_TYPERNA', 'XIVO_FWD_TYPEVAL1RNA', 'XIVO_FWD_TYPEVAL2RNA')
ds_set_fwd_vars(id, 'congestion', 'XIVO_FWD_TYPECONGESTION', 'XIVO_FWD_TYPEVAL1CONGESTION', 'XIVO_FWD_TYPEVAL2CONGESTION')
ds_set_fwd_vars(id, 'chanunavail', 'XIVO_FWD_TYPEUNAVAIL', 'XIVO_FWD_TYPEVAL1UNAVAIL', 'XIVO_FWD_TYPEVAL2UNAVAIL')

agi.verbose('AGI script "%s" successfully executed' % sys.argv[0])
