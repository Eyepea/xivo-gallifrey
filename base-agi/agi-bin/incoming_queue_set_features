#!/usr/bin/python

__version__ = "$Revision$ $Date$"
__license__ = """
    Copyright (C) 2006, 2007, 2008  Proformatique

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA..
"""

CONFIG_FILE = '/etc/asterisk/xivo_agi.conf'

import xivo.to_path

import sys
import anysql
import agi_helpers
from BackSQL import backsqlite
from BackSQL import backmysql
import ConfigDict
from agi import *
import agitb

agi = AGI()
agitb.enable(agi)
db_uri = ConfigDict.ReadSingleKey(CONFIG_FILE, 'db', 'db_uri')

# Cursors have a weak reference on their connection, so make a strong one.
conn = agi_helpers.db_connect(agi, db_uri)
cursor = conn.cursor()
dstnum = agi.get_variable('REAL_DSTNUM')
context = agi.get_variable('REAL_CONTEXT')

cursor.query("SELECT ${columns} FROM queuefeatures INNER JOIN queue "
             "ON queuefeatures.name = queue.name "
             "WHERE queuefeatures.number = %s "
             "AND queuefeatures.context = %s "
             "AND queue.commented = 0 "
             "AND queue.category = 'queue'",
             [('queuefeatures.' + x) for x in ('name', 'data_quality', 'hitting_callee', 'hitting_caller', 'retries', 'ring', 'transfer_user', 'transfer_call', 'write_caller', 'write_calling', 'url', 'announceoverride', 'timeout')],
             (dstnum, context))
res = cursor.fetchone()

if not res:
	agi_helpers.dp_break(agi, "Unknown queue number '%s'" % dstnum)

options = ''

if res['queuefeatures.data_quality']:
	options += "d"

if res['queuefeatures.hitting_callee']:
	options += "h"

if res['queuefeatures.hitting_caller']:
	options += "H"

if res['queuefeatures.retries']:
	options += "n"

if res['queuefeatures.ring']:
	options += "r"

if res['queuefeatures.transfer_user']:
	options += "t"

if res['queuefeatures.transfer_call']:
	options += "T"

if res['queuefeatures.write_caller']:
	options += "w"

if res['queuefeatures.write_calling']:
	options += "W"

agi.set_variable('XIVO_QUEUENAME', res['queuefeatures.name'])
agi.set_variable('XIVO_QUEUEOPTIONS', options)
agi.set_variable('XIVO_QUEUEURL', res['queuefeatures.url'])
agi.set_variable('XIVO_QUEUEANNOUNCEOVERRIDE', res['queuefeatures.announceoverride'])

if res['queuefeatures.timeout']:
	agi.set_variable('XIVO_QUEUETIMEOUT', res['queuefeatures.timeout'])

agi.verbose('AGI script "%s" successfully executed' % sys.argv[0])
