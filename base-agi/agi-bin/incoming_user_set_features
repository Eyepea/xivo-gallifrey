#!/usr/bin/python
#
# Authors : Sylvain Boily, Guillaume Knispel, Richard Braun
#	   Proformatique
#	   67, rue Voltaire
#	   92800 PUTEAUX
#	   (+33/0)1.41.38.99.60
#	   mailto:technique@proformatique.com
#	   (C) 2007 Proformatique

# TODO: Filter commented SQL rows

__version__ = "$Revision$ $Date$"
__license__ = """
    Copyright (C) 2007, Proformatique

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

CONFIG_FILE = '/etc/asterisk/xivo_agi.conf'

import xivo.to_path

import sys
import time
import anysql
import except_tb
import agi_helpers
from BackSQL import backsqlite
from BackSQL import backmysql
import ConfigDict
from agi import *

agi = AGI()
db_uri = ConfigDict.ReadSingleKey(CONFIG_FILE, 'db', 'db_uri')

def ds_set_fwd_vars(id, status, type_varname, typeval1_varname, typeval2_varname):
	cursor.query("SELECT ${columns} FROM dialstatus WHERE status = %s AND category = %s AND categoryval = %s AND linked = 1",
                     ('type', 'typeval', 'applicationval'),
                     (status, 'user', id))
	res = cursor.fetchone()

	if not res:
		return

	agi_helpers.set_fwd_vars(agi, cursor, res['type'], res['typeval'], res['applicationval'], type_varname, typeval1_varname, typeval2_varname)

# Cursors have a weak reference on their connection, so make a strong one.
conn = agi_helpers.db_connect(agi, db_uri)
cursor = conn.cursor()
srcnum = agi.get_variable('REAL_SRCNUM')
dstnum = agi.get_variable('REAL_DSTNUM')
context = agi.get_variable('REAL_CONTEXT')

cursor.query("SELECT ${columns} FROM userfeatures WHERE number = %s AND context = %s AND internal = 0 AND commented = 0",
             ('id', 'protocol' , 'protocolid', 'name', 'ringseconds', 'simultcalls', 'enablevoicemail', 'enablexfer', 'enableautomon', 'callrecord', 'callfilter', 'enablednd', 'enableunc', 'destunc', 'enablerna', 'destrna', 'enablebusy', 'destbusy', 'musiconhold'),
             (dstnum, context))
res = cursor.fetchone()

if not res:
	agi_helpers.dp_break(agi, "Unknown number '%s'" % dstnum)

id = res['id']
protocol = res['protocol']
protocolid = res['protocolid']
name = res['name']
simultcalls = res['simultcalls']
ringseconds = res['ringseconds']
enablednd = res['enablednd']
enablevoicemail = res['enablevoicemail']

calloptions = ''

if res['enablexfer'] == 1:
	calloptions += "t"

if res['enableautomon'] == 1:
	calloptions += "w"

if res['callfilter'] == 1:
	calloptions += "p"

enableunc = res['enableunc']
destunc = res['destunc']
enablebusy = res['enablebusy']
destbusy = res['destbusy']
enablerna = res['enablerna']
destrna = res['destrna']
callrecord = res['callrecord']
musiconhold = res['musiconhold']

if protocol in ("sip", "iax"):
	interface = protocol.upper() + "/" + name
elif protocol == "custom":
	cursor.query("SELECT ${columns} FROM usercustom "
                     "WHERE id = %s "
                     "AND commented = 0 "
                     "AND category = 'user'",
                     ('interface',),
                     (protocolid,))
	res = cursor.fetchone()

	if not res:
		agi_helpers.dp_break(agi, "Database inconsistency: unable to find custom user (name = '%s', context = '%s')" % (name, context))

	interface = res['interface']
else:
	agi_helpers.dp_break(agi, "Unknown protocol '%s'" % protocol)

agi.set_variable('XIVO_INTERFACE', interface)
agi.set_variable('XIVO_SIMULTCALLS', simultcalls)

if ringseconds > 0:
	agi.set_variable('XIVO_RINGSECONDS', ringseconds)

agi.set_variable('XIVO_ENABLEDND', enablednd)
agi.set_variable('XIVO_ENABLEVOICEMAIL', enablevoicemail)
agi.set_variable('XIVO_CALLOPTIONS', calloptions)
agi.set_variable('XIVO_ENABLEUNC', enableunc)

if enableunc == 1:
	agi.set_variable('XIVO_FWD_TYPEUNC', 'user')
	agi.set_variable('XIVO_FWD_TYPEVAL1UNC', destunc)
	agi.set_variable('XIVO_FWD_TYPEVAL2UNC', context)

agi.set_variable('XIVO_ENABLEBUSY', enablebusy)

if enablebusy == 1:
	agi.set_variable('XIVO_FWD_TYPEBUSY', 'user')
	agi.set_variable('XIVO_FWD_TYPEVAL1BUSY', destbusy)
	agi.set_variable('XIVO_FWD_TYPEVAL2BUSY', context)
else:
	ds_set_fwd_vars(id, 'busy', 'XIVO_FWD_TYPEBUSY', 'XIVO_FWD_TYPEVAL1BUSY', 'XIVO_FWD_TYPEVAL2BUSY')

if enablerna:
	agi.set_variable('XIVO_FWD_TYPERNA', 'user')
	agi.set_variable('XIVO_FWD_TYPEVAL1RNA', destrna)
	agi.set_variable('XIVO_FWD_TYPEVAL2RNA', context)
else:
	ds_set_fwd_vars(id, 'noanswer', 'XIVO_FWD_TYPERNA', 'XIVO_FWD_TYPEVAL1RNA', 'XIVO_FWD_TYPEVAL2RNA')

ds_set_fwd_vars(id, 'congestion', 'XIVO_FWD_TYPECONGESTION', 'XIVO_FWD_TYPEVAL1CONGESTION', 'XIVO_FWD_TYPEVAL2CONGESTION')
ds_set_fwd_vars(id, 'chanunavail', 'XIVO_FWD_TYPEUNAVAIL', 'XIVO_FWD_TYPEVAL1UNAVAIL', 'XIVO_FWD_TYPEVAL2UNAVAIL')

if callrecord:
	agi.set_variable('XIVO_CALLRECORDFILE', "/usr/share/asterisk/sounds/web-interface/monitor/user-%s-%s-%s.wav" % (srcnum, dstnum, int(time.time())))

if musiconhold:
	agi.set_variable('MUSICCLASS()', musiconhold)

agi.verbose('AGI script "%s" successfully executed' % sys.argv[0])
