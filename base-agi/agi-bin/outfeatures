#!/usr/bin/python
#
# Authors : Sylvain Boily, Guillaume Knispel
#           Proformatique
#           67, rue Voltaire
#           92800 PUTEAUX
#           (+33/0)1.41.38.99.60
#           mailto:technique@proformatique.com
#           (C) 2007 Proformatique
#

__version__ = "$Revision$ $Date$"
__license__ = """
    Copyright (C) 2007, Proformatique

    This software is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

CONFIG_FILE = '/etc/asterisk/xivo_agi.conf'
CONFIG_LIB_PATH = 'py_lib_path'

import sys, re
from xivo import ConfigPath
from xivo.ConfigPath import *
ConfiguredPathHelper(CONFIG_FILE, CONFIG_LIB_PATH)
import anysql
from BackSQL import backsqlite
from BackSQL import backmysql
import ConfigParser
from ConfigDict import *
from agi import *

options = { "db_uri" : "" }
conf_obj = ConfigParser.ConfigParser()
conf_obj.readfp(open(CONFIG_FILE))
FillDictFromConfigSection(options, conf_obj, "db")

import string

agi = AGI()


# This is the configuration file, please do not change the path because if was editable by xivo web interface
outcall = "/etc/asterisk/xivo_outcall.conf"

try:
	config = ConfigParser.ConfigParser()
	config.readfp(open(outcall))
except IOError:
	agi.verbose("Configuration file not found : %s" % outcall)
	raise

# This function returns all informations for a specific provider
def get_provider(provider, return_callerid):
	agi.set_variable("PROVIDER", provider)
	agi.set_variable("EXTERNPREFIX", config.get(provider, 'externprefix'))
	agi.set_variable("PREFIX", config.get(provider, 'prefix'))
	agi.set_variable("CHAN", config.get(provider, 'chan'))
	if not return_callerid:
		agi.set_variable("EXTERNNUM", config.get(provider, 'externnum'))
	else:
		agi.set_variable("EXTERNNUM", return_callerid)
	agi.set_variable("SETCALLERID", config.get(provider, 'setcallerid'))
	agi.set_variable("USEENUM", config.get(provider, 'useenum'))
	agi.set_variable("TIMETOCALL", config.get(provider, 'timetocall'))
	if not config.get(provider, 'stripnum'):
		agi.set_variable("STRIPNUM", "0")
	else:
		agi.set_variable("STRIPNUM", config.get(provider, 'stripnum'))

# This function return all informations from the general section, special number and emergency number
def get_general():
	providers = ''
	for provider in config.sections():
		if provider != 'general':
			if not providers:
				providers = provider
			else:
				providers = providers + "," + provider

	agi.set_variable("EMERGENCYPROVIDER", config.get('general', 'emergencyprovider'))
	agi.set_variable("EMERGENCYNUMBERS", config.get('general', 'emergencynumbers'))
	agi.set_variable("SPECIALNUMBERS", config.get('general', 'specialnumbers'))
	agi.set_variable("SPECIALPROVIDER", config.get('general', 'specialprovider'))
	agi.set_variable("PROVIDERS", providers)

def set_outcallerid(callerid):
	try:
		conn = anysql.connect_by_uri(options['db_uri'])
	except:
		agi.verbose("Unable to connect to %s" %options['db_uri'])
		raise

	cursor = conn.cursor()
	query = "SELECT outnumber FROM userfeatures WHERE number='%s'" % callerid
	cursor.execute(query)
	t = cursor.fetchone()

	if not t:
		agi.verbose("No callerid found !")

	else:
		callerid = t[0]
		agi.set_callerid(callerid)
		return callerid

# If no argnument script return all general configuration
# First argument must be a phone number 
# Second argument must be a provider setup on config file

if len(sys.argv) > 1:
	if sys.argv[1].isdigit() or re.search("^\+", sys.argv[1]):
		exten = sys.argv[1]
		provider = ""
	else:
		provider = sys.argv[1]
	
	if len(sys.argv) > 2:
		context = sys.argv[2]
	else:
		context = ""

	return_callerid = ''
	if len(sys.argv) > 3:
		callerid = sys.argv[3]
		return_callerid = set_outcallerid(callerid)
	
	if provider:
		get_provider(provider, return_callerid)
		sys.exit()
	else:
		get_general()

		try:
			for s in config.sections():
				if s != 'general':
					if config.has_option(s, 'len'):
						if config.get(s, 'len'):
							lennum = int(config.get(s, 'len'))+len(config.get(s, 'prefix'))
						else:
							lennum = len(config.get(s, 'prefix'))
					else:
						lennum = len(config.get(s, 'prefix'))

					if len(exten) == lennum and not config.get(s, 'externregexp'):
						if exten[:len(config.get(s, 'prefix'))] == config.get(s, 'prefix'):
							if (not config.has_option(s, 'context')) or \
							       (config.has_option(s, 'context') and context == config.get(s, 'context')):
								get_provider(s, return_callerid)
								sys.exit()
							else:
								agi.verbose("Found no provider for this number %s and context %s!" %(exten,context))
						else:
							agi.verbose("Found no provider for this number %s!" % exten)
					else:
						try:
							import re
							if config.has_option(s, 'externregexp'):
								r = re.compile(config.get(s, 'externregexp'))
								if len(r.findall(exten)) != 0:
									if r.findall(exten)[0]:
										if (not config.has_option(s, 'context')) or \
										       (config.has_option(s, 'context') and context == config.get(s, 'context')):
											get_provider(s, return_callerid)
											sys.exit()
										else:
											agi.verbose("Found no provider in this context %s!" %(context))
						except IndexError:
							agi.verbose("Error for the regexp %s on the section %s" %(config.get(s, 'externregexp'), s))
							agi.verbose("Maybe this number is wrong!")


		except ConfigParser.NoSectionError:
			agi.verbose("Sorry no providers with this name")
		except ConfigParser.NoOptionError:
			agi.verbose("Sorry your config is broken please add all options on the section %s" % s)
		except IndexError:
			agi.verbose("Error for number for args on the section %s" % s)
else:
	get_general()
	sys.exit()

agi.verbose("No found provider for this number %s!" % exten)
sys.exit()
