#!/usr/bin/python
#
# Authors : Sylvain Boily, Guillaume Knispel, Richard Braun
#	   Proformatique
#	   67, rue Voltaire
#	   92800 PUTEAUX
#	   (+33/0)1.41.38.99.60
#	   mailto:technique@proformatique.com
#	   (C) 2007 Proformatique

# TODO: Filter commented SQL rows

__version__ = "$Revision$ $Date$"
__license__ = """
    Copyright (C) 2007, Proformatique

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

CONFIG_FILE = '/etc/asterisk/xivo_agi.conf'

import xivo.to_path

import sys
import anysql
import except_tb
from BackSQL import backsqlite
from BackSQL import backmysql
import ConfigDict
from agi import *

db_uri = ConfigDict.ReadSingleKey(CONFIG_FILE, 'db', 'db_uri')

agi = AGI()

def dp_break(message, show_tb = False):
	agi.verbose(message)

	if show_tb:
		except_tb.log_exception(agi.verbose)

	agi.hangup()
	sys.exit(1)

def db_connect():
	try:
		conn = anysql.connect_by_uri(db_uri)
	except:
		dp_break("Unable to connect to %s" % db_uri, True)

	return conn

def forgetimefield(start, end, includesep = False):
	if start == '*':
		timestr = '*'
	else:
		if end == '':
			timestr = '%s' % start
		else:
			timestr = '%s-%s' % (start, end)

	if includesep:
		return ',%s' % timestr
	else:
		return timestr

def forgetime(res):
	timestr = forgetimefield(res['timebeg'], res['timeend'])
	timestr += forgetimefield(res['daynamebeg'], res['daynameend'], True)
	timestr += forgetimefield(res['daynumbeg'], res['daynumend'], True)
	timestr += forgetimefield(res['monthbeg'], res['monthend'], True)
	return timestr

def setvars(type, typeval, type_varname, typeval_varname):
	agi.set_variable(type_varname, type)

	if type == 'endcall' or type == 'application' or type == 'schedule' or type == 'sound' or type == 'custom':
		agi.set_variable(typeval_varname, typeval)
	elif type == 'user':
		cursor.query("SELECT ${columns} FROM userfeatures WHERE id = %s", ('number',), (typeval,))
		res = cursor.fetchone()

		if not res:
			dp_break("Database inconsistency: unable to find linked destination user '%s'" % typeval)

		agi.set_variable(typeval_varname, res['number'])
	elif type == 'group':
		cursor.query("SELECT ${columns} FROM groupfeatures WHERE id = %s", ('number',), (typeval,))
		res = cursor.fetchone()

		if not res:
			dp_break("Database inconsistency: unable to find linked destination group '%s'" % typeval)

		agi.set_variable(typeval_varname, res['number'])
	elif type == 'queue':
		cursor.query("SELECT ${columns} FROM queuefeatures WHERE id = %s", ('number',), (typeval,))
		res = cursor.fetchone()

		if not res:
			dp_break("Database inconsistency: unable to find linked destination queue'%s'" % typeval)

		agi.set_variable(typeval_varname, res['number'])
	elif type == 'meetme':
		cursor.query("SELECT ${columns} FROM meetmefeatures WHERE id = %s", ('number',), (typeval,))
		res = cursor.fetchone()

		if not res:
			dp_break("Database inconsistency: unable to find linked destination conference room'%s'" % typeval)

		agi.set_variable(typeval_varname, res['number'])
	else:
		dp_break("Unknown dial status destination type '%s'" % type)

# Cursors have a weak reference on their connection, so make a strong one.
conn = db_connect()
cursor = conn.cursor()
id = sys.argv[1]

cursor.query("SELECT ${columns} FROM schedule WHERE id = %s AND linked = 1 AND commented = 0",
             ('timebeg', 'timeend', 'daynamebeg', 'daynameend', 'daynumbeg', 'daynumend', 'monthbeg', 'monthend', 'typetrue', 'typevaltrue', 'typefalse', 'typevalfalse'),
             (id,))
res = cursor.fetchone()

if not res:
	dp_break("Invalid schedule ID '%s'" % id)

agi.set_variable("XIVO_SCHEDULE_TIMERANGE", forgetime(res))
setvars(res['typetrue'], res['typevaltrue'], 'XIVO_SCHEDULE_TYPETRUE', 'XIVO_SCHEDULE_TYPEVALTRUE')
setvars(res['typefalse'], res['typevalfalse'], 'XIVO_SCHEDULE_TYPEFALSE', 'XIVO_SCHEDULE_TYPEVALFALSE')

agi.verbose('AGI script "%s" successfully executed' % sys.argv[0])
