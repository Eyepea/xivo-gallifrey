#!/usr/bin/python
#
# Authors : Sylvain Boily, Guillaume Knispel, Richard Braun
#	   Proformatique
#	   67, rue Voltaire
#	   92800 PUTEAUX
#	   (+33/0)1.41.38.99.60
#	   mailto:technique@proformatique.com
#	   (C) 2007 Proformatique

__version__ = "$Revision$ $Date$"
__license__ = """
    Copyright (C) 2007, Proformatique

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

CONFIG_FILE = '/etc/asterisk/xivo_agi.conf'

import xivo.to_path

import sys
import anysql
import except_tb
from BackSQL import backsqlite
from BackSQL import backmysql
import ConfigParser
from ConfigDict import *
from agi import *

# TODO: put that somewhere else ...
DB_USERFEATURES = 'userfeatures'
DB_USERFEATURES_ID = 0
DB_USERFEATURES_PROTOCOL = 1
DB_USERFEATURES_NAME = 5
DB_USERFEATURES_NUMBER = 6
DB_USERFEATURES_RINGSECONDS = 9
DB_USERFEATURES_SIMULTCALLS = 10
DB_USERFEATURES_ENABLEVOICEMAIL = 13
DB_USERFEATURES_ENABLEXFER = 14
DB_USERFEATURES_ENABLEAUTOMON = 15
DB_USERFEATURES_CALLRECORD = 16
DB_USERFEATURES_CALLFILTER = 17
DB_USERFEATURES_ENABLEDND = 18
DB_USERFEATURES_ENABLEUNC = 19
DB_USERFEATURES_DESTUNC = 20
DB_USERFEATURES_ENABLERNA = 21
DB_USERFEATURES_DESTRNA = 22
DB_USERFEATURES_ENABLEBUSY = 23
DB_USERFEATURES_DESTBUSY = 24
DB_USERFEATURES_MUSICONHOLD = 25

DB_GROUPFEATURES = 'groupfeatures'
DB_GROUPFEATURES_NUMBER = 2

DB_QUEUEFEATURES = 'queuefeatures'
DB_QUEUEFEATURES_NUMBER = 2

DB_MEETMEFEATURES = 'meetmefeatures'
DB_MEETMEFEATURES_NUMBER = 2

DB_SCHEDULE = 'schedule'
DB_SCHEDULE_TIMEBEG = 2
DB_SCHEDULE_TIMEEND = 3
DB_SCHEDULE_DAYNAMEBEG = 4
DB_SCHEDULE_DAYNAMEEND = 5
DB_SCHEDULE_DAYNUMBEG = 6
DB_SCHEDULE_DAYNUMEND = 7
DB_SCHEDULE_MONTHBEG = 8
DB_SCHEDULE_MONTHEND = 9
DB_SCHEDULE_TYPETRUE = 10
DB_SCHEDULE_TYPEVALTRUE = 11
DB_SCHEDULE_TYPEFALSE = 12
DB_SCHEDULE_TYPEVALFALSE = 13

options = { "db_uri" : "" }
conf_obj = ConfigParser.ConfigParser()
conf_obj.readfp(open(CONFIG_FILE))
FillDictFromConfigSection(options, conf_obj, "db")

agi = AGI()

def dp_break(message, show_tb = False):
	agi.verbose(message)

	if show_tb:
		except_tb.log_exception(agi.verbose)

	agi.hangup()
	sys.exit(1)

def db_connect():
	try:
		conn = anysql.connect_by_uri(options['db_uri'])
	except:
		dp_break("Unable to connect to %s" % options['db_uri'], True)

	return conn

def forgetimefield(start, end, includesep = False):
	if start == '*':
		timestr = '*'
	else:
		if end == '':
			timestr = '%s' % start
		else:
			timestr = '%s-%s' % (start, end)

	if includesep:
		return ',%s' % timestr
	else:
		return timestr

def forgetime(res):
	timebeg = res[DB_SCHEDULE_TIMEBEG]
	timeend = res[DB_SCHEDULE_TIMEEND]
	daynamebeg = res[DB_SCHEDULE_DAYNAMEBEG]
	daynameend = res[DB_SCHEDULE_DAYNAMEEND]
	daynumbeg = res[DB_SCHEDULE_DAYNUMBEG]
	daynumend = res[DB_SCHEDULE_DAYNUMEND]
	monthbeg = res[DB_SCHEDULE_MONTHBEG]
	monthend = res[DB_SCHEDULE_MONTHEND]

	timestr = forgetimefield(timebeg, timeend)
	timestr += forgetimefield(daynamebeg, daynameend, True)
	timestr += forgetimefield(daynumbeg, daynumend, True)
	timestr += forgetimefield(monthbeg, monthend, True)
	return timestr

def setvars(type, typeval, type_varname, typeval_varname):
	agi.set_variable(type_varname, type)

	if type == 'endcall' or type == 'application' or type == 'schedule' or type == 'sound' or type == 'custom':
		agi.set_variable(typeval_varname, typeval)
	elif type == 'user':
		cursor.execute("SELECT * FROM %s WHERE id = '%s'" % (DB_USERFEATURES, typeval))
		res = cursor.fetchone()

		if not res:
			dp_break("Database inconsistency: unable to find linked destination user '%s'" % typeval)

		agi.set_variable(typeval_varname, res[DB_USERFEATURES_NUMBER])
	elif type == 'group':
		cursor.execute("SELECT * FROM %s WHERE id = '%s'" % (DB_GROUPFEATURES, typeval))
		res = cursor.fetchone()

		if not res:
			dp_break("Database inconsistency: unable to find linked destination group '%s'" % typeval)

		agi.set_variable(typeval_varname, res[DB_GROUPFEATURES_NUMBER])
	elif type == 'queue':
		cursor.execute("SELECT * FROM %s WHERE id = '%s'" % (DB_QUEUEFEATURES, typeval))
		res = cursor.fetchone()

		if not res:
			dp_break("Database inconsistency: unable to find linked destination queue'%s'" % typeval)

		agi.set_variable(typeval_varname, res[DB_QUEUEFEATURES_NUMBER])
	elif type == 'meetme':
		cursor.execute("SELECT * FROM %s WHERE id = '%s'" % (DB_MEETMEFEATURES, typeval))
		res = cursor.fetchone()

		if not res:
			dp_break("Database inconsistency: unable to find linked destination conference room'%s'" % typeval)

		agi.set_variable(typeval_varname, res[DB_MEETMEFEATURES_NUMBER])
	else:
		dp_break("Unknown dial status destination type '%s'" % type)

# Cursors have a weak reference on their connection, so make a strong one.
conn = db_connect()
cursor = conn.cursor()
id = sys.argv[1]

cursor.execute("SELECT * FROM %s WHERE id = '%s' AND linked = 1 AND commented = 0" % (DB_SCHEDULE, id))
res = cursor.fetchone()

if not res:
	dp_break("Invalid schedule ID '%s'" % id)

agi.set_variable("XIVO_SCHEDULE_TIMERANGE", forgetime(res))
setvars(res[DB_SCHEDULE_TYPETRUE], res[DB_SCHEDULE_TYPEVALTRUE], 'XIVO_SCHEDULE_TYPETRUE', 'XIVO_SCHEDULE_TYPEVALTRUE')
setvars(res[DB_SCHEDULE_TYPEFALSE], res[DB_SCHEDULE_TYPEVALFALSE], 'XIVO_SCHEDULE_TYPEFALSE', 'XIVO_SCHEDULE_TYPEVALFALSE')

agi.verbose('AGI script "%s" successfully executed' % sys.argv[0])
