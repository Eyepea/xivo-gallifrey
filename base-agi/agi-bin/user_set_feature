#!/usr/bin/python

__version__ = "$Revision$ $Date$"
__license__ = """
    Copyright (C) 2006, 2007, 2008  Proformatique

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA..
"""

import sys
from xivo import agi_helpers
from xivo import xivo_helpers

agi = agi_helpers.agi_get_session()
cursor = xivo_helpers.db_connect().cursor()
srcnum = agi.get_variable('REAL_SRCNUM')
context = agi.get_variable('REAL_CONTEXT')

custom_query = False
query = "UPDATE userfeatures SET"
params = []

redir_type = sys.argv[1]

if redir_type == "unc":
	enableunc = int(sys.argv[2])
	query += " enableunc = %s"
	params.append(enableunc)

	if enableunc:
		destunc = sys.argv[3]
	else:
		destunc = ""

	query += ", destunc = %s"
	params.append(destunc)
elif redir_type == "rna":
	enablerna = int(sys.argv[2])
	query += " enablerna = %s"
	params.append(enablerna)

	if enablerna:
		destrna = sys.argv[3]
	else:
		destrna = ""

	query += ", destrna = %s"
	params.append(destrna)
elif redir_type == "busy":
	enablebusy = int(sys.argv[2])
	query += " enablebusy = %s"
	params.append(enablebusy)

	if enablebusy:
		destbusy = sys.argv[3]
	else:
		destbusy = ""

	query += ", destbusy = %s"
	params.append(destbusy)
elif redir_type == "vm":
	cursor.query("SELECT ${columns} FROM userfeatures "
                     "WHERE number = %s "
                     "AND context = %s "
                     "AND internal = 0 "
                     "AND commented = 0",
                     ('enablevoicemail',),
                     (srcnum, context))
	res = cursor.fetchone()

	if not res:
		agi_helpers.dp_break("Unknown number '%s'" % srcnum)

	if res['enablevoicemail']:
		enablevoicemail = 0
	else:
		enablevoicemail = 1

	query += " enablevoicemail = %s"
	params.append(enablevoicemail)
	agi.set_variable('XIVO_VMENABLED', enablevoicemail)
elif redir_type == "dnd":
	cursor.query("SELECT ${columns} FROM userfeatures "
                     "WHERE number = %s "
                     "AND context = %s "
                     "AND internal = 0 "
                     "AND commented = 0",
                     ('enablednd',),
                     (srcnum, context))
	res = cursor.fetchone()

	if not res:
		agi_helpers.dp_break("Unknown number '%s'" % srcnum)

	if res['enablednd']:
		enablednd = 0
	else:
		enablednd = 1

	query += " enablednd = %s"
	params.append(enablednd)
	agi.set_variable('XIVO_DNDENABLED', enablednd)
elif redir_type == "callrecord":
	cursor.query("SELECT ${columns} FROM userfeatures "
                     "WHERE number = %s "
                     "AND context = %s "
                     "AND internal = 0 "
                     "AND commented = 0",
                     ('callrecord',),
                     (srcnum, context))
	res = cursor.fetchone()

	if not res:
		agi_helpers.dp_break("Unknown number '%s'" % srcnum)

	if res['callrecord']:
		callrecord = 0
	else:
		callrecord = 1

	query += " callrecord = %s"
	params.append(callrecord)
	agi.set_variable('XIVO_CALLRECORDENABLED', callrecord)
elif redir_type == "callfilter":
	cursor.query("SELECT ${columns} FROM userfeatures "
                     "WHERE number = %s "
                     "AND context = %s "
                     "AND internal = 0 "
                     "AND commented = 0",
                     ('callfilter',),
                     (srcnum, context))
	res = cursor.fetchone()

	if not res:
		agi_helpers.dp_break("Unknown number '%s'" % srcnum)

	if res['callfilter']:
		callfilter = 0
	else:
		callfilter = 1

	query += " callfilter = %s"
	params.append(callfilter)
	agi.set_variable('XIVO_CALLFILTERENABLED', callfilter)
elif redir_type == "bsfilter":
	custom_query = True

	try:
        	num1, num2 = sys.argv[2].split('*')
	except ValueError:
		agi_helpers.dp_break("Invalid number")

	secretary = None

	# Both the boss and secretary numbers are passed, so select the one
	# we don't already know.
	if srcnum == num1:
		number = num2
	elif srcnum == num2:
		number = num1
	else:
		agi_helpers.dp_break("Invalid number")

	try:
		# First, suppose the caller is a secretary and the number is
		# one of its bosses number.
		try:
			bsf = agi_helpers.BSFilter(cursor, number, context)
			caller_type = "secretary"
			secretary_number = srcnum

		# If it fails, suppose the caller is the boss and the number is
		# one of its secretaries number.
		except LookupError:
			bsf = agi_helpers.BSFilter(cursor, srcnum, context)
			caller_type = "boss"
			secretary_number = number

		secretary = bsf.get_secretary(secretary_number)

	# If all tries fail, give up.
	except LookupError:
		pass

	if secretary:
		agi.verbose("Filter exists ! Caller is %s, secretary number is %s" % (caller_type, secretary_number))
		cursor.query("SELECT ${columns} FROM callfiltermember "
                             "WHERE callfilterid = %s "
                             "AND type = %s "
                             "AND typeval = %s "
                             "AND bstype = %s",
                             ('active',),
                             (bsf.id, "user", secretary.userid, "secretary"))
		res = cursor.fetchone()

		if not res:
			agi_helpers.dp_break("Unable to find secretary, userid = %d" % secretary.userid)

		new_state = int(not res['active'])
		cursor.query("UPDATE callfiltermember SET active = %s "
                             "WHERE callfilterid = %s "
                             "AND type = %s "
                             "AND typeval = %s "
                             "AND bstype = %s",
                             parameters = (new_state, bsf.id, "user", secretary.userid, "secretary"))

		if cursor.rowcount != 1:
			agi_helpers.dp_break("Unable to perform the requested update")

		agi.set_variable('XIVO_BSFILTERENABLED', new_state)
	else:
		agi_helpers.dp_break("Unable to find boss-secretary filter")
else:
	agi_helpers.dp_break("Unknown forwarding type '%s'" % redir_type)

if not custom_query:
	query += " WHERE number = %s AND context = %s"
	params.append(srcnum)
	params.append(context)
	cursor.query(query, parameters = params)

	if cursor.rowcount != 1:
		agi_helpers.dp_break("Unable to perform the requested update")

conn.commit()
agi.verbose('AGI script "%s" successfully executed' % sys.argv[0])
