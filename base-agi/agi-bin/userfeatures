#!/usr/bin/python
#
# Authors : Sylvain Boily, Guillaume Knispel, Richard Braun
#	   Proformatique
#	   67, rue Voltaire
#	   92800 PUTEAUX
#	   (+33/0)1.41.38.99.60
#	   mailto:technique@proformatique.com
#	   (C) 2007 Proformatique

# TODO: Filter commented SQL rows

__version__ = "$Revision$ $Date$"
__license__ = """
    Copyright (C) 2007, Proformatique

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

CONFIG_FILE = '/etc/asterisk/xivo_agi.conf'

import xivo.to_path

import sys
import anysql
import except_tb
from BackSQL import backsqlite
from BackSQL import backmysql
import ConfigParser
from ConfigDict import *
from agi import *

options = { "db_uri" : "" }
conf_obj = ConfigParser.ConfigParser()
conf_obj.readfp(open(CONFIG_FILE))
FillDictFromConfigSection(options, conf_obj, "db")

agi = AGI()

def dp_break(message, show_tb = False):
	agi.verbose(message)

	if show_tb:
		except_tb.log_exception(agi.verbose)

	agi.hangup()
	sys.exit(1)

def db_connect():
	try:
		conn = anysql.connect_by_uri(options['db_uri'])
	except:
		dp_break("Unable to connect to %s" % options['db_uri'], True)

	return conn

def setvars(type, typeval, type_varname, typeval_varname):
	agi.set_variable(type_varname, type)

	if type == 'endcall' or type == 'application' or type == 'schedule' or type == 'sound' or type == 'custom':
		agi.set_variable(typeval_varname, typeval)
	elif type == 'user':
		cursor.query("SELECT ${columns} FROM userfeatures WHERE id = %s", ('number',), (typeval,))
		res = cursor.fetchone()

		if not res:
			dp_break("Database inconsistency: unable to find linked destination user '%s'" % typeval)

		agi.set_variable(typeval_varname, res['number'])
	elif type == 'group':
		cursor.query("SELECT ${columns} FROM groupfeatures WHERE id = %s", ('number',), (typeval,))
		res = cursor.fetchone()

		if not res:
			dp_break("Database inconsistency: unable to find linked destination group '%s'" % typeval)

		agi.set_variable(typeval_varname, res['number'])
	elif type == 'queue':
		cursor.query("SELECT ${columns} FROM queuefeatures WHERE id = %s", ('number',), (typeval,))
		res = cursor.fetchone()

		if not res:
			dp_break("Database inconsistency: unable to find linked destination queue'%s'" % typeval)

		agi.set_variable(typeval_varname, res['number'])
	elif type == 'meetme':
		cursor.query("SELECT ${columns} FROM meetmefeatures WHERE id = %s", ('number',), (typeval,))
		res = cursor.fetchone()

		if not res:
			dp_break("Database inconsistency: unable to find linked destination conference room'%s'" % typeval)

		agi.set_variable(typeval_varname, res['number'])
	else:
		dp_break("Unknown dial status destination type '%s'" % type)

def ds_setvars(id, status, type_varname, typeval_varname):
	cursor.query("SELECT ${columns} FROM dialstatus WHERE status = %s AND category = %s AND categoryval = %s AND linked = 1",
                     ('type', 'typeval'),
                     (status, 'user', id))
	res = cursor.fetchone()

	if not res:
		return

	setvars(res['type'], res['typeval'], type_varname, typeval_varname)

# Cursors have a weak reference on their connection, so make a strong one.
conn = db_connect()
cursor = conn.cursor()
number = agi.get_variable('REAL_EXTEN')
context = agi.get_variable('REAL_CONTEXT')

cursor.query("SELECT ${columns} FROM userfeatures WHERE number = %s AND context = %s",
             ('id', 'protocol' , 'name', 'ringseconds', 'simultcalls', 'enablevoicemail', 'enablexfer', 'enableautomon', 'callrecord', 'callfilter', 'enablednd', 'enableunc', 'destunc', 'enablerna', 'destrna', 'enablebusy', 'destbusy', 'musiconhold'),
             (number, context))
res = cursor.fetchone()

if not res:
	dp_break("Unknown number '%s'" % number)

agi.set_variable('XIVO_PROTOCOL', res['protocol'])
agi.set_variable('XIVO_NAME', res['name'])
agi.set_variable('XIVO_SIMULTCALLS', res['simultcalls'])

if res['ringseconds'] > 0:
	agi.set_variable('XIVO_RINGSECONDS', res['ringseconds'])

agi.set_variable('XIVO_ENABLEDND', res['enablednd'])
agi.set_variable('XIVO_ENABLEVOICEMAIL', res['enablevoicemail'])

calloptions = ''

if res['enablexfer'] == 1:
	calloptions += 't'

if res['enableautomon'] == 1:
	calloptions += 'w'

agi.set_variable('XIVO_CALLOPTIONS', calloptions)

if res['enableunc'] == 1:
	agi.set_variable('XIVO_FWD_TYPEUNC', 'user')
	agi.set_variable('XIVO_FWD_TYPEVALUNC', res['destunc'])

if res['enablebusy'] == 1:
	agi.set_variable('XIVO_FWD_TYPEBUSY', 'user')
	agi.set_variable('XIVO_FWD_TYPEVALBUSY', res['destbusy'])

else:
	ds_setvars(res['id'], 'busy', 'XIVO_FWD_TYPEBUSY', 'XIVO_FWD_TYPEVALBUSY')

if res['enablerna'] == 1:
	agi.set_variable('XIVO_FWD_TYPERNA', 'user')
	agi.set_variable('XIVO_FWD_TYPEVALRNA', res['destrna'])

else:
	ds_setvars(res['id'], 'noanswer', 'XIVO_FWD_TYPERNA', 'XIVO_FWD_TYPEVALRNA')

ds_setvars(res['id'], 'congestion', 'XIVO_FWD_TYPECONGESTION', 'XIVO_FWD_TYPEVALCONGESTION')
ds_setvars(res['id'], 'chanunavail', 'XIVO_FWD_TYPEUNAVAIL', 'XIVO_FWD_TYPEVALUNAVAIL')
agi.set_variable('XIVO_CALLRECORD', res['callrecord'])

# TODO: Check these ones.
agi.set_variable('XIVO_CALLFILTER', res['callfilter'])
agi.set_variable('XIVO_MUSICONHOLD', res['musiconhold'])

agi.verbose('AGI script "%s" successfully executed' % sys.argv[0])
