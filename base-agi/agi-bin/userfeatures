#!/usr/bin/python
#
# Authors : Sylvain Boily, Guillaume Knispel
#           Proformatique
#           67, rue Voltaire
#           92800 PUTEAUX
#           (+33/0)1.41.38.99.60
#           mailto:technique@proformatique.com
#           (C) 2007 Proformatique
#

__version__ = "$Revision$ $Date$"
__license__ = """
    Copyright (C) 2007, Proformatique

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

CONFIG_FILE = '/etc/asterisk/xivo_agi.conf'

import xivo.to_path

import sys
import anysql
from BackSQL import backsqlite
from BackSQL import backmysql
import ConfigParser
from ConfigDict import *
from agi import *

options = { "db_uri" : "" }
conf_obj = ConfigParser.ConfigParser()
conf_obj.readfp(open(CONFIG_FILE))
FillDictFromConfigSection(options, conf_obj, "db")

def set_features_value(var, family, key, context, user):
	if not family:
		family = context + '/users/' + user 
	else:
		family = context + '/users/' + user + '/' + family

	try:
		v = agi.database_get(family, key)
		agi.set_variable(var, v)
	except:
		pass

def find_informations_for_user(exten, context):
	try:
		conn = anysql.connect_by_uri(options['db_uri'])
	except:
	        agi.verbose("Unable to connect to %s" %options['db_uri'])
        	raise

        query = "SELECT protocol,protocolid,ringseconds,simultcalls,musiconhold FROM userfeatures WHERE number='%s' and context='%s'" %(exten, context)
	cursor = conn.cursor()
        cursor.execute(query)
        r = cursor.fetchone()

        if r:
                proto = r[0]
		protoid = r[1]
                ringcall = r[2]
                nbcall = r[3]
		moh = r[4]

		try:
			query = "SELECT name FROM usersip WHERE id=%d" % int(protoid)
			cursor.execute(query)
			n = cursor.fetchone()
			name = n[0]
		except:
			agi.verbose("Error no name !", "invalid")

		try:
			query = "SELECT groupfeatures.name FROM usergroup,groupfeatures WHERE userid='%d';" % int(protoid)
			cursor.execute(query)
			d = cursor.fetchone()
			queuename = d[0]
		except:
			queuename = 0

		if not name:
			agi.verbose("Error user not found!")
		else:
			res = (proto, nbcall, ringcall, queuename, name, moh)

                return res

	agi.verbose("Error user not found!")


agi = AGI()

user = agi.get_variable('MACRO_EXTEN')
context = agi.get_variable('MACRO_CONTEXT')

res = find_informations_for_user(user, context)

set_features_value('DND', '', 'DND', context, user)
set_features_value('VMStatus', '', 'VM', context, user)
set_features_value('FUStatus', 'FWD/Unc', 'Status', context, user)
set_features_value('FUNumber', 'FWD/Unc', 'Number', context, user)
set_features_value('FBStatus', 'FWD/Busy', 'Status', context, user)
set_features_value('FBNumber', 'FWD/Busy', 'Number', context, user)
set_features_value('FRStatus', 'FWD/RNA', 'Status', context, user)
set_features_value('FRNumber', 'FWD/RNA', 'Number', context, user)
set_features_value('RCStatus', '', 'Record', context, user)
set_features_value('CSStatus', '', 'Screen', context, user)

agi.set_variable('PROTO', '%s' % res[0])
agi.set_variable('NBC', '%s' % res[1])

if res[2] == 0:
        agi.set_variable('NBS', '')
else:
        agi.set_variable('NBS', '%s' % res[2])

agi.set_variable('QUEUENAME', '%s' % res[3])
agi.set_variable('NAME', '%s' % res[4])
agi.set_variable('MOH', '%s' % res[5])

if not res[0]:
	agi.appexec('GOTO', '%s|s|CHANUNAVAIL' % agi.get_variable('CONTEXT'))

