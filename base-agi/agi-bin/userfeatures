#!/usr/bin/python
#
# Authors : Sylvain Boily, Guillaume Knispel
#           Proformatique
#           67, rue Voltaire
#           92800 PUTEAUX
#           (+33/0)1.41.38.99.60
#           mailto:technique@proformatique.com
#           (C) 2007 Proformatique
#

__version__ = "$Revision$ $Date$"
__license__ = """
    Copyright (C) 2007, Proformatique

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

CONFIG_FILE = '/etc/asterisk/xivo_agi.conf'
CONFIG_LIB_PATH = 'py_lib_path'
DEBUG = 0

import sys
from xivo import ConfigPath
from xivo.ConfigPath import *

try:
        InsertPathListSys(SortedValuesFromConfigSection(CONFIG_FILE, CONFIG_LIB_PATH))
except NoSectionError, s:
        print >> sys.stderr, "WARNING: Section [%s] apparently missing from configuration file %s" % (CONFIG_LIB_PATH, CONFIG_FILE)

import anysql
from BackSQL import backsqlite
from BackSQL import backmysql
import ConfigParser
from ConfigDict import *

options = { "db_uri" : "" }
conf_obj = ConfigParser.ConfigParser()
conf_obj.readfp(open(CONFIG_FILE))
FillDictFromConfigSection(options, conf_obj, "db")

import string, re

def print_verbose(txt):
        if DEBUG:
                sys.stderr.write("VERBOSE \"%s\"\n" %txt)
		sys.stderr.flush()
                sys.stdout.write("VERBOSE \"%s\"\n" %txt)
		sys.stdout.flush()
		line = sys.stdin.readline().strip()

def return_exit(error, playback=None):
        print_verbose("%s" % error)
        if playback:
                print "EXEC PLAYBACK \"%s\"" % playback
        sys.exit()

def find_informations_by_extension(exten):
	try:
		conn = anysql.connect_by_uri(options['db_uri'])
	except:
		print "VERBOSE \"Error to connect %s\" %options['db_uri']"
		sys.exit()

	cursor = conn.cursor()
        query = "select * from userfeatures where number='%s'" %(exten)
        print_verbose("%s" %query)
        cursor.execute(query)

        r = cursor.fetchone()

        if r:

		id = r[2]
                proto = r[1]
                nbcall = r[11]
                ringcall = r[9]
		moh = r[13]

		try:
			query = "select name from usersip where id=%d" % int(id)
			cursor.execute(query)

			n = cursor.fetchone()

			name = n[0]
		except:
			return_exit("Error no name !", "invalid")

		try:
			query = "select groupfeatures.name from usergroup,groupfeatures where userid='%d';" % int(id)
			cursor.execute(query)

			d = cursor.fetchone()

			queuename = d[0]
		except:
			queuename = 0

		if not name:
			return_exit("Error user not found!")
		else:
			res = (proto, nbcall, ringcall, queuename, name, moh)

                return res

	return_exit("Error user not found!")

def find_features_db(exten, family, key, comment):
	sys.stderr.write("DATABASE GET users/%s%s %s\n" %(exten, family, key))
	sys.stderr.flush()
	sys.stdout.write("DATABASE GET users/%s%s %s\n" %(exten, family, key))
	sys.stdout.flush()
	line = sys.stdin.readline().strip()

	try:
		if '200' not in line:
			sys.stderr.write("FAIL (%s)\n" % line)
			sys.stderr.flush()
			print_verbose("Wrong return " + line)
		else:
			sys.stderr.write("PASS (%s)\n" % line)
			sys.stderr.flush()
			res = line.split('(')[1]
			value = res.split(')')[0]
			print_verbose(value)
			return value
	except:
		print_verbose("No features found !")
		return 0


if len(sys.argv) == 2:
	pass
else:
        return_exit("len argument not ok")

env=""
while(env != "\n"):
	env = sys.stdin.readline()


VMStatus = find_features_db(sys.argv[1], '', 'VM', 'Voicemail Souscription Status')
DND = find_features_db(sys.argv[1], '', 'DND', 'Do Not Disturb')
FUStatus = find_features_db(sys.argv[1], '/FWD/Unc', 'Status', 'Forward Inconditionel Status')
FUNumber = find_features_db(sys.argv[1], '/FWD/Unc', 'Number', 'Forward Inconditionel Number')
FBStatus = find_features_db(sys.argv[1], '/FWD/Busy', 'Status', 'Forward Busy Status')
FBNumber = find_features_db(sys.argv[1], '/FWD/Busy', 'Number', 'Forward Busy Number')
FRStatus = find_features_db(sys.argv[1], '/FWD/RNA', 'Status', 'Forward RNA Status')
FRNumber = find_features_db(sys.argv[1], '/FWD/RNA', 'Number', 'Forward RNA Number')
LDNumber = find_features_db(sys.argv[1], '', 'LDNumber', 'Last Dial Number')
LCNumber = find_features_db(sys.argv[1], '', 'LCNumber', 'Last Calling Number')
RCStatus = find_features_db(sys.argv[1], '', 'Record', 'Last Record Number')
FFStatus= find_features_db(sys.argv[1], '', 'FindMe', 'Find Me Status')
CSStatus= find_features_db(sys.argv[1], '', 'Screen', 'Screen Number')

res = find_informations_by_extension(sys.argv[1])
print "SET VARIABLE VMStatus %s" % VMStatus
print "SET VARIABLE DND %s" % DND
print "SET VARIABLE FUStatus %s" % FUStatus
print "SET VARIABLE FUNumber %s" % FUNumber
print "SET VARIABLE FBStatus %s" % FBStatus
print "SET VARIABLE FBNumber %s" % FBNumber
print "SET VARIABLE FRStatus %s" % FRStatus
print "SET VARIABLE FRNumber %s" % FRNumber
print "SET VARIABLE LDNumber %s" % LDNumber
print "SET VARIABLE LCNumber %s" % LCNumber
print "SET VARIABLE RCStatus %s" % RCStatus
print "SET VARIABLE FFStatus %s" % FFStatus
print "SET VARIABLE CSStatus %s" % CSStatus
print "SET VARIABLE PROTO %s" %res[0]
print "SET VARIABLE NBC %s" %res[1]
print "SET VARIABLE NBS %s" %res[2]
print "SET VARIABLE QUEUENAME %s" %res[3]
print "SET VARIABLE NAME %s" %res[4]
print "SET VARIABLE MOH %s" %res[5]
