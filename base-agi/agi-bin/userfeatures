#!/usr/bin/python
#
# Authors : Sylvain Boily, Guillaume Knispel
#           Proformatique
#           67, rue Voltaire
#           92800 PUTEAUX
#           (+33/0)1.41.38.99.60
#           mailto:technique@proformatique.com
#           (C) 2007 Proformatique
#

__version__ = "$Revision$ $Date$"
__license__ = """
    Copyright (C) 2007, Proformatique

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

CONFIG_FILE = '/etc/asterisk/xivo_agi.conf'
CONFIG_LIB_PATH = 'py_lib_path'

import sys
from xivo import ConfigPath
from xivo.ConfigPath import *
ConfiguredPathHelper(CONFIG_FILE, CONFIG_LIB_PATH)
import anysql
from BackSQL import backsqlite
from BackSQL import backmysql
import ConfigParser
from ConfigDict import *
from agi import *

options = { "db_uri" : "" }
conf_obj = ConfigParser.ConfigParser()
conf_obj.readfp(open(CONFIG_FILE))
FillDictFromConfigSection(options, conf_obj, "db")

import string, re

def return_exit(error, playback=None):
        agi_verbose("%s" % error)
        if playback:
                agi_exec("PLAYBACK", "%s" % playback)
        sys.exit()

def find_informations_by_extension(exten, context):
	try:
		conn = anysql.connect_by_uri(options['db_uri'])
	except:
	        agi_verbose("Unable to connect to %s" %options['db_uri'])
        	raise

	# XXX TODO BUGBUG FIXME SATAN: will bug one day... at least I know the future... (Xilun - 2007-06-15)
        query = "SELECT * FROM userfeatures WHERE number='%s' and context='%s'" %(exten, context)
	cursor = conn.cursor()
        cursor.execute(query)

        r = cursor.fetchone()

        if r:
		# XXX TODO BUGBUG FIXME SATAN: will bug one day... at least I know the future... (Xilun - 2007-06-15)
		idblah = r[2]
                proto = r[1]
                nbcall = r[11]
                ringcall = r[9]
		moh = r[13]

		try:
			query = "SELECT name FROM usersip WHERE id=%d" % int(idblah)
			cursor.execute(query)

			n = cursor.fetchone()

			name = n[0]
		except:
			return_exit("Error no name !", "invalid")

		try:
			query = "SELECT groupfeatures.name FROM usergroup,groupfeatures WHERE userid='%d';" % int(idblah)
			print query
			cursor.execute(query)

			d = cursor.fetchone()

			queuename = d[0]
		except:
			queuename = 0

		if not name:
			return_exit("Error user not found!")
		else:
			res = (proto, nbcall, ringcall, queuename, name, moh)

                return res

	return_exit("Error user not found!")

def find_features_db(exten, family, key, comment, context):
	sys.stderr.write("DATABASE GET %s/users/%s%s %s\n" %(context, exten, family, key))
	sys.stderr.flush()
	sys.stdout.write("DATABASE GET %s/users/%s%s %s\n" %(context, exten, family, key))
	sys.stdout.flush()
	line = sys.stdin.readline().strip()

	try:
		if '200' not in line:
			sys.stderr.write("FAIL (%s)\n" % line)
			sys.stderr.flush()
			agi_verbose("Wrong return " + line)
		else:
			sys.stderr.write("PASS (%s)\n" % line)
			sys.stderr.flush()
			res = line.split('(')[1]
			value = res.split(')')[0]
			return value
	except:
		return 0


if len(sys.argv) != 3:
        return_exit("len argument not ok")

env=""
while(env != "\n"):
	env = sys.stdin.readline()

context = sys.argv[2]

VMStatus = find_features_db(sys.argv[1], '', 'VM', 'Voicemail Souscription Status', context)
DND = find_features_db(sys.argv[1], '', 'DND', 'Do Not Disturb', context)
FUStatus = find_features_db(sys.argv[1], '/FWD/Unc', 'Status', 'Forward Inconditionel Status', context)
FUNumber = find_features_db(sys.argv[1], '/FWD/Unc', 'Number', 'Forward Inconditionel Number', context)
FBStatus = find_features_db(sys.argv[1], '/FWD/Busy', 'Status', 'Forward Busy Status', context)
FBNumber = find_features_db(sys.argv[1], '/FWD/Busy', 'Number', 'Forward Busy Number', context)
FRStatus = find_features_db(sys.argv[1], '/FWD/RNA', 'Status', 'Forward RNA Status', context)
FRNumber = find_features_db(sys.argv[1], '/FWD/RNA', 'Number', 'Forward RNA Number', context)
LDNumber = find_features_db(sys.argv[1], '', 'LDNumber', 'Last Dial Number', context)
LCNumber = find_features_db(sys.argv[1], '', 'LCNumber', 'Last Calling Number', context)
RCStatus = find_features_db(sys.argv[1], '', 'Record', 'Last Record Number', context)
FFStatus= find_features_db(sys.argv[1], '', 'FindMe', 'Find Me Status', context)
CSStatus= find_features_db(sys.argv[1], '', 'Screen', 'Screen Number', context)
ISCHANMOBILELOGGED= find_features_db(sys.argv[1], '/AG', 'logged', '', context)
CHANMOBILEAGENT= find_features_db(sys.argv[1], '/AG', 'chan', '', context)

res = find_informations_by_extension(sys.argv[1], context)
agi_set_variable("VMStatus", "%s" % VMStatus)
agi_set_variable("DND", "%s" % DND)
agi_set_variable("FUStatus", "%s" % FUStatus)
agi_set_variable("FUNumber", "%s" % FUNumber)
agi_set_variable("FBStatus", "%s" % FBStatus)
agi_set_variable("FBNumber", "%s" % FBNumber)
agi_set_variable("FRStatus", "%s" % FRStatus)
agi_set_variable("FRNumber", "%s" % FRNumber)
agi_set_variable("LDNumber", "%s" % LDNumber)
agi_set_variable("LCNumber", "%s" % LCNumber)
agi_set_variable("RCStatus", "%s" % RCStatus)
agi_set_variable("FFStatus", "%s" % FFStatus)
agi_set_variable("CSStatus", "%s" % CSStatus)
agi_set_variable("PROTO", "%s" %res[0])
agi_set_variable("NBC", "%s" %res[1])
agi_set_variable("NBS", "%s" %res[2])
agi_set_variable("QUEUENAME", "%s" %res[3])
agi_set_variable("NAME", "%s" %res[4])
agi_set_variable("MOH", "%s" %res[5])
agi_set_variable("CHANMOBILEAGENT", "%s" % CHANMOBILEAGENT)
agi_set_variable("ISCHANMOBILELOGGED", "%s" % ISCHANMOBILELOGGED)
