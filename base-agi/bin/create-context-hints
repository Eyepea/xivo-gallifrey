#!/usr/bin/python
 
__version__ = "$Revision$ $Date$"
__license__ = """
    Copyright (C) 2007, 2008  Proformatique

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    version 2 as published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA
"""

CONFIG_FILE = "/etc/asterisk/xivo_agi.conf"
CONFIG_CONTEXT_TEMPLATE = "/etc/asterisk/xivo_context.conf"

import xivo.to_path

import sys
import ConfigDict
import OrderedConf
import anysql
import xivo_helpers
from BackSQL import backsqlite
from BackSQL import backmysql

db_uri = ConfigDict.ReadSingleKey(CONFIG_FILE, 'db', 'db_uri')
conn = anysql.connect_by_uri(db_uri)
cursor = conn.cursor()

# In extenumbers, there are some lines where context is
#   '': this is a global entity, whereas this script only computes local things
#   'incall-extensions': describes a DID, cannot describe a user
cursor.query("SELECT ${columns} FROM extenumbers WHERE context NOT IN ('', 'incall-extensions') GROUP BY context", ('context',))
res = cursor.fetchall()

if not res:
	# No context time to exit
	sys.exit()

# /!\ Do not change the path before asking everybody in the office /!\
config = OrderedConf.OrderedRawConf(filename=CONFIG_CONTEXT_TEMPLATE)

if config.has_conflicting_section_names():
	raise ValueError, CONFIG_CONTEXT_TEMPLATE + " has conflicting section names"

if not config.has_section('template'):
	raise ValueError, "Template section doesn't exist"

for (context,) in res:
	print "[" + context + "]"
	cursor.query("SELECT ${columns} FROM userfeatures "
                     "WHERE context = %s "
                     "AND IFNULL(number,'') != '' "
                     "AND enablehint = 1",
                     ('number', 'protocol', 'protocolid', 'name'),
                     (context,))
	res2 = cursor.fetchall()

	for row in res2:
		number = row['number']
		protocol = row['protocol']
		protocolid = row['protocolid']
		name = row['name']

		if protocol in ("sip", "iax"):
			interface = protocol.upper() + "/" + name
		elif protocol == "custom":
			cursor.query("SELECT ${columns} FROM usercustom "
                                     "WHERE id = %s "
                                     "AND commented = 0 "
                                     "AND category = 'user'",
                                     ('interface',),
                                     (protocolid,))
			res2 = cursor.fetchone()

			if not res2:
				raise ValueError, "Database inconsistency: unable to find custom user (name = '%s', context = '%s')" % (name, context)

			interface = res2['interface']
		else:
			raise ValueError, "Unknown protocol '%s'" % protocol

		print "exten = " + str(number) + ",hint," + str(interface)

	# Ewww. The following query is a closure of one in provisioning/xivo_provisioning/autoprov.py.
	query = ("SELECT ${columns} FROM userfeatures INNER JOIN phonefunckey "
                 "ON userfeatures.context = %s "
                 "AND userfeatures.id = phonefunckey.iduserfeatures "
                 "AND phonefunckey.typeextenumbers = 'extenfeatures' "
                 "AND phonefunckey.typevalextenumbers = 'bsfilter' "
                 "AND phonefunckey.typeextenumbersright = 'user' "
                 "AND phonefunckey.supervision = 1 "
                 "LEFT OUTER JOIN extenumbers AS extenumleft "
                 "ON extenumleft.type = 'extenfeatures' "
                 "AND extenumleft.typeval = 'bsfilter' "
                 "LEFT OUTER JOIN extenumbers AS extenumright "
                 "ON phonefunckey.typeextenumbersright = extenumright.type "
                 "AND phonefunckey.typevalextenumbersright = extenumright.typeval "
                 "WHERE IFNULL(userfeatures.number,'') != ''")
	cursor.query(query,
                     ('extenumleft.exten', 'phonefunckey.exten', 'extenumright.exten', 'userfeatures.number'),
                     (context,))
	res2 = cursor.fetchall()
	extens = set(xivo_helpers.speed_dial_key_extension(row['extenumleft.exten'], row['extenumright.exten'],
                                                           row['phonefunckey.exten'], row['userfeatures.number'], True)
                     for row in res2)

	for exten in extens:
		print "exten = " + exten + ",hint,DS/" + exten

	if config.has_section(context):
		section_name = context
	else:
		section_name = 'template'

	for option in config.iter_options(section_name):
		print option.get_name() + ' = ' + option.get_value().replace('%%CONTEXT%%',context)
