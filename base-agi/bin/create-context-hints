#!/usr/bin/python
#
# Authors : Sylvain Boily, Guillaume Knispel
#           Proformatique
#           67, rue Voltaire
#           92800 PUTEAUX
#           (+33/0)1.41.38.99.60
#           mailto:technique@proformatique.com
#           (C) 2007 Proformatique
#

__version__ = "$Revision$ $Date$"
__license__ = """
    Copyright (C) 2007, Proformatique

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

CONFIG_FILE = '/etc/asterisk/xivo_agi.conf'

import xivo.to_path

import sys
import anysql
import xivo_helpers
from BackSQL import backsqlite
from BackSQL import backmysql
import ConfigParser
from ConfigDict import *

options = { "db_uri" : "" }
conf_obj = ConfigParser.ConfigParser()
conf_obj.readfp(open(CONFIG_FILE))
FillDictFromConfigSection(options, conf_obj, "db")

import operator, string, ConfigParser

try:
        conn = anysql.connect_by_uri(options['db_uri'])
except: # XXX
        print "Error: Unable to connect to %s" %options['db_uri']
        raise

cursor = conn.cursor()
query = "SELECT ${columns} FROM extenumbers WHERE context NOT IN ('', 'incall-extensions') GROUP BY context"
columns = ('context',)
cursor.query(query, columns)

r = cursor.fetchall()

if not r:
	# No context time to exit
	sys.exit()

# This is the configuration file, please do not change the path because if was editable by xivo web interface
outcall = "/etc/asterisk/xivo_context.conf"

try:
        config = ConfigParser.ConfigParser()
        config.readfp(open(outcall))
except IOError:
        print "Error: Configuration file not found : %s" % outcall
        raise

if not config.has_section('template'):
	print "Error: Template section doesn't exist"
	sys.exit()

for context in r:
	print "[" + context[0] + "]"
	cursor.query("SELECT ${columns} FROM userfeatures "
                     "WHERE context = %s "
                     "AND enablehint = 1",
                     ('number', 'protocol', 'name'),
                     (context[0],))
	res = cursor.fetchall()
	for e in res:
		if e[0] and e[1] and e[2]:
			print "exten = " + str(e[0]) + ",hint," + str(e[1].upper()) + "/" + str(e[2])

	# Ewww. The following query is a closure of one in provisioning/xivo_provisioning/autoprov.py.
	query = ("SELECT ${columns} FROM userfeatures INNER JOIN phonefunckey "
                     "ON userfeatures.context = %s "
                     "AND userfeatures.id = phonefunckey.iduserfeatures "
                     "AND phonefunckey.typeextenumbers = 'extenfeatures' "
                     "AND phonefunckey.typevalextenumbers = 'bsfilter' "
                     "AND phonefunckey.typeextenumbersright = 'user' "
                     "AND phonefunckey.supervision = 1 "
                     "LEFT OUTER JOIN extenumbers AS extenumleft "
                     "ON extenumleft.type = 'extenfeatures' "
                     "AND extenumleft.typeval = 'bsfilter' "
                     "LEFT OUTER JOIN extenumbers AS extenumright "
                     "ON phonefunckey.typeextenumbersright = extenumright.type "
                     "AND phonefunckey.typevalextenumbersright = extenumright.typeval ")
	cursor.query(query,
                     ('extenumleft.exten', 'phonefunckey.exten', 'extenumright.exten', 'userfeatures.number'),
                     (context[0],))
	res = cursor.fetchall()
	extens = set(xivo_helpers.speed_dial_key_extension(row['extenumleft.exten'], row['extenumright.exten'],
                                                           row['phonefunckey.exten'], row['userfeatures.number'], True)
                     for row in res)

	for exten in extens:
		print "exten = " + exten + ",hint,DS/" + exten

	if config.has_section(context[0]):
		exten = config.items(context[0])
	else:
		exten = config.items('template')

	for line in sorted(exten, key=operator.itemgetter(0)):
		print string.replace(line[1],'%%CONTEXT%%',context[0])
	
	print "\r"
