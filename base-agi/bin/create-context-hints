#!/usr/bin/python
#
# Authors : Sylvain Boily, Guillaume Knispel
#           Proformatique
#           67, rue Voltaire
#           92800 PUTEAUX
#           (+33/0)1.41.38.99.60
#           mailto:technique@proformatique.com
#           (C) 2007 Proformatique
#

__version__ = "$Revision$ $Date$"
__license__ = """
    Copyright (C) 2007, Proformatique

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

CONFIG_FILE = '/etc/asterisk/xivo_agi.conf'

import xivo.to_path

import sys
import anysql
from BackSQL import backsqlite
from BackSQL import backmysql
import ConfigParser
from ConfigDict import *

options = { "db_uri" : "" }
conf_obj = ConfigParser.ConfigParser()
conf_obj.readfp(open(CONFIG_FILE))
FillDictFromConfigSection(options, conf_obj, "db")

import operator, string

try:
        conn = anysql.connect_by_uri(options['db_uri'])
except: # XXX
        print "Error: Unable to connect to %s" %options['db_uri']
        raise

cursor = conn.cursor()
query = "SELECT context FROM extenumbers WHERE context NOT IN('general','global','hints','initconfig','did-extensions') GROUP BY context"
cursor.execute(query)

r = cursor.fetchall()

if not r:
	# No context time to exit
	sys.exit()

# This is the configuration file, please do not change the path because if was editable by xivo web interface
outcall = "/etc/asterisk/xivo_context.conf"

try:
        config = ConfigParser.ConfigParser()
        config.readfp(open(outcall))
except IOError:
        print "Error: Configuration file not found : %s" % outcall
        raise

if not config.has_section('template'):
	print "Error: Template section doesn't exist"
	sys.exit()

for context in r:
	print "[" + context[0] + "]"
	query = "SELECT number,protocol,name FROM userfeatures WHERE context='%s'" % context[0]
	cursor.execute(query)
	r = cursor.fetchall()
	for e in r:
		if e[0] and e[1] and e[2]:
			print "exten = " + str(e[0]) + ",hint," + str(e[1].upper()) + "/" + str(e[2])

	if config.has_section(context[0]):
		exten = config.items(context[0])
	else:
		exten = config.items('template')

	for line in sorted(exten, key=operator.itemgetter(0)):
		print string.replace(line[1],'%%CONTEXT%%',context[0])
	
	print "\r"
