#!/usr/bin/python
#
# Authors : Sylvain Boily, Guillaume Knispel
#           Proformatique
#           67, rue Voltaire
#           92800 PUTEAUX
#           (+33/0)1.41.38.99.60
#           mailto:technique@proformatique.com
#           (C) 2007 Proformatique
#

__version__ = "$Revision: 599 $ $Date: 2007-05-15 14:56:15 +0200 (mar, 15 mai 2007) $"
__license__ = """
    Copyright (C) 2007, Proformatique

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

CONFIG_FILE = '/etc/asterisk/xivo_agi.conf'
CONFIG_LIB_PATH = 'py_lib_path'

import sys
from xivo import ConfigPath
from xivo.ConfigPath import *

try:
	InsertPathListSys(SortedValuesFromConfigSection(CONFIG_FILE, CONFIG_LIB_PATH))
except NoSectionError, s:
	print >> sys.stderr, "WARNING: Section [%s] apparently missing from configuration file %s" % (CONFIG_LIB_PATH, CONFIG_FILE)

import anysql
from BackSQL import backsqlite
from BackSQL import backmysql
import ConfigParser
from ConfigDict import *

options = { "db_uri" : "" }
conf_obj = ConfigParser.ConfigParser()
conf_obj.readfp(open(CONFIG_FILE))
FillDictFromConfigSection(options, conf_obj, "db")

import string

try:
	exten = int(sys.argv[1])
except:
	print "VERBOSE \"Error no args found!\""
	sys.exit()

try:
	conn = anysql.connect_by_uri(options['db_uri'])
except:
	print "VERBOSE \"Error to connect %s\" %options['db_uri']"
	sys.exit()

cursor = conn.cursor()
query = "select type,typeid from didfeatures where number=%d" % exten
cursor.execute(query)
t = cursor.fetchone()


if not t:
	print "VERBOSE \"No SDA found !\""
	sys.exit()

type = t[0]
typeid = t[1]

if type == 'custom':
	(apps, args) = t.custom.split('(')
	(args, noargs) = args.split(')')
	args = string.replace(args,',','|')
	print "ANSWER"
	print "EXEC %s \"%s\"" %(apps, args)

if type == 'meetme':
	query = "select number from meetmefeatures where id=%d" % t[1]
	cursor.execute(query)
	m = cursor.fetchone()
	num = int(m[0])
	query = "select context,number from extenumbers where number=%d and context!='did-extensions'" % num
	cursor.execute(query)
	g = cursor.fetchone()
	context = g[0]
	number = g[1]
	print "ANSWER"
	print "EXEC GOTO \"%s|%s|1\"" %(context,number)

if type == 'user':
	query = "select number from userfeatures where id=%d" % typeid
	cursor.execute(query)
	u = cursor.fetchone()
	number = u[0]
	num = int(number)
	query = "select context,number from extenumbers where number=%d and context!='did-extensions'" % num
	cursor.execute(query)
	g = cursor.fetchone()
	context = g[0]
	number = g[1]
	print "ANSWER"
	print "EXEC GOTO \"%s|%s|1\"" %(context,number)

if type == 'group':
	query = "select context,number from groupfeatures where id=%d and context!='did-extensions'" % typeid
	cursor.execute(query)
	g = cursor.fetchone()
	context = g[0]
	number = g[1]
	print "ANSWER"
	print "EXEC GOTO \"%s|%s|1\"" %(context,number)
