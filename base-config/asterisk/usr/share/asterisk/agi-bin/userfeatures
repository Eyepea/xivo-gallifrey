#!/usr/bin/python

import sqlite, re, sys

DB = '/var/lib/asterisk/astsqlite'
DEBUG = 1

def print_verbose(txt):
        if DEBUG:
                sys.stderr.write("VERBOSE \"%s\"\n" %txt)
		sys.stderr.flush()
                sys.stdout.write("VERBOSE \"%s\"\n" %txt)
		sys.stdout.flush()
		line = sys.stdin.readline().strip()

def return_exit(error, playback=None):
        print_verbose("%s" % error)
        if playback:
                print "EXEC PLAYBACK \"%s\"" % playback
        sys.exit()

def find_informations_by_extension(exten):
        conn = sqlite.connect(DB)
        cursor = conn.cursor()
        query = "select * from userfeatures where name='%s'" %(exten)
        print_verbose("%s" %query)
        cursor.execute(query)

        r = cursor.fetchone()

        if r:
		id = r.protocolid
                proto = r.protocol
                nbcall = r.simultcalls
                ringcall = r.ringseconds
		moh = r.musiconhold

		try:
			query = "select name from usersip where id=%d" % int(id)
			cursor.execute(query)

			n = cursor.fetchone()

			name = n.name
		except:
			return_exit("Error no name !", "invalid")

		query = "select * from usergroup where userid=%d" % int(id)
		cursor.execute(query)

		d = cursor.fetchone()

		try:
			query = "select * from groupfeatures where id=%d and disable=0" % int(d.groupid)
			cursor.execute(query)

			e = cursor.fetchone()

			queuename = e.name

		except:
			queuename = 0

		res = (proto, nbcall, ringcall, queuename, name, moh)

                return res

        return None

def find_features_db(exten, family, key, comment):
	sys.stderr.write("DATABASE GET users/%s%s %s\n" %(exten, family, key))
	sys.stderr.flush()
	sys.stdout.write("DATABASE GET users/%s%s %s\n" %(exten, family, key))
	sys.stdout.flush()
	line = sys.stdin.readline().strip()

	try:
		if '200' not in line:
			sys.stderr.write("FAIL (%s)\n" % line)
			sys.stderr.flush()
			print_verbose("Wrong return " + line)
		else:
			sys.stderr.write("PASS (%s)\n" % line)
			sys.stderr.flush()
			#print_verbose(comment + " : " + line)
			res = line.split('(')[1]
			value = res.split(')')[0]
			print_verbose(value)
			return value
	except:
		print_verbose("No features found !")
		return 0


if len(sys.argv) == 2:
        #print_verbose("len argument ok")
	pass
else:
        return_exit("len argument not ok")

env=""
while(env != "\n"):
	env = sys.stdin.readline()


VMStatus = find_features_db(sys.argv[1], '', 'VM', 'Voicemail Souscription Status')
DND = find_features_db(sys.argv[1], '', 'DND', 'Do Not Disturb')
FUStatus = find_features_db(sys.argv[1], '/FWD/Unc', 'Status', 'Forward Inconditionel Status')
FUNumber = find_features_db(sys.argv[1], '/FWD/Unc', 'Number', 'Forward Inconditionel Number')
FBStatus = find_features_db(sys.argv[1], '/FWD/Busy', 'Status', 'Forward Busy Status')
FBNumber = find_features_db(sys.argv[1], '/FWD/Busy', 'Number', 'Forward Busy Number')
FRStatus = find_features_db(sys.argv[1], '/FWD/RNA', 'Status', 'Forward RNA Status')
FRNumber = find_features_db(sys.argv[1], '/FWD/RNA', 'Number', 'Forward RNA Number')
LDNumber = find_features_db(sys.argv[1], '', 'LDNumber', 'Last Dial Number')
LCNumber = find_features_db(sys.argv[1], '', 'LCNumber', 'Last Calling Number')
RCStatus = find_features_db(sys.argv[1], '', 'Record', 'Last Record Number')
FFStatus= find_features_db(sys.argv[1], '', 'FindMe', 'Find Me Status')
CSStatus= find_features_db(sys.argv[1], '', 'Screen', 'Screen Number')

res = find_informations_by_extension(sys.argv[1])
print "SET VARIABLE VMStatus %s" % VMStatus
print "SET VARIABLE DND %s" % DND
print "SET VARIABLE FUStatus %s" % FUStatus
print "SET VARIABLE FUNumber %s" % FUNumber
print "SET VARIABLE FBStatus %s" % FBStatus
print "SET VARIABLE FBNumber %s" % FBNumber
print "SET VARIABLE FRStatus %s" % FRStatus
print "SET VARIABLE FRNumber %s" % FRNumber
print "SET VARIABLE LDNumber %s" % LDNumber
print "SET VARIABLE LCNumber %s" % LCNumber
print "SET VARIABLE RCStatus %s" % RCStatus
print "SET VARIABLE FFStatus %s" % FFStatus
print "SET VARIABLE CSStatus %s" % CSStatus
print "SET VARIABLE PROTO %s" %res[0]
print "SET VARIABLE NBC %s" %res[1]
print "SET VARIABLE NBS %s" %res[2]
print "SET VARIABLE QUEUENAME %s" %res[3]
print "SET VARIABLE NAME %s" %res[4]
print "SET VARIABLE MOH %s" %res[5]
