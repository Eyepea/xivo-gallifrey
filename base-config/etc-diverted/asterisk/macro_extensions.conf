; report the status of all user features from AstDB among those:
;   FWD/Unc, RWD/RNA, FWD/Busy, VM, DND, Screen, Record
;   
; params:
;   arg1 = AstDB key to user feature
;   arg2 = set 1 to say the forwarded number (can be empty)
;   arg3 = AstDB key to the forwarde number (can be empty)
;
[macro-checkdbfeatures]
exten = s,1,NoOp(checkdb)
exten = s,n,GotoIf(${DB(${MACRO_CONTEXT}/users/${CALLERID(num)}/${ARG1})}?on:off)
exten = s,n(on),Playback(on)
exten = s,n,GotoIf(${ARG2}?:end)
exten = s,n,Playback(to)
exten = s,n,SayDigits(${DB(${MACRO_CONTEXT}/users/${CALLERID(num)}/${ARG3})})
exten = s,n(end),MacroExit()
exten = s,n(off),Playback(off)
exten = s,n,MacroExit()

; enable or disable a user feature in AstDB among those:
;   FWD/Unc, RWD/RNA, FWD/Busy, VM, DND, Screen, Record
;
; params:
;   arg1 = AstDB key to user feature
;   arg2 = sound to play when enabled (can be empty)
;   arg3 = sound to play when diabled (can be empty)
;   arg4 = set 1 to disable feature
;
[macro-features]
exten = s,1,Answer()
exten = s,n(set),Set(USER=${CALLERID(num)})
exten = s,n,Wait(0.5)
exten = s,n,Macro(setval,ONOFF,${ARG1},Feature,${MACRO_CONTEXT})
exten = s,n,GotoIf(${ONOFF}?off:on)
exten = s,n(on),GotoIf(${ARG4}?off)
exten = s,n,Set(DB(${MACRO_CONTEXT}/users/${USER}/${ARG1})=1)
exten = s,n,Set(SOUND=${ARG2})
exten = s,n,GotoIf(${SOUND}?play:end)
exten = s,n(off),Set(DB(${MACRO_CONTEXT}/users/${USER}/${ARG1})=0)
exten = s,n,Set(SOUND=${ARG3})
exten = s,n,GotoIf(${SOUND}?play:end)
exten = s,n(play),Playback(${SOUND})
exten = s,n(end),MacroExit()

; fill in a variable with the named key in AstDB
; mostly used to keep track of users features
;
; params:
;   arg1 = variable to set
;   arg2 = feature to query
;   arg3 = ?
;   arg4 = related context
;
[macro-setval]
exten = s,1,Set($[${ARG1}]=${DB(${ARG4}/users/${USER}/${ARG2})})
exten = s,n,Noop(Verification de la clef : ${ARG4}/users/${USER}/${ARG2})
exten = s,n,Noop(${ARG3}: ${${ARG1}})
exten = s,n,Noop(${USER})

; dial a number on a Zapata channel
;
; params:
;   arg1 = number to dial
;
[macro-analog]
exten = s,1,Noop(Arrivee sur une ligne analogique)
exten = s,n,Dial(Zap/${ARG1})
exten = s,n,Hangup()

; receive a fax, record it in a spool dir and mail it to the adequate user
;
; params:
;   arg1: recipient extension
;
[macro-faxtomail]
exten = s,1,Set(FAXFILE=/var/spool/asterisk/fax/${UNIQUEID}.tif)
exten = s,n,RxFax(${FAXFILE})
exten = s,n,AGI(faxtomail,${CALLERID(num)},${FAXFILE},${ARG1})
exten = s,n,Hangup()

; record a new MOH and set it as the default one
; authentication is needed (pass: 1234)
;
[macro-musiqueattente]
exten = s,1,Answer()
exten = s,n,Wait(0.5)
exten = s,n,NoOp(Recuperation de la nouvelle musique attente)
exten = s,n,Authenticate(1234)
exten = s,n,Record(/usr/share/asterisk/moh/upload/musiqueattente.wav)
exten = s,n,System(/usr/sbin/asterisk -rx "moh reload")
exten = s,n,MusicOnHold(upload)
exten = s,n,Hangup()

; which ring melody should we use according to the call type?
;   (internal, external, group)
;
; ressources:
;   agi-bin/getring
; params:
;   arg1 = src_dialnum
;   arg2 = dst_dialnum
;
[macro-whocall]
exten = s,1,Set(LENNUM=${LEN(${ARG1})})
exten = s,n,AGI(getring,${ARG2})
;  check whether the dst number belongs to a group or not
exten = s,n,GotoIf($[ ${GROUP_COUNT(${ARG2})} != 0]?:checkgroup)
exten = s,n,Macro(nobeep)
exten = s,n(checkgroup),GotoIf($[ "${CALLGROUP}" = "1" ]?group:nogroup)
;  let's say an internal extension is maximum 5 digits long
exten = s,n(nogroup),GotoIf($[ ${LENNUM} < 6 ]?interne:externe)
exten = s,n(interne),NoOp(Appel interne : ${ARG1})
exten = s,n,Set(CALLTYPE=Appel interne)
exten = s,n,Macro(verifysipheader,${RINGINTERNAL})
exten = s,n,MacroExit()
exten = s,n(externe),NoOp(Appel externe : ${ARG1})
exten = s,n,Set(CALLTYPE=Appel externe)
exten = s,n,Macro(verifysipheader,${RINGEXTERNAL})
exten = s,n,MacroExit()
exten = s,n(group),NoOp(Appel de groupe : ${ARG1})
exten = s,n,Set(CALLTYPE=Appel de groupe)
exten = s,n,Macro(verifysipheader,${RINGGROUP})
exten = s,n,MacroExit()

; if ring melody should be set, modify SIP headers consequently
;
; params:
;   arg1 = ring_melody
;
[macro-verifysipheader]
exten = s,1,GotoIf(${SETRING}?noring:)
exten = s,n,SIPAddHeader("Alert-Info:<http://www.proformatique.com>\;info=${ARG1}")
exten = s,n,Set(SETRING=1)
exten = s,n(noring),MacroExit()

; send call-info for paging a phone via sip
;
[macro-page]
exten = s,1,Set(_ALERT_INFO="RA")
exten = s,n,SipAddHeader("Call-Info:\<sip:proformatique.com\>\;Answer-After=0")

; set distinctive ring with no bep if the phone Thomson branded
;
[macro-nobeep]
exten = s,1,GotoIf(${ISTHOMSON}?:break)
exten = s,n,GotoIf(${SETRING}?break:)
exten = s,n,SIPAddHeader("Alert-Info:<http://www.proformatique.com>\;info=Silent")
exten = s,n,Set(SETRING=1)
exten = s,n(break),MacroExit()

; macro for get features from web interface for meetme conference
;
; ressources:
;  agi-bin/meetmefeatures
;
[macro-supermeetme]
exten = s,1,AGI(meetmefeatures,${MACRO_EXTEN})
exten = s,n,Set(MEETME_RECORDINGFILE=/usr/share/asterisk/sounds/web-interface/recordings/meetme-conf-rec-${MACRO_EXTEN}-${EPOCH})
exten = s,n,MeetMe(${MACRO_EXTEN},${MEETMEOPTIONS})

; manage Direct Inward Dialing calls, and where to forward them from web interface
;
; ressources:
;   agi-bin/did
; params:
;   arg1 = did_num
;
[macro-superdid]
exten = s,1,NoOp(${MACRO_EXTEN})
exten = s,n,Macro(setcallerid)
exten = s,n,AGI(did,${MACRO_EXTEN})

; tasks to perform an outbound call: outgoing provider, method, caller-ID
;
; ressources:
;   agi-bin/outfeatures
;
[macro-superout]
exten = s,1,NoOp(Extern call : ${MACRO_EXTEN})
exten = s,n,AGI(outfeatures,${MACRO_EXTEN},${MACRO_CONTEXT},${CALLERID(num)})
exten = s,n,GotoIf($[ "${MACRO_EXTEN}" : "${EMERGENCYNUMBERS}" ]?emergency,1)
exten = s,n,GotoIf($[ "${MACRO_EXTEN}" : "${SPECIALNUMBERS}" ]?special,1)
exten = s,n,GotoIf(${PROVIDER}?:CHANUNAVAIL,1)
exten = s,n,Set(CALLNUMNOPREFIX=${MACRO_EXTEN:$[ ${LEN(${PREFIX})} + ${STRIPNUM}]})
exten = s,n,Set(CALLNUM=${EXTERNPREFIX}${CALLNUMNOPREFIX})
exten = s,n(setcallerid),GotoIf($[ "${SETCALLERID}" = "yes" ]?:nosetcallerid)
exten = s,n,Set(CALLERID(num)=${EXTERNNUM})
exten = s,n(nosetcallerid),GotoIf($[ "${USEENUM}" = "yes" ]?enum,1:dial)
exten = s,n(dial),Dial(${CHAN}/${CALLNUM},${TIMETOCALL},W)
exten = s,n,Goto(${DIALSTATUS},1)

exten = enum,1,NoOp(Enum call)
exten = enum,n,Set(ENUM=${ENUMLOOKUP(+33${CALLNUMNOPREFIX},ALL,1,e164.org)})
exten = enum,n,GotoIf(${ENUM}?:s,dial)
exten = enum,n,Set(CHAN=${CUT(ENUM,:,1)})
exten = enum,n,Set(CALLNUM=${CUT(ENUM,:,2)})
exten = enum,n,Goto(s,dial)

exten = emergency,1,NoOp(Emergency call)
exten = emergency,n,AGI(outfeatures,${EMERGENCYPROVIDER},,${CALLERID(num)})
exten = emergency,n,Dial(${CHAN}/${MACRO_EXTEN})
exten = emergency,n,Goto(${DIALSTATUS},1)

exten = special,1,NoOp(Special Call)
exten = special,n,AGI(outfeatures,${SPECIALPROVIDER})
exten = special,n,Dial(${CHAN}/${MACRO_EXTEN})
exten = special,n,Goto(${DIALSTATUS},1)

exten = NOANSWER,1,NoOp(NOANSWER)
exten = NOANSWER,n,MacroExit()
exten = BUSY,1,NoOp(BUSY)
exten = BUSY,n,MacroExit()
exten = CONGESTION,1,NoOp(CONGESTION)
exten = CONGESTION,n,MacroExit()
exten = CHANUNAVAIL,1,NoOp(CHANUNAVAIL)
exten = CHANUNAVAIL,n,MacroExit()

; incoming call logic (big one)
;
; ressources:
;   agi-bin/userfeatures
;   agi-bin/xivo_agent
;   agi-bin/xivo_push
;   agi-bin/groupfeatures
;
[macro-superuser]
exten = s,1,Wait(0.5)
exten = s,n,Set(USER=${MACRO_EXTEN})
;
; get user features, ring type and forward info to CTI server
;
exten = s,n,AGI(userfeatures,${MACRO_EXTEN},${MACRO_CONTEXT})
exten = s,n,AGI(boss-secretary,${NAME},${MACRO_CONTEXT},${CALLERID(num)})
exten = s,n,GotoIf(${PROTO}?:CHANUNAVAIL)
exten = s,n,AGI(xivo_agent,${NAME})
exten = s,n,GotoIf(${ORIGINATE_SRC}?:whocall)
exten = s,n,Set(CALLERID(num)=${ORIGINATE_SRC})
exten = s,n(whocall),Macro(whocall,${CALLERID(num)},${USER})
exten = s,n,Set(CALL=${CALLERID(num)})
exten = s,n,AGI(xivo_push|127.0.0.1|5002|${PROTO}|${NAME}|${CALLERID(num)}|${CALLTYPE})
exten = s,n,Set(GROUP()=${USER})
;
; look for mailbox status if we use SIP/IAX
;
exten = s,n,GotoIf($[ "${PROTO}" : "(sip|iax)" ]?box:nobox)
exten = s,n(nobox),Set(MAILBOX=0)
exten = s,n,Goto(status)
exten = s,n(box),GotoIf($[ "${PROTO}" = "sip" ]?sip:iax)
exten = s,n(sip),Set(MAILBOX=${SIPPEER(${NAME}:mailbox)})
exten = s,n,Goto(status)
exten = s,n(iax),Set(MAILBOX=${IAXPEER(${NAME}:mailbox)})
;
; dispatch call logic according to presence and features status
;   (presence: 0=available, 1=away, 2=dnd, 3=lunch, 4=brb)
;
exten = s,n(status),GotoIf($["${STATUS}" = "1"]?VMB)
exten = s,n,GotoIf($["${STATUS}" = "2"]?VMU)
exten = s,n,GotoIf($["${STATUS}" = "3"]?VMU)
exten = s,n,GotoIf($["${STATUS}" = "4"]?VMU)
exten = s,n,Gotoif(${FUStatus}?FU)
exten = s,n,Gotoif(${DND}?DND)
;
; record entire call if necessary
;
exten = s,n,Gotoif(${RCStatus}?Record:NoRecord)
exten = s,n(Record),Monitor(wav)
exten = s,n(NoRecord),Noop(No record)
;
; set call timeout if necessary
;
exten = s,n,GotoIf(${CALLTIME}?TIME:NOTIME)
exten = s,n(TIME),Set(TIMEOUT(absolute)=${CALLTIME})
exten = s,n(NOTIME),GotoIf(${MOH}?MOH:NOMOH)
exten = s,n(MOH),Set(MUSICCLASS()=${MOH}) 
exten = s,n(NOMOH),GotoIf($[${GROUP_COUNT(${USER})} > ${NBC}]?VMB)
exten = s,n,GotoIf($[ "${ISMOBILEAGENT}" = "yes" ]?:Screening)
exten = s,n,GotoIf(${ISCHANMOBILELOGGED}?AgentLogged:Screening)
exten = s,n,Goto(CallGroup)
exten = s,n(AgentLogged),GotoIf($[ "${CALLUSERANDAGENT}" = "yes" ]?:CallAgent)
exten = s,n,NoOp(Call to ${CHANMOBILEAGENT} and ${PROTO}/${NAME})
exten = s,n,Set(NAME=${NAME}&${CHANMOBILEAGENT})
exten = s,n,Goto(Screening)
exten = s,n(CallAgent),NoOp(Call to ${CHANMOBILEAGENT})
exten = s,n,Set(PROTO=${CUT(CHANMOBILEAGENT,/,1)})
exten = s,n,Set(NAME=${CUT(CHANMOBILEAGENT,/,2)})
exten = s,n(Screening),Gotoif(${CSStatus}?Screen:NoScreen)
exten = s,n(Screen),Dial(${PROTO}/${NAME},${NBS},ptTwW)
exten = s,n,Goto(CallGroup)
exten = s,n(NoScreen),Dial(${PROTO}/${NAME},${NBS},tTwW)
exten = s,n(CallGroup),GotoIf(${CALLGROUP}?BREAK)
exten = s,n,GotoIf(${QUEUENAME}?:DIALSTATUS)
exten = s,n,Set(__CALLGROUP=1)
exten = s,n,Set(CALLERID(num)=${CALL})
exten = s,n,AGI(groupfeatures,${QUEUENAME})
exten = s,n,Queue(${QUEUENAME},rn,,,${GTIMEOUT})
exten = s,n,Set(__CALLGROUP=0)
exten = s,n(DIALSTATUS),Goto(${DIALSTATUS})
exten = s,n,Hangup()
;
; no answer, if FwdRNA is set forward the call, otherwise jump to voicemail
;
exten = s,n(NOANSWER),GotoIf(${VMStatus}?:NoMail)
exten = s,n,GotoIf(${FRStatus}?FR)
exten = s,n,GotoIf($[${GROUP_COUNT("${USER}")} > 1 ]?VMB:VMU)

exten = s,n(ANSWER),Hangup()

exten = s,n(CANCEL),Hangup()

exten = s,n(DONTCALL),Playback(fr/extra/user-invalid)
exten = s,n,Hangup()

exten = s,n(CONGESTION),GotoIf(${VMStatus}?VMB:NoMail)

exten = s,n(TORTURE),Hangup()

exten = s,n(CHANUNAVAIL),Playback(fr/extra/user-invalid)
exten = s,n,Congestion(5)
exten = s,n,Hangup()

;
; if FwdBusy status is set, forward the call, otherwise jump to voicemail
;
exten = s,n(BUSY),GotoIf(${FBStatus}?FB)
exten = s,n,Goto(VMB)

;
; if Voicemail is enabled, jump to it
;
exten = s,n(DND),GotoIf(${VMStatus}?VMU)
exten = s,n,Goto(NoMail)

exten = s,n(FU),Set(FWDNumber=${FUNumber})
exten = s,n,Goto(Forward)

exten = s,n(FB),Set(FWDNumber=${FBNumber})
exten = s,n,Goto(Forward)

exten = s,n(FR),Set(FWDNumber=${FRNumber})
exten = s,n,Goto(Forward)

;
; all forwarded calls go there
;
exten = s,n(Forward),Set(FWDContext=${MACRO_CONTEXT})
exten = s,n(Forward),Dial(Local/${FWDNumber}@${FWDContext})

exten = s,n(DND),GotoIf(${VMStatus}?VMU)

;
; user is unreachable and no voicemail is enabled
;
exten = s,n(NoMail),Answer()
exten = s,n,Wait(0.5)
exten = s,n,Playback(fr/extra/user-invalid)
exten = s,n,Hangup()

;
; FwdUnc to voicemail
;
exten = s,n(VMU),GotoIf(${MAILBOX}?:NoMail)
exten = s,n,Answer()
exten = s,n,Wait(0.5)
exten = s,n(vm),VoiceMail(${MAILBOX},u)
exten = s,n,Hangup()

;
; FwdBusy to voicemail
;
exten = s,n(VMB),GotoIf(${MAILBOX}?:NoMail)
exten = s,n,Answer()
exten = s,n,Wait(0.5)
exten = s,n(vm),VoiceMail(${MAILBOX},b)
exten = s,n,Hangup()

exten = s,n(BREAK),MacroExit()

exten = a,1,NoOp(### Consultation Voicemail ${MAILBOX})
exten = a,n,VoiceMailMain(${MAILBOX})
exten = a,n,Hangup()


exten = i,1,Playback(fr/extra/user-invalid)
exten = i,n,Hangup()

exten = h,1,Hangup()

exten = T,1,NoOp(Call is finished because timeout is finished)
exten = T,n,Playback(vm-goodbye)

; get the call group information from SQL DB
; - if the group exists, queue the call
; - otherwise, notify the unconsistency
;
[macro-supergroup]
exten = s,1,AGI(groupfeatures,${MACRO_EXTEN})
exten = s,n,Set(__CALLGROUP=1)
exten = s,n,GotoIf(${GEXT}?CALLGROUP)
exten = s,n,Playback(fr/extra/user-invalid)
exten = s,n,Hangup()
exten = s,n(CALLGROUP),Queue(${GNAME},r)
exten = s,n,Hangup()

; set the callerID (text and num) if none is specified
;
; syntax:
;   CALLERID(all) = $text <$dial_num>
;
[macro-setcallerid]
exten = s,1,GotoIf($["${CALLERID(num)}" = ""]?:exit)
exten = s,n,Set(CALLERID(name)="Anonymous")
exten = s,n(exit),MacroExit()

; check if foward have a loop on forward
;
; ressources:
;  agi-bin/antiloops
[macro-antiloops]
exten = s,1,Agi(antiloops,${ARG1},${ARG2})
exten = s,n,GotoIf(${LOOP}?loop)
exten = s,n,MacroExit()
exten = s,n(loop),Playback(fr/extra/desole_erreur)
exten = s,n,Hangup()
