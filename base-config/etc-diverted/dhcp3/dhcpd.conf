server-identifier voip.xivo.local;
authoritative;

subnet 192.168.0.0 netmask 255.255.255.0 {
        range dynamic-bootp 192.168.0.140 192.168.0.199;
        option subnet-mask 255.255.255.0;
        option broadcast-address 192.168.0.255;
        option routers 192.168.0.254;
        one-lease-per-client on;
        default-lease-time 14400;
        max-lease-time 14401;
        option ip-forwarding off;
        option time-offset -18000;

        log(binary-to-ascii(16,8,":",hardware));

        if substring(binary-to-ascii(16,8,":",hardware),0,9)="1:0:e:50:" {
                log("boot Thomson 1");
                option bootfile-name "Thomson/ST2030S";
        	next-server 192.168.0.254;
        }
        elsif substring(binary-to-ascii(16,8,":",hardware),0,10)="1:0:14:7f:" {
                log("boot Thomson 2");
                option bootfile-name "Thomson/ST2030S";
        	next-server 192.168.0.254;
        }
	elsif substring(binary-to-ascii(16,8,":",hardware),0,10)="1:0:18:f6:" {
		log("boot Thomson 3");
		option bootfile-name "Thomson/ST2030S";
		next-server 192.168.0.254;
	}
        elsif substring(binary-to-ascii(16,8,":",hardware),0,9)="1:0:4:13:" {
                log("boot Snom");
                option tftp-server-name "http://192.168.0.254:8667/";
                option bootfile-name "snom.php?mac={mac}";
        	next-server 192.168.0.254;
        }
        elsif substring(binary-to-ascii(16,8,":",hardware),0,8)="1:0:e:8:" {
                log("boot Linksys");
                option tftp-server-name "192.168.0.254";
                option bootfile-name "Linksys/spa962.cfg";
        	next-server 192.168.0.254;
	 }
        elsif substring(binary-to-ascii(16,8,":",hardware),0,9)="1:0:5:90:" {
		log("boot SwissVoice");
		option tftp-server-name "192.168.0.254";
		option bootfile-name "swupdate_ip10.inf";
        }
        elsif substring(binary-to-ascii(16,8,":",hardware),0,9)="1:0:4:f2:" {
                log("boot Polycom");
                option tftp-server-name "tftp://192.168.0.254/Polycom";
        }
        elsif substring(binary-to-ascii(16,8,":",hardware),0,10)="1:0:30:f1:" {
		log("unknown Clients");
                deny unknown-clients;
        }
}
