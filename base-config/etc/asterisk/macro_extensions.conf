; dial a number on a Zapata channel
;
; params:
;   arg1 = number to dial
;
[macro-analog]
exten = s,1,Noop(Arrivee sur une ligne analogique)
exten = s,n,Dial(Zap/${ARG1})
exten = s,n,Hangup()

exten = t,1,Hangup()

; receive a fax, record it in a spool dir and mail it to the adequate user
;
; params:
;   arg1: recipient extension
;
[macro-faxtomail]
exten = s,1,Set(FAXFILE=/var/spool/asterisk/fax/${UNIQUEID}.tif)
exten = s,n,RxFax(${FAXFILE},debug)
exten = s,n,AGI(faxtomail,${CALLERID(num)},${FAXFILE},${ARG1})
exten = s,n,Hangup()

; record a new MOH and set it as the default one
; authentication is needed (pass: 1234)
;
[macro-musiqueattente]
exten = s,1,Answer()
exten = s,n,Wait(0.5)
exten = s,n,NoOp(Recuperation de la nouvelle musique attente)
exten = s,n,Authenticate(1234)
exten = s,n,Record(/usr/share/asterisk/moh/upload/musiqueattente.wav)
exten = s,n,System(/usr/sbin/asterisk -rx "moh reload")
exten = s,n,MusicOnHold(upload)
exten = s,n,Hangup()

; which ring melody should we use according to the call type?
;   (internal, external, group)
;
; ressources:
;   agi-bin/getring
; params:
;   arg1 = src_dialnum
;   arg2 = dst_dialnum
;
[macro-whocall]
exten = s,1,Set(LENNUM=${LEN(${CALLERID(num)})})
exten = s,n,AGI(getring,${REAL_EXTEN})
;  check whether the dst number belongs to a group or not
exten = s,n,GotoIf($[${GROUP_COUNT(${REAL_EXTEN})} > 1]?:checkgroup)
exten = s,n,Macro(nobeep)
exten = s,n(checkgroup),GotoIf($[ "${CALLGROUP}" = "1" ]?group:nogroup)
;  let's say an internal extension is maximum 5 digits long
exten = s,n(nogroup),GotoIf($[ ${LENNUM} < 6 ]?interne:externe)
exten = s,n(interne),NoOp(Appel interne : ${CALLERID(num)})
exten = s,n,Set(CALLTYPE=Appel interne)
exten = s,n,Macro(verifysipheader,${RINGINTERNAL})
exten = s,n,MacroExit()
exten = s,n(externe),NoOp(Appel externe : ${CALLERID(num)})
exten = s,n,Set(CALLTYPE=Appel externe)
exten = s,n,Macro(verifysipheader,${RINGEXTERNAL})
exten = s,n,MacroExit()
exten = s,n(group),NoOp(Appel de groupe : ${CALLERID(num)})
exten = s,n,Set(CALLTYPE=Appel de groupe)
exten = s,n,Macro(verifysipheader,${RINGGROUP})
exten = s,n,MacroExit()

; if ring melody should be set, modify SIP headers consequently
;
; params:
;   arg1 = ring_melody
;
[macro-verifysipheader]
exten = s,1,GotoIf(${SETRING}?noring:)
exten = s,n,GotoIf(${ARG1}?:noring)
exten = s,n,SIPAddHeader("Alert-Info:<http://www.proformatique.com>\;info=${ARG1}")
exten = s,n,Set(SETRING=1)
exten = s,n(noring),MacroExit()

; send call-info for paging a phone via sip
;
[macro-page]
exten = s,1,Set(_ALERT_INFO="RA")
exten = s,n,SipAddHeader("Call-Info:\<sip:proformatique.com\>\;Answer-After=0")

; set distinctive ring with no bep if the phone Thomson branded
;
[macro-nobeep]
exten = s,1,GotoIf(${ISTHOMSON}?:break)
exten = s,n,GotoIf(${SETRING}?break:)
exten = s,n,SIPAddHeader("Alert-Info:<http://www.proformatique.com>\;info=Silent")
exten = s,n,Set(SETRING=1)
exten = s,n(break),MacroExit()

; macro for get features from web interface for meetme conference
;
; ressources:
;  agi-bin/meetmefeatures
;
[macro-supermeetme]
exten = s,1,AGI(meetmefeatures,${MACRO_EXTEN})
exten = s,n,Set(MEETME_RECORDINGFILE=/usr/share/asterisk/sounds/web-interface/recordings/meetme-conf-rec-${MACRO_EXTEN}-${EPOCH})
exten = s,n,MeetMe(${MACRO_EXTEN},${MEETMEOPTIONS})

; manage Direct Inward Dialing calls, and where to forward them from web interface
;
; ressources:
;   agi-bin/did
; params:
;   arg1 = did_num
;
[macro-superdid]
exten = s,1,NoOp(${MACRO_EXTEN})
exten = s,n,Macro(setcallerid)
exten = s,n,AGI(did,${MACRO_EXTEN})

; tasks to perform an outbound call: outgoing provider, method, caller-ID
;
; ressources:
;   agi-bin/outfeatures
;
[macro-superout]
exten = s,1,NoOp(Extern call : ${MACRO_EXTEN})
exten = s,n,AGI(outfeatures)
exten = s,n,GotoIf($[ "${MACRO_EXTEN}" : "${EMERGENCYNUMBERS}" ]?emergency,1)
exten = s,n,GotoIf($[ "${MACRO_EXTEN}" : "${SPECIALNUMBERS}" ]?special,1)
exten = s,n,GotoIf(${PROVIDER}?:CHANUNAVAIL,1)
exten = s,n,Set(CALLNUMNOPREFIX=${MACRO_EXTEN:$[ ${LEN(${PREFIX})} + ${STRIPNUM}]})
exten = s,n,Set(CALLNUM=${EXTERNPREFIX}${CALLNUMNOPREFIX})
exten = s,n,GotoIf($["${INTERNAL}" = "yes"]?nosetcallerid)
exten = s,n,GotoIf($["${SETCALLERID}" = "yes"]?:nosetcallerid)
exten = s,n,Set(CALLERID(num)=${EXTERNNUM})
exten = s,n(nosetcallerid),GotoIf($[ "${USEENUM}" = "yes" ]?enum,1:dial)
exten = s,n(dial),Dial(${CHAN}/${CALLNUM},${TIMETOCALL},W)
exten = s,n,Goto(${DIALSTATUS},1)

;
; if enum is set to yes we search at enum for voip number
;
exten = enum,1,NoOp(Enum call)
exten = enum,n,Set(ENUM=${ENUMLOOKUP(+33${CALLNUMNOPREFIX},ALL,1,e164.org)})
exten = enum,n,GotoIf(${ENUM}?:s,dial)
exten = enum,n,Set(CHAN=${CUT(ENUM,:,1)})
exten = enum,n,Set(CALLNUM=${CUT(ENUM,:,2)})
exten = enum,n,Goto(s,dial)

;
; for emergency number
;
exten = emergency,1,NoOp(Emergency call)
exten = emergency,n,AGI(outfeatures,${EMERGENCYPROVIDER})
exten = emergency,n,Dial(${CHAN}/${MACRO_EXTEN})
exten = emergency,n,Goto(${DIALSTATUS},1)

;
; for special number
;
exten = special,1,NoOp(Special Call)
exten = special,n,AGI(outfeatures,${SPECIALPROVIDER})
exten = special,n,Dial(${CHAN}/${MACRO_EXTEN})
exten = special,n,Goto(${DIALSTATUS},1)

;
; Dialstatus for the out call
;
exten = NOANSWER,1,NoOp(NOANSWER)
exten = NOANSWER,n,MacroExit()
exten = BUSY,1,NoOp(BUSY)
exten = BUSY,n,MacroExit()
exten = CONGESTION,1,NoOp(CONGESTION)
exten = CONGESTION,n,MacroExit()
exten = CHANUNAVAIL,1,NoOp(CHANUNAVAIL)
exten = CHANUNAVAIL,n,MacroExit()

; incoming call logic (big one)
;
; ressources:
;   agi-bin/userfeatures
;   agi-bin/xivo_push
;   agi-bin/groupfeatures
;   agi-bin/boss-secretary
;
; macro:
;   originate
;   whocall
;   get-status-aim
;   get-features
;   callgroup
[macro-superuser]
exten = s,1,Set(REAL_EXTEN=${MACRO_EXTEN})
exten = s,n,Set(REAL_CONTEXT=${MACRO_CONTEXT})
exten = s,n,Set(GROUP()=${REAL_EXTEN})
exten = s,n,Macro(originate)
exten = s,n,AGI(userfeatures)
exten = s,n,AGI(boss-secretary)
exten = s,n,Macro(whocall)
exten = s,n,AGI(xivo_push|127.0.0.1)
exten = s,n,Macro(get-status-aim)
exten = s,n,Macro(get-features)
exten = s,n,Dial(${XIVO_PROTOCOL}/${XIVO_NAME},${XIVO_RINGSECONDS},${XIVO_CALLOPTIONS})
exten = s,n,NoOp(DIALSTATUS=${DIALSTATUS})
exten = s,n,Goto(${DIALSTATUS})

exten = s,n(ANSWER),Hangup()

exten = s,n(CANCEL),Hangup()

exten = s,n(DONTCALL),Hangup()

exten = s,n(TORTURE),Hangup()

exten = s,n(NOANSWER),Macro(forward,RNA)
exten = s,n,Goto(voicemail)

exten = s,n(BUSY),Macro(forward,BUSY)
exten = s,n,Goto(voicemail)

exten = s,n(CONGESTION),Macro(forward,CONGESTION)
exten = s,n,Goto(voicemail)

exten = s,n(CHANUNAVAIL),Macro(forward,UNAVAIL)
exten = s,n,Goto(voicemail)

exten = s,n(voicemail),GotoIf(${XIVO_ENABLEVOICEMAIL}?:unreachable)
exten = s,n,MailboxExists(${REAL_EXTEN}@${REAL_CONTEXT})
exten = s,n,GotoIf($["${VMBOXEXISTSSTATUS}" = "SUCCESS"]?:unreachable)
exten = s,n,Voicemail(${REAL_EXTEN})
exten = s,n,Goto(end)
exten = s,n(unreachable),Playback(user_unreachable)
exten = s,n(end),Hangup()

[macro-forward]
exten = s,1,Set(XIVO_FWD_TYPE=${XIVO_FWD_TYPE${ARG1}})
exten = s,n,Set(XIVO_FWD_TYPEVAL=${XIVO_FWD_TYPEVAL${ARG1}})
exten = s,n,Goto(${XIVO_FWD_TYPE},1)

exten = endcall,1,Goto(${XIVO_FWD_TYPEVAL})
exten = endcall,n(none),MacroExit()
exten = endcall,n(hangup),Hangup()
exten = endcall,n(busy),Busy()
exten = endcall,n(congestion),Congestion()

exten = application,1,NoOp(Not implemented yet)

exten = user,1,Dial(Local/${XIVO_FWD_TYPEVAL}@${REAL_CONTEXT})
exten = user,n,NoOp("Hey, we've returned ! \\\\o o// _o/ \\o_ ,o, \\o/")

; TODO: macro
exten = group,1,NoOp(Not implemented yet)

; TODO: macro
exten = queue,1,NoOp(Not implemented yet)

; TODO: macro
exten = meetme,1,NoOp(Not implemented yet)

exten = schedule,1,AGI(schedule,${XIVO_FWD_TYPEVAL})
exten = schedule,n,GotoIfTime(${XIVO_SCHEDULE_TIMERANGE}?schedule_true)
exten = schedule,n(schedule_false),Set(XIVO_FWD_TYPE=${XIVO_SCHEDULE_TYPEFALSE})
exten = schedule,n,Set(XIVO_FWD_TYPEVAL=${XIVO_SCHEDULE_TYPEVALFALSE})
exten = schedule,n,Goto(${XIVO_FWD_TYPE},1)
exten = schedule,n(schedule_true),Set(XIVO_FWD_TYPE=${XIVO_SCHEDULE_TYPETRUE})
exten = schedule,n,Set(XIVO_FWD_TYPEVAL=${XIVO_SCHEDULE_TYPEVALTRUE})
exten = schedule,n,Goto(${XIVO_FWD_TYPE},1)

exten = sound,1,Playback(${XIVO_FWD_TYPEVAL})

exten = custom,1,Exec(${XIVO_FWD_TYPEVAL})

; get the call group information from SQL DB
; - if the group exists, queue the call
; - otherwise, notify the unconsistency
;
[macro-supergroup]
exten = s,1,AGI(groupfeatures,${MACRO_EXTEN})
exten = s,n,Set(__CALLGROUP=1)
exten = s,n,GotoIf(${GEXT}?CALLGROUP)
exten = s,n,Playback(user_unreachable)
exten = s,n,Hangup()
exten = s,n(CALLGROUP),Queue(${GNAME},r)
exten = s,n,Hangup()

; set the callerID (text and num) if none is specified
;
; syntax:
;   CALLERID(all) = $text <$dial_num>
;
[macro-setcallerid]
exten = s,1,AGI(callerid)
exten = s,n,MacroExit()

; check if foward have a loop on forward
;
; ressources:
;  agi-bin/antiloops
[macro-antiloops]
exten = s,1,Agi(antiloops,${ARG1},${ARG2})
exten = s,n,GotoIf(${LOOP}?loop)
exten = s,n,MacroExit()
exten = s,n(loop),Playback(error_sorry)
exten = s,n,Hangup()

[macro-get-status-aim]
;
; dispatch call logic according to presence and features status
;   (presence: 0=available, 1=away, 2=dnd, 3=lunch, 4=brb)
;
exten = s,1,GotoIf($["${STATUS}" = "0"]?exit:away)
exten = s,n(away),GotoIf($["${STATUS}" = "1"]?:dnd)
exten = s,n,Gosub(${MACRO_CONTEXT},s,vmbusy)
exten = s,n(dnd),GotoIf($["${STATUS}" = "2"]?:lunch)
exten = s,n,Gosub(${MACRO_CONTEXT},s,vmunavailable)
exten = s,n(lunch),GotoIf($["${STATUS}" = "3"]?:brb)
exten = s,n,Gosub(${MACRO_CONTEXT},s,vmunavailable)
exten = s,n(brb),GotoIf($["${STATUS}" = "4"]?:exit)
exten = s,n,Gosub(${MACRO_CONTEXT},s,vmunavailable)
exten = s,n(exit),MacroExit()

;
; get all features for an user
;
[macro-get-features]
exten = s,1,Set(LANGUAGE()=fr)
exten = s,n,Gotoif(${XIVO_ENABLEUNC}?:dnd)
exten = s,n,GoSub(${MACRO_CONTEXT},s,fwdunc)
exten = s,n(dnd),Gotoif(${XIVO_ENABLEDND}?:record)
exten = s,n,GoSub(${MACRO_CONTEXT},s,dnd)
exten = s,n(record),Gotoif(${XIVO_CALLRECORD}?:moh)
exten = s,n,Monitor(wav)
exten = s,n(moh),GotoIf(${XIVO_MUSICONHOLD}?:groupcount)
exten = s,n,Set(MUSICCLASS()=${XIVO_MUSICONHOLD})
exten = s,n(groupcount),GotoIf($[${GROUP_COUNT(${REAL_EXTEN})} > ${XIVO_SIMULTCALLS}]?:exit)
exten = s,n,GoSub(${MACRO_CONTEXT},s,vmbusy)
exten = s,n(exit),MacroExit()

;
; special macro for set callerid if is a thomson phone for xivoclient
;
[macro-originate]
exten = s,1,GotoIf(${ORIGINATE_SRC}?:exit)
exten = s,n,Set(CALLERID(num)=${ORIGINATE_SRC})
exten = s,n(exit),MacroExit()

;
; macro for callgroup
;
;  ressources:
;    groupfeatures
[macro-callgroup]
exten = s,1,GotoIf(${CALLGROUP}?exit)
exten = s,n,GotoIf(${QUEUENAME}?:exit)
exten = s,n,Set(__CALLGROUP=1)
exten = s,n,AGI(groupfeatures,${QUEUENAME})
exten = s,n,Queue(${QUEUENAME},rn,,,${GTIMEOUT})
exten = s,n,Set(__CALLGROUP=0)
exten = s,n(exit),MacroExit()

;
; Macro for call restriction
;
; ressources:
;   call-restrictions
[macro-call-restrictions]
exten = s,1,AGI(call-restrictions)
exten = s,n,GotoIf(${GRANTED}?exit)
exten = s,n,Authenticate(${PIN})
exten = s,n(exit),MacroExit()
