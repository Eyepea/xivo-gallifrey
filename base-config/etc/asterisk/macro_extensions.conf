; report the status of all user features from AstDB among those:
;   FWD/Unc, RWD/RNA, FWD/Busy, VM, DND, Screen, Record
;   
; params:
;   arg1 = AstDB key to user feature
;   arg2 = set 1 to say the forwarded number (can be empty)
;   arg3 = AstDB key to the forwarde number (can be empty)
;
[macro-checkdbfeatures]
exten = s,1,NoOp(checkdb)
exten = s,n,GotoIf(${DB(${MACRO_CONTEXT}/users/${CALLERID(num)}/${ARG1})}?on:off)
exten = s,n(on),Playback(on)
exten = s,n,GotoIf(${ARG2}?:end)
exten = s,n,Playback(to)
exten = s,n,SayDigits(${DB(${MACRO_CONTEXT}/users/${CALLERID(num)}/${ARG3})})
exten = s,n(end),MacroExit()
exten = s,n(off),Playback(off)
exten = s,n,MacroExit()

; enable or disable a user feature in AstDB among those:
;   FWD/Unc, RWD/RNA, FWD/Busy, VM, DND, Screen, Record
;
; params:
;   arg1 = AstDB key to user feature
;   arg2 = sound to play when enabled (can be empty)
;   arg3 = sound to play when diabled (can be empty)
;   arg4 = set 1 to disable feature
;
[macro-features]
exten = s,1,Answer()
exten = s,n(set),Set(USER=${CALLERID(num)})
exten = s,n,Wait(0.5)
exten = s,n,Macro(setval,ONOFF,${ARG1},Feature,${MACRO_CONTEXT})
exten = s,n,GotoIf(${ONOFF}?off:on)
exten = s,n(on),GotoIf(${ARG4}?off)
exten = s,n,Set(DB(${MACRO_CONTEXT}/users/${USER}/${ARG1})=1)
exten = s,n,Set(SOUND=${ARG2})
exten = s,n,GotoIf(${SOUND}?play:end)
exten = s,n(off),Set(DB(${MACRO_CONTEXT}/users/${USER}/${ARG1})=0)
exten = s,n,Set(SOUND=${ARG3})
exten = s,n,GotoIf(${SOUND}?play:end)
exten = s,n(play),Playback(${SOUND})
exten = s,n(end),MacroExit()

; fill in a variable with the named key in AstDB
; mostly used to keep track of users features
;
; params:
;   arg1 = variable to set
;   arg2 = feature to query
;   arg3 = ?
;   arg4 = related context
;
[macro-setval]
exten = s,1,Set($[${ARG1}]=${DB(${ARG4}/users/${USER}/${ARG2})})
exten = s,n,Noop(Verification de la clef : ${ARG4}/users/${USER}/${ARG2})
exten = s,n,Noop(${ARG3}: ${${ARG1}})
exten = s,n,Noop(${USER})

; dial a number on a Zapata channel
;
; params:
;   arg1 = number to dial
;
[macro-analog]
exten = s,1,Noop(Arrivee sur une ligne analogique)
exten = s,n,Dial(Zap/${ARG1})
exten = s,n,Hangup()

; receive a fax, record it in a spool dir and mail it to the adequate user
;
; params:
;   arg1: recipient extension
;
[macro-faxtomail]
exten = s,1,Set(FAXFILE=/var/spool/asterisk/fax/${UNIQUEID}.tif)
exten = s,n,RxFax(${FAXFILE},debug)
exten = s,n,AGI(faxtomail,${CALLERID(num)},${FAXFILE},${ARG1})
exten = s,n,Hangup()

; record a new MOH and set it as the default one
; authentication is needed (pass: 1234)
;
[macro-musiqueattente]
exten = s,1,Answer()
exten = s,n,Wait(0.5)
exten = s,n,NoOp(Recuperation de la nouvelle musique attente)
exten = s,n,Authenticate(1234)
exten = s,n,Record(/usr/share/asterisk/moh/upload/musiqueattente.wav)
exten = s,n,System(/usr/sbin/asterisk -rx "moh reload")
exten = s,n,MusicOnHold(upload)
exten = s,n,Hangup()

; which ring melody should we use according to the call type?
;   (internal, external, group)
;
; ressources:
;   agi-bin/getring
; params:
;   arg1 = src_dialnum
;   arg2 = dst_dialnum
;
[macro-whocall]
exten = s,1,Set(LENNUM=${LEN(${CALLERID(num)})})
exten = s,n,AGI(getring,${USER})
;  check whether the dst number belongs to a group or not
exten = s,n,GotoIf($[ ${GROUP_COUNT(${USER})} > 1]?:checkgroup)
exten = s,n,Macro(nobeep)
exten = s,n(checkgroup),GotoIf($[ "${CALLGROUP}" = "1" ]?group:nogroup)
;  let's say an internal extension is maximum 5 digits long
exten = s,n(nogroup),GotoIf($[ ${LENNUM} < 6 ]?interne:externe)
exten = s,n(interne),NoOp(Appel interne : ${CALLERID(num)})
exten = s,n,Set(CALLTYPE=Appel interne)
exten = s,n,Macro(verifysipheader,${RINGINTERNAL})
exten = s,n,MacroExit()
exten = s,n(externe),NoOp(Appel externe : ${CALLERID(num)})
exten = s,n,Set(CALLTYPE=Appel externe)
exten = s,n,Macro(verifysipheader,${RINGEXTERNAL})
exten = s,n,MacroExit()
exten = s,n(group),NoOp(Appel de groupe : ${CALLERID(num)})
exten = s,n,Set(CALLTYPE=Appel de groupe)
exten = s,n,Macro(verifysipheader,${RINGGROUP})
exten = s,n,MacroExit()

; if ring melody should be set, modify SIP headers consequently
;
; params:
;   arg1 = ring_melody
;
[macro-verifysipheader]
exten = s,1,GotoIf(${SETRING}?noring:)
exten = s,n,GotoIf(${ARG1}?:noring)
exten = s,n,SIPAddHeader("Alert-Info:<http://www.proformatique.com>\;info=${ARG1}")
exten = s,n,Set(SETRING=1)
exten = s,n(noring),MacroExit()

; send call-info for paging a phone via sip
;
[macro-page]
exten = s,1,Set(_ALERT_INFO="RA")
exten = s,n,SipAddHeader("Call-Info:\<sip:proformatique.com\>\;Answer-After=0")

; set distinctive ring with no bep if the phone Thomson branded
;
[macro-nobeep]
exten = s,1,GotoIf(${ISTHOMSON}?:break)
exten = s,n,GotoIf(${SETRING}?break:)
exten = s,n,SIPAddHeader("Alert-Info:<http://www.proformatique.com>\;info=Silent")
exten = s,n,Set(SETRING=1)
exten = s,n(break),MacroExit()

; macro for get features from web interface for meetme conference
;
; ressources:
;  agi-bin/meetmefeatures
;
[macro-supermeetme]
exten = s,1,AGI(meetmefeatures,${MACRO_EXTEN})
exten = s,n,Set(MEETME_RECORDINGFILE=/usr/share/asterisk/sounds/web-interface/recordings/meetme-conf-rec-${MACRO_EXTEN}-${EPOCH})
exten = s,n,MeetMe(${MACRO_EXTEN},${MEETMEOPTIONS})

exten = h,1,MeetMeCount(${MACRO_EXTEN},MEETMECOUNT)
exten = h,n,GotoIf(${MEETMECOUNT}?exit)
exten = h,n,System(chown asterisk.www-data ${MEETME_RECORDINGFILE}.wav)
exten = h,n,System(chmod 660 ${MEETME_RECORDINGFILE}.wav)
exten = h,n(exit),Hangup()

; manage Direct Inward Dialing calls, and where to forward them from web interface
;
; ressources:
;   agi-bin/did
; params:
;   arg1 = did_num
;
[macro-superdid]
exten = s,1,NoOp(${MACRO_EXTEN})
exten = s,n,Macro(setcallerid)
exten = s,n,AGI(did,${MACRO_EXTEN})

; tasks to perform an outbound call: outgoing provider, method, caller-ID
;
; ressources:
;   agi-bin/outfeatures
;
[macro-superout]
exten = s,1,NoOp(Extern call : ${MACRO_EXTEN})
exten = s,n,AGI(outfeatures)
exten = s,n,GotoIf($[ "${MACRO_EXTEN}" : "${EMERGENCYNUMBERS}" ]?emergency,1)
exten = s,n,GotoIf($[ "${MACRO_EXTEN}" : "${SPECIALNUMBERS}" ]?special,1)
exten = s,n,GotoIf(${PROVIDER}?:CHANUNAVAIL,1)
exten = s,n,Set(CALLNUMNOPREFIX=${MACRO_EXTEN:$[ ${LEN(${PREFIX})} + ${STRIPNUM}]})
exten = s,n,Set(CALLNUM=${EXTERNPREFIX}${CALLNUMNOPREFIX})
exten = s,n(setcallerid),GotoIf($[ "${SETCALLERID}" = "yes" ]?:nosetcallerid)
exten = s,n,Set(CALLERID(num)=${EXTERNNUM})
exten = s,n(nosetcallerid),GotoIf($[ "${USEENUM}" = "yes" ]?enum,1:dial)
exten = s,n(dial),Dial(${CHAN}/${CALLNUM},${TIMETOCALL},W)
exten = s,n,Goto(${DIALSTATUS},1)

;
; if enum is set to yes we search at enum for voip number
;
exten = enum,1,NoOp(Enum call)
exten = enum,n,Set(ENUM=${ENUMLOOKUP(+33${CALLNUMNOPREFIX},ALL,1,e164.org)})
exten = enum,n,GotoIf(${ENUM}?:s,dial)
exten = enum,n,Set(CHAN=${CUT(ENUM,:,1)})
exten = enum,n,Set(CALLNUM=${CUT(ENUM,:,2)})
exten = enum,n,Goto(s,dial)

;
; for emergency number
;
exten = emergency,1,NoOp(Emergency call)
exten = emergency,n,AGI(outfeatures,${EMERGENCYPROVIDER})
exten = emergency,n,Dial(${CHAN}/${MACRO_EXTEN})
exten = emergency,n,Goto(${DIALSTATUS},1)

;
; for special number
;
exten = special,1,NoOp(Special Call)
exten = special,n,AGI(outfeatures,${SPECIALPROVIDER})
exten = special,n,Dial(${CHAN}/${MACRO_EXTEN})
exten = special,n,Goto(${DIALSTATUS},1)

;
; Dialstatus for the out call
;
exten = NOANSWER,1,NoOp(NOANSWER)
exten = NOANSWER,n,MacroExit()
exten = BUSY,1,NoOp(BUSY)
exten = BUSY,n,MacroExit()
exten = CONGESTION,1,NoOp(CONGESTION)
exten = CONGESTION,n,MacroExit()
exten = CHANUNAVAIL,1,NoOp(CHANUNAVAIL)
exten = CHANUNAVAIL,n,MacroExit()

; incoming call logic (big one)
;
; ressources:
;   agi-bin/userfeatures
;   agi-bin/xivo_push
;   agi-bin/groupfeatures
;   agi-bin/boss-secretary
;
; macro:
;   originate
;   whocall
;   set-mailbox
;   get-status-aim
;   get-features
;   callgroup
[macro-superuser]
exten = s,1,Wait(0.5)
exten = s,n,Set(USER=${MACRO_EXTEN})
exten = s,n,Set(FWDCONTEXT=${MACRO_CONTEXT})
exten = s,n,Set(COPTS=tTwW)
exten = s,n,Set(GROUP()=${USER})
exten = s,n,Macro(originate)
exten = s,n,AGI(userfeatures)
exten = s,n,AGI(boss-secretary)
exten = s,n,Macro(whocall)
exten = s,n,AGI(xivo_push|127.0.0.1)
exten = s,n,Macro(set-mailbox)
exten = s,n,Macro(get-status-aim)
exten = s,n,Macro(get-features)
exten = s,n,Dial(${PROTO}/${NAME},${NBS},${COPTS})
exten = s,n(dialstatus),Goto(${DIALSTATUS})
;
; Dialstatus for received call
;
exten = s,n(NOANSWER),GotoIf(${FRStatus}?fwdnoanswer)
exten = s,n,Macro(callgroup)
exten = s,n,GotoIf(${VMStatus}?:nomail)
exten = s,n,GotoIf($[${GROUP_COUNT("${USER}")} > 1 ]?vmbusy:vmunavailable)

exten = s,n(ANSWER),Hangup()

exten = s,n(CANCEL),Hangup()

exten = s,n(DONTCALL),Playback(user_unreachable)
exten = s,n,Hangup()

exten = s,n(CONGESTION),Macro(callgroup)
exten = s,n,GotoIf(${VMStatus}?vmbusy:nomail)

exten = s,n(TORTURE),Playback(tt-weasels)
exten = s,n,Hangup()

exten = s,n(CHANUNAVAIL),Macro(callgroup)
exten = s,n,Goto(vmunavailable)

exten = s,n(BUSY),GotoIf(${FBStatus}?fwdbusy)
exten = s,n,Macro(callgroup)
;
; if Voicemail is enabled, jump to it
;
exten = s,n(dnd),GotoIf(${VMStatus}?vmunavailable)
exten = s,n,Goto(nomail)

exten = s,n(fwdunc),Set(FWDNumber=${FUNumber})
exten = s,n,Goto(forward)

exten = s,n(fwdbusy),Set(FWDNumber=${FBNumber})
exten = s,n,Goto(forward)

exten = s,n(fwdnoanswer),Set(FWDNumber=${FRNumber})
exten = s,n,Goto(forward)
;
; all forwarded calls go there
;
exten = s,n(forward),Dial(Local/${FWDNumber}@${FWDCONTEXT},${NBS},tT)
exten = s,n,Macro(callgroup)
exten = s,n,GotoIf(${VMStatus}?:nomail)
exten = s,n,GotoIf($[${GROUP_COUNT("${USER}")} > 1 ]?vmbusy:vmunavailable)
;
; user is unreachable and no voicemail is enabled
;
exten = s,n(nomail),Answer()
exten = s,n,Wait(0.5)
exten = s,n,Playback(user_unreachable)
exten = s,n,Hangup()

;
; FwdUnc to voicemail
;
exten = s,n(vmunavailable),GotoIf(${MAILBOX}?:nomail)
exten = s,n,Answer()
exten = s,n,Wait(0.5)
exten = s,n,VoiceMail(${MAILBOX},u)
exten = s,n,Hangup()

;
; FwdBusy to voicemail
;
exten = s,n(vmbusy),GotoIf(${MAILBOX}?:nomail)
exten = s,n,Answer()
exten = s,n,Wait(0.5)
exten = s,n,VoiceMail(${MAILBOX},b)
exten = s,n,Hangup()

exten = s,n(exit),MacroExit()

exten = a,1,VoiceMailMain(${MAILBOX})
exten = a,n,Hangup()


exten = i,1,Playback(user_unreachable)
exten = i,n,Hangup()

exten = h,1,Hangup()

exten = T,1,NoOp(Call is finished because timeout is finished)
exten = T,n,Playback(vm-goodbye)

; get the call group information from SQL DB
; - if the group exists, queue the call
; - otherwise, notify the unconsistency
;
[macro-supergroup]
exten = s,1,AGI(groupfeatures,${MACRO_EXTEN})
exten = s,n,Set(__CALLGROUP=1)
exten = s,n,GotoIf(${GEXT}?CALLGROUP)
exten = s,n,Playback(user_unreachable)
exten = s,n,Hangup()
exten = s,n(CALLGROUP),Queue(${GNAME},r)
exten = s,n,Hangup()

; set the callerID (text and num) if none is specified
;
; syntax:
;   CALLERID(all) = $text <$dial_num>
;
[macro-setcallerid]
exten = s,1,AGI(callerid)
exten = s,n,MacroExit()

; check if foward have a loop on forward
;
; ressources:
;  agi-bin/antiloops
[macro-antiloops]
exten = s,1,Agi(antiloops,${ARG1},${ARG2})
exten = s,n,GotoIf(${LOOP}?loop)
exten = s,n,MacroExit()
exten = s,n(loop),Playback(error_sorry)
exten = s,n,Hangup()

[macro-set-mailbox]
;
; look for mailbox status if we use SIP/IAX
;
exten = s,1,GotoIf($[ "${PROTO}" : "(sip|iax)" ]?box:nobox)
exten = s,n(nobox),Set(MAILBOX=0)
exten = s,n,MacroExit()
exten = s,n(box),GotoIf($[ "${PROTO}" = "sip" ]?sip:iax)
exten = s,n(sip),Set(MAILBOX=${SIPPEER(${NAME}:mailbox)})
exten = s,n,MacroExit()
exten = s,n(iax),Set(MAILBOX=${IAXPEER(${NAME}:mailbox)})
exten = s,n,MacroExit()

[macro-get-status-aim]
;
; dispatch call logic according to presence and features status
;   (presence: 0=available, 1=away, 2=dnd, 3=lunch, 4=brb)
;
exten = s,1,GotoIf($["${STATUS}" = "0"]?exit:away)
exten = s,n(away),GotoIf($["${STATUS}" = "1"]?:dnd)
exten = s,n,Gosub(${MACRO_CONTEXT},s,vmbusy)
exten = s,n(dnd),GotoIf($["${STATUS}" = "2"]?:lunch)
exten = s,n,Gosub(${MACRO_CONTEXT},s,vmunavailable)
exten = s,n(lunch),GotoIf($["${STATUS}" = "3"]?:brb)
exten = s,n,Gosub(${MACRO_CONTEXT},s,vmunavailable)
exten = s,n(brb),GotoIf($["${STATUS}" = "4"]?:exit)
exten = s,n,Gosub(${MACRO_CONTEXT},s,vmunavailable)
exten = s,n(exit),MacroExit()

;
; get all features for an user
;
[macro-get-features]
exten = s,1,Set(LANGUAGE()=fr)
exten = s,n,Gotoif(${FUStatus}?:dnd)
exten = s,n,GoSub(${MACRO_CONTEXT},s,fwdunc)
exten = s,n(dnd),Gotoif(${DND}?:record)
exten = s,n,GoSub(${MACRO_CONTEXT},s,dnd)
exten = s,n(record),Gotoif(${RCStatus}?:time)
exten = s,n,Monitor(wav)
exten = s,n(time),GotoIf(${CALLTIME}?:moh)
exten = s,n,Set(TIMEOUT(absolute)=${CALLTIME})
exten = s,n(moh),GotoIf(${MOH}?:groupcount)
exten = s,n,Set(MUSICCLASS()=${MOH}) 
exten = s,n(groupcount),GotoIf($[${GROUP_COUNT(${USER})} > ${NBC}]?:screen)
exten = s,n,GoSub(${MACRO_CONTEXT},s,vmbusy)
exten = s,n(screen),Gotoif(${CSStatus}?:exit)
exten = s,n,Set(COPTS=p${COPTS})
exten = s,n(exit),MacroExit()

;
; special macro for set callerid if is a thomson phone for xivoclient
;
[macro-originate]
exten = s,1,GotoIf(${ORIGINATE_SRC}?:exit)
exten = s,n,Set(CALLERID(num)=${ORIGINATE_SRC})
exten = s,n(exit),MacroExit()

;
; macro for callgroup
;
;  ressources:
;    groupfeatures
[macro-callgroup]
exten = s,1,GotoIf(${CALLGROUP}?exit)
exten = s,n,GotoIf(${QUEUENAME}?:exit)
exten = s,n,Set(__CALLGROUP=1)
exten = s,n,AGI(groupfeatures,${QUEUENAME})
exten = s,n,Queue(${QUEUENAME},rn,,,${GTIMEOUT})
exten = s,n,Set(__CALLGROUP=0)
exten = s,n(exit),MacroExit()

;
; Macro for call restriction
;
; ressources:
;   call-restrictions
[macro-call-restrictions]
exten = s,1,AGI(call-restrictions)
exten = s,n,GotoIf(${GRANTED}?exit)
exten = s,n,Authenticate(${PIN})
exten = s,n(exit),MacroExit()
