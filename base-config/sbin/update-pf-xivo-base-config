#!/bin/bash
#
# This script is a temporary and ugly solution to generate
# a proper XiVO configuration, until the real subsystem for
# this task is finished.
#

BASE_TEMPLATE_DIR=/usr/share/pf-xivo-base-config/templates
CUSTOM_TEMPLATE_DIR=/etc/pf-xivo/custom-templates

. /usr/sbin/pf-common-read-config

# list all variables with the good prefix
TEMPLATE_VARS="$(compgen -v XIVO_) $(compgen -v _XIVO_)"


#### functions used for templating ####

generate_file()
{
  local FILE=$1

  for VAR in ${TEMPLATE_VARS}; do
    VALUE="${!VAR}"
    if ! sed -ri "s#\#${VAR}\##${VALUE}#g" ${FILE}; then
      echo "Erreur: ${FILE}"
      echo sed -ri "s#\#${VAR}\##${VALUE}#g" ${FILE}
      cat ${FILE}
    fi
  done
}

apply_template_to_file()
{
  local RESULT_DIR=$1
  local FILE_SUBPATH=$2
  RESULT_FILE=$3

  if [ -z "${RESULT_FILE}" ]; then
    RESULT_FILE=${RESULT_DIR}/${FILE_SUBPATH}
  fi

  mkdir -p $(dirname ${RESULT_FILE})

  if [ -e ${BASE_TEMPLATE_DIR}/${FILE_SUBPATH} ]; then
    cp -a ${BASE_TEMPLATE_DIR}/${FILE_SUBPATH} ${RESULT_FILE}
  fi
  if [ -e ${CUSTOM_TEMPLATE_DIR}/${FILE_SUBPATH} ]; then
    cp -a ${CUSTOM_TEMPLATE_DIR}/${FILE_SUBPATH} ${RESULT_FILE}
  fi

  generate_file ${RESULT_FILE}
}

apply_template_to_module()
{
  local RESULT_DIR=$1
  local CONFIG_NAME=$2

  mkdir -p ${RESULT_DIR}

  if [ -e ${BASE_TEMPLATE_DIR}/${CONFIG_NAME} ]; then
    cp -a ${BASE_TEMPLATE_DIR}/${CONFIG_NAME} ${RESULT_DIR}
  fi
  if [ -e ${CUSTOM_TEMPLATE_DIR}/${CONFIG_NAME} ]; then
    cp -a ${CUSTOM_TEMPLATE_DIR}/${CONFIG_NAME} ${RESULT_DIR}
  fi

  FILE_LIST=$(find ${RESULT_DIR}/${CONFIG_NAME} -type f -print)
  for F in ${FILE_LIST}; do
    generate_file ${F}
  done
}

check_diff()
{
  local RESULT_DIR=$1
  local CONFIG_NAME=$2

  local FILE_LIST=$(cd ${RESULT_DIR}/${CONFIG_NAME}; find . -type f -printf "%P\n")
  for F in ${FILE_LIST}; do
    if [ ! -e /${F} ]; then
      return 1
    fi
    if ! diff ${RESULT_DIR}/${CONFIG_NAME}/${F} /${F} >/dev/null; then
      return 1
    fi
  done

  return 0
}

do_apply()
{
  local RESULT_DIR=$1
  local CONFIG_NAME=$2
  local SYSTEM_DIR=$3

  local RESULT_SUBDIR=${RESULT_DIR}/${CONFIG_NAME}
  # if SYSTEM_DIR is empty, install into /

  NOT_EXPANDED=$(grep -Er "#[A-Z0-9_]+#" ${RESULT_SUBDIR})
  if [ -n "${NOT_EXPANDED}" ]; then
    echo "ERROR: generation from template '${CONFIG_NAME}' failed because all variables could not be expanded:" >&2
    echo ${NOT_EXPANDED} | cut -d: -f2-
    return 1
  fi

  if [ -z "${DEBUG}" ]; then
    cp -a ${RESULT_SUBDIR}/* ${SYSTEM_DIR}/
    echo "'${CONFIG_NAME}' configuration UPDATED."
  else
    echo "DEBUG: would copy ${RESULT_SUBDIR}/* into ${SYSTEM_DIR}/"
  fi
}

do_restart()
{
  local CONFIG_NAME=$1

  local SCRIPT
  if [ -f ${CUSTOM_TEMPLATE_DIR}/${CONFIG_NAME}.restart ]; then
    SCRIPT=${CUSTOM_TEMPLATE_DIR}/${CONFIG_NAME}.restart
  elif [ -f ${BASE_TEMPLATE_DIR}/${CONFIG_NAME}.restart ]; then
    SCRIPT=${BASE_TEMPLATE_DIR}/${CONFIG_NAME}.restart
  fi

  if [ -z "${DEBUG}" ]; then
    ${SCRIPT}
  else
    echo "DEBUG: would run: ${SCRIPT}"
  fi
}


#### Apply template for each "configuration module" ####

BASE_RESULT_DIR=$(mktemp -d)

LIST1=$(cd ${BASE_TEMPLATE_DIR}; find . -mindepth 1 -maxdepth 1 -type d -printf "%P\n")
LIST2=$(cd ${CUSTOM_TEMPLATE_DIR}; find . -mindepth 1 -maxdepth 1 -type d -printf "%P\n")
LIST=$(echo "${LIST1} ${LIST2}" | sort | uniq)

for P in ${LIST}; do
  if [ -f ${BASE_TEMPLATE_DIR}/${P}.skip -o -f ${CUSTOM_TEMPLATE_DIR}/${P}.skip ]; then
    continue
  fi

  apply_template_to_module ${BASE_RESULT_DIR} ${P}
  if check_diff ${BASE_RESULT_DIR} ${P}; then
    echo "'${P}' configuration OK, skipping."
  else
    if do_apply ${BASE_RESULT_DIR} ${P}; then
      do_restart ${P}
    fi
  fi
done


#### This part is especially ugly, DO NOT read please ####

# Thomson horrible serial stuff
# (it is a fake serial, it just need to change to have phones update their configuration)

SERIAL_FILE=/var/lib/pf-xivo-base-config/phones-config-thomson-SERIAL

DATE=$(date +%Y%m%d)
if [ -e ${SERIAL_FILE} ]; then
  OLD_SERIAL=$(cat ${SERIAL_FILE})
  OLD_DATE=${OLD_SERIAL:0:8}
  if [ "${OLD_DATE}" = "${DATE}" ]; then
    OLD_CHANGE_NUM=$(echo ${OLD_SERIAL:8:4} | sed -r 's/^0+//')
    # increment and pad with "0"
    NEW_CHANGE_NUM=$(printf "%04d" $((${OLD_CHANGE_NUM} + 1)))
    SERIAL="${OLD_DATE}${NEW_CHANGE_NUM}"
  else
    SERIAL="${DATE}0000"
  fi
else
  SERIAL="${DATE}0000"
fi
if [ -n "${DEBUG}" ]; then
  echo "DEBUG: OLD_SERIAL=${OLD_SERIAL}"
  echo "DEBUG: SERIAL=${SERIAL}"
  echo "DEBUG: not saving new serial in debug mode"
else
  echo ${SERIAL} >${SERIAL_FILE}
fi

TEMPLATE_VARS="${TEMPLATE_VARS} SERIAL"

INF_LIST=$(cd ${BASE_TEMPLATE_DIR}/phones-config-thomson; find . -mindepth 1 -type f -name "*.inf" -printf "%P\n")
for P in ${INF_LIST}; do
  apply_template_to_file ${BASE_RESULT_DIR} phones-config-thomson/${P}
done
TXT_LIST=$(cd ${BASE_TEMPLATE_DIR}/phones-config-thomson; find . -mindepth 1 -type f -name "*.txt" -printf "%P\n")
RM_LIST=
for P in ${TXT_LIST}; do
  apply_template_to_file ${BASE_RESULT_DIR} phones-config-thomson/${P}
  if [ -n "${OLD_SERIAL}" ]; then
    OLD_FILE=$(echo /${P} | sed -r "s/#SERIAL#/${OLD_SERIAL}/")
    RM_LIST="${RM_LIST} ${OLD_FILE}"
  fi
  NEW_RESULT_FILE=$(echo ${RESULT_FILE} | sed -r "s/#SERIAL#/${SERIAL}/")
  mv ${RESULT_FILE} ${NEW_RESULT_FILE}
done
if do_apply ${BASE_RESULT_DIR} phones-config-thomson; then
  if [ -z "${DEBUG}" ]; then
    if [ -n "${RM_LIST}" ]; then
      rm -f ${RM_LIST}
    fi
    if ls /tftpboot/ST*.txt 2>/dev/null 1>/dev/null; then
      sed -ri "s/^config_sn=.*\$/config_sn=${SERIAL}/" /tftpboot/ST*.txt
    fi
  else
    echo "DEBUG: would replace old configuration files: ${RM_LIST}"
    echo "DEBUG: would update all Thomson phones serials"
  fi
fi

if [ -x /usr/sbin/pf-check-dahdi-ports ]; then
  if [ -n "${DEBUG}" ]; then
    echo "DEBUG: create monit DAHDI ports configuration"
  fi
  /usr/sbin/pf-check-dahdi-ports configure
fi

#### cleanup ####

if [ -z "${DEBUG}" ]; then
  rm -rf ${BASE_RESULT_DIR}
else
  echo "DEBUG: generated files can be found here: ${BASE_RESULT_DIR}"
fi

echo "DONE"

