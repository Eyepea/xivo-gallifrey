#!/bin/bash
#
# This script is a temporary and ugly solution to generate
# a proper XiVO configuration, until the real subsystem for
# this task is finished.
#

BASE_TEMPLATE_DIR=/usr/share/pf-xivo-base-config/templates
CUSTOM_TEMPLATE_DIR=/etc/pf-xivo/custom-templates

. /etc/pf-xivo/common.conf


# TODO:
#  - check if unresolved variables remains in generated files
#


if [ -z "${XIVO_NET4_CIDR}" ]; then
  echo "ERROR: Network badly configured" >&2
  exit 1
fi

XIVO_NET4_IP=$(ipcalc -n ${XIVO_NET4_CIDR} | grep "Address:" | awk '{print $2}')
XIVO_NET4_NETMASK=$(ipcalc -n ${XIVO_NET4_CIDR} | grep "Netmask:" | awk '{print $2}')
XIVO_NET4_BROADCAST=$(ipcalc -n ${XIVO_NET4_CIDR} | grep "Broadcast:" | awk '{print $2}')
XIVO_NET4_SUBNET=$(ipcalc -n ${XIVO_NET4_CIDR} | grep "Network:" | awk '{print $2}' | cut -d/ -f1)

if [ -n "${XIVO_VOIP_VLAN_ID}" -o "${XIVO_VOIP_VLAN_ID}" = "0" ]; then
  XIVO_HAS_VOIP_VLAN_10=1
  XIVO_HAS_VOIP_VLAN_yn="yes"
else
  XIVO_HAS_VOIP_VLAN_10=0
  XIVO_HAS_VOIP_VLAN_yn="no"
fi

if [ -z "${XIVO_SMTP_ORIGIN}" ]; then
  XIVO_SMTP_ORIGIN="${XIVO_HOSTNAME}.${XIVO_DOMAIN}"
fi

XIVO_NAMESERVER_LIST=
if [ -n "${XIVO_NAMESERVERS}" ]; then
  for NS in ${XIVO_NAMESERVERS}; do
    XIVO_NAMESERVER_LIST="${XIVO_NAMESERVER_LIST}nameserver ${NS}\n"
  done
else
  echo "ERROR: no nameservers defined" >&2
  exit 1
fi


TEMPLATE_VARS=$(compgen -v XIVO_)

generate_file()
{
  local FILE=$1

  for VAR in ${TEMPLATE_VARS}; do
    VALUE="${!VAR}"
    sed -i "s#\#${VAR}\##${VALUE}#g" ${FILE}
  done
}

apply_template_to_file()
{
  local RESULT_DIR=$1
  local FILE_SUBPATH=$2
  local RESULT_FILE=$3

  if [ -z "${RESULT_FILE}" ]; then
    RESULT_FILE=${RESULT_DIR}/${FILE_SUBPATH}
  fi

  mkdir -p $(basedir ${RESULT_FILE})

  if [ -e ${BASE_TEMPLATE_DIR}/${FILE_SUBPATH} ]; then
    cp -a ${BASE_TEMPLATE_DIR}/${FILE_SUBPATH} ${RESULT_FILE}
  fi
  if [ -e ${CUSTOM_TEMPLATE_DIR}/${FILE_SUBPATH} ]; then
    cp -a ${CUSTOM_TEMPLATE_DIR}/${FILE_SUBPATH} ${RESULT_FILE}
  fi

  generate_file ${RESULT_FILE}
}

apply_template_to_module()
{
  local RESULT_DIR=$1
  local CONFIG_NAME=$2

  mkdir -p ${RESULT_DIR}

  if [ -e ${BASE_TEMPLATE_DIR}/${CONFIG_NAME} ]; then
    cp -a ${BASE_TEMPLATE_DIR}/${CONFIG_NAME} ${RESULT_DIR}
  fi
  if [ -e ${CUSTOM_TEMPLATE_DIR}/${CONFIG_NAME} ]; then
    cp -a ${CUSTOM_TEMPLATE_DIR}/${CONFIG_NAME} ${RESULT_DIR}
  fi

  FILE_LIST=$(find ${RESULT_DIR}/${CONFIG_NAME} -type f -print)
  for F in ${FILE_LIST}; do
    generate_file ${F}
  done
}

check_diff()
{
  local RESULT_DIR=$1
  local CONFIG_NAME=$2

  local FILE_LIST=$(cd ${RESULT_DIR}/${CONFIG_NAME}; find . -type f -printf "%P\n")
  for F in ${FILE_LIST}; do
    if ! diff ${RESULT_DIR}/${CONFIG_NAME}/${F} /${F}; then
      return 1
    fi
  done

  return 0
}

do_apply()
{
  # TODO
}

do_restart()
{
  local CONFIG_NAME=$2

  if [ -f ${CUSTOM_TEMPLATE_DIR}/${CONFIG_NAME}.restart ]; then
    ${CUSTOM_TEMPLATE_DIR}/${CONFIG_NAME}.restart
  elif [ -f ${BASE_TEMPLATE_DIR}/${CONFIG_NAME}.restart ]; then
    ${BASE_TEMPLATE_DIR}/${CONFIG_NAME}.restart
  fi
}


BASE_RESULT_DIR=$(mktemp -d)

LIST1=$(cd ${BASE_TEMPLATE_DIR}; find . -mindepth 1 -maxdepth 1 -type d -printf "%P\n")
LIST2=$(cd ${CUSTOM_TEMPLATE_DIR}; find . -mindepth 1 -maxdepth 1 -type d -printf "%P\n")
LIST=$(echo ${LIST1} ${LIST2} | sort | uniq)

for P in ${LIST}; do
  if [ -f ${BASE_TEMPLATE_DIR}/${P}.skip -o -f ${CUSTOM_TEMPLATE_DIR}/${P}.skip ]; then
    next
  fi

  apply_template_to_module ${BASE_RESULT_DIR} ${P}
  if ! check_diff ${BASE_RESULT_DIR} ${P}; then
    do_apply ${BASE_RESULT_DIR} ${P}
    do_restart ${P}
  fi
done


#### This part is especially ugly, DO NOT read please ###

# Thomson horrible serial stuff

INF_LIST=$(cd ${BASE_TEMPLATE_DIR}/tftpboot-thomson; find . -mindepth 1 -type f -name "*.inf" -printf "%P\n")
for P in ${LIST}; do
  T_P=tftpboot-thomson/${P}
  R_P=/tftpboot/${P}

  DATE=$(date +%Y%m%d)
  if [ -f ${R_P} ]; then
    # find and increment serial
    OLD_SERIAL=$(grep -E "^[^#][ \t]+common_config[ \t]+=.*$" /${R_P} | sed 's#^.*-(\d+)\.txt$#\1#')
    OLD_DATE=${OLD_SERIAL:0:8}
    if [ "${OLD_DATE}" = "${DATE}" ]; then
      OLD_CHANGE_NUM=${OLD_SERIAL:8:4}
      # increment and pad with "0"
      NEW_CHANGE_NUM=$(printf "%04d" $((${OLD_CHANGE_NUM} + 1))
      SERIAL="${OLD_DATE}${NEW_CHANGE_NUM}"
    else
      SERIAL="${DATE}0000"
    fi
  else
    SERIAL="${DATE}0000"
  fi
  TEMPLATE_VARS="${TEMPLATE_VARS} SERIAL"

  apply_template_to_file ${BASE_RESULT_DIR} ${T_P} ${R_P}
  INCLUDE_FILE=$(grep -E "^[^#].*#SERIAL#.*$" ${BASE_RESULT_DIR}/${T_P} | sed 's#^.*/([^/]+)$#\1#')
  INCLUDE_PATH=$(basedir ${T_P})/${INCLUDE_FILE}
  NEW_INCLUDE_FILE=$(echo ${INCLUDE_FILE} | sed "s/#SERIAL#/${SERIAL}/")
  NEW_INCLUDE_PATH=$(basedir ${R_P})/${NEW_INCLUDE_FILE}
  apply_template_to_file ${BASE_RESULT_DIR} ${INCLUDE_PATH} ${NEW_INCLUDE_PATH}

  # TODO: call do_apply
done

