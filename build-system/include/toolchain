# Xivo 0.3 - Create cross compilation toolchain using uClibc or glibc.
# Copyright (C) 2006 Richard Braun <rbraun@proformatique.com>
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

BINUTILS_SOURCE="binutils-2.16.1.tar.gz"
BINUTILS_URL="http://ftp.gnu.org/gnu/binutils/$BINUTILS_SOURCE"
BINUTILS_SIZE="16378360"
BINUTILS_SHA1SUM="df79ed47b4388a205adf3089d4e36ce47724c940"

BINUTILS_UCLIBC_PATCH="binutils-2.16.1_uclibc.patch"

LINUX_SOURCE="linux-2.6.16.20.tar.bz2"
LINUX_URL="http://www.kernel.org/pub/linux/kernel/v2.6/$LINUX_SOURCE"
LINUX_SIZE="40840903"
LINUX_SHA1SUM="27701c6f6124308181955b1a2aad28f06c38e9b8"

LINUX_SQUASHFS_PATCH="squashfs3.0.patch"

# This was a snapshot, removed one month after its release.
UCLIBC_SOURCE="uClibc-20060628.tar.bz2"
UCLIBC_URL="http://www.sceen.net/~syn/$UCLIBC_SOURCE"
UCLIBC_SIZE="3696539"
UCLIBC_SHA1SUM="3826ca68ef6640911044343c1321264be3500077"

GLIBC_SOURCE="glibc-2.3.6.tar.gz"
GLIBC_URL="http://ftp.gnu.org/gnu/glibc/$GLIBC_SOURCE"
GLIBC_SIZE="18814292"
GLIBC_SHA1SUM="e990cb85e68bf8493f77468a5e21dabc9f8c212a"

GLIBC_LINUXTHREADS_SOURCE="glibc-linuxthreads-2.3.6.tar.gz"
GLIBC_LINUXTHREADS_URL="http://ftp.gnu.org/gnu/glibc/$GLIBC_LINUXTHREADS_SOURCE"
GLIBC_LINUXTHREADS_SIZE="327557"
GLIBC_LINUXTHREADS_SHA1SUM="08c664c2ea2815dcc6602048a09f6a8acae84829"

GLIBC_LIBGCCEH_PATCH="glibc-2.3.6_libgcc_eh.patch"

GCC_SOURCE="gcc-3.4.6.tar.gz"
GCC_URL="http://ftp.gnu.org/gnu/gcc/gcc-3.4.6/$GCC_SOURCE"
GCC_SIZE="36944764"
GCC_SHA1SUM="580dce840da1283afa5ea505f24b69fc94b910fb"

GCC_UCLIBC_PATCH="gcc-3.4.6_uclibc.patch"

# usage: binutils_build <srcdir>
binutils_build()
{
  if [ "$USE_UCLIBC" ]; then
    pushd $1 &> /dev/null
    pwd
    apply_patch $BINUTILS_UCLIBC_PATCH
    popd &> /dev/null
  fi

  $1/configure --target=$TARGET \
               --prefix=$TOOLCHAIN \
               --with-sysroot=$SYSROOT \
               --disable-nls
  do_make
}

# usage: binutils_install
binutils_install()
{
  do_make install
}

# Build binutils.
# 
# usage: make_binutils
make_binutils()
{
  get_basename $BINUTILS_SOURCE
  make_package $BINUTILS_SOURCE $BINUTILS_URL $BINUTILS_SIZE $BINUTILS_SHA1SUM \
               $BASENAME binutils_build binutils_install 1 1
}

# usage: linux_headers_build
linux_headers_build()
{
  apply_patch $LINUX_SQUASHFS_PATCH
  gen_linux_conf > .config
  do_make ARCH=$KERNEL_ARCH oldconfig
  do_make ARCH=$KERNEL_ARCH include/linux/version.h
  do_make ARCH=$KERNEL_ARCH include/asm
}

# usage: linux_headers_install
linux_headers_install()
{
  # xxx_build() functions can never be called, so define this variable here.
  LINUX_BUILD_DIR=$build_dir

  mkdir -p $SYSROOT/usr/include
  cd $SYSROOT/usr/include
  cp -a $LINUX_BUILD_DIR/include/linux .
  cp -a $LINUX_BUILD_DIR/include/asm-$KERNEL_ARCH asm
  cp -a $LINUX_BUILD_DIR/include/asm-generic .
  mkdir -p $SYSROOT/usr/src
  cd $SYSROOT/usr/src
  ln -s $LINUX_BUILD_DIR linux
  KERNEL_SOURCE=$SYSROOT/usr/src/linux
}

# Extract and prepare linux headers.
# Also set $KERNEL_SOURCE.
# 
# usage: make_linux_headers
make_linux_headers()
{
  get_basename $LINUX_SOURCE
  make_package $LINUX_SOURCE $LINUX_URL $LINUX_SIZE $LINUX_SHA1SUM \
               $BASENAME linux_headers_build linux_headers_install
}

# usage: uclibc_headers_build
uclibc_headers_build()
{
  gen_uclibc_conf > .config
  do_make oldconfig
  do_make headers
}

# usage: uclibc_headers_install
uclibc_headers_install()
{
  UCLIBC_BUILD_DIR=$build_dir

  do_make PREFIX=$SYSROOT install_headers
}

# Extract and prepare uClibc headers.
# 
# usage: make_uclibc_headers
make_uclibc_headers()
{
  make_package $UCLIBC_SOURCE $UCLIBC_URL $UCLIBC_SIZE $UCLIBC_SHA1SUM \
               "uClibc" uclibc_headers_build uclibc_headers_install
}

# usage: glibc_headers_build <srcdir>
glibc_headers_build()
{
  download_source $GLIBC_LINUXTHREADS_SOURCE $GLIBC_LINUXTHREADS_URL \
                  $GLIBC_LINUXTHREADS_SIZE $GLIBC_LINUXTHREADS_SHA1SUM

  pushd $1 &> /dev/null
  extract $GLIBC_LINUXTHREADS_SOURCE
  apply_patch $GLIBC_LIBGCCEH_PATCH
  popd &> /dev/null

  # Setting this variable avoids having an error because of altivec
  # support when crosscompiling to powerpc.
  libc_cv_ppc_machine=yes \
  $1/configure --build=$BUILD \
               --host=$TARGET \
               --prefix=/usr \
               --enable-add-ons=linuxthreads \
               --with-tls \
               --with-elf \
               --without-__thread \
               --disable-profile \
               --without-cvs \
               --with-headers=$SYSROOT/usr/include
}

# usage: glibc_headers_install
glibc_headers_install()
{
  do_make install_root=$SYSROOT install-headers

  # These headers are generated at build time, but we need them for stage 1 gcc.
  touch $SYSROOT/usr/include/gnu/stubs.h
  touch $SYSROOT/usr/include/bits/stdio_lim.h
}

# usage: make_glibc_headers
make_glibc_headers()
{
  get_basename $GLIBC_SOURCE
  build_dir="$BASENAME-headers"
  make_package $GLIBC_SOURCE $GLIBC_URL $GLIBC_SIZE $GLIBC_SHA1SUM \
               $BASENAME glibc_headers_build glibc_headers_install 1
}

# Install uClibc/glibc headers, depending on $USE_UCLIBC.
# 
# usage: make_libc_headers
make_libc_headers()
{
  if [ "$USE_UCLIBC" ]; then
    make_uclibc_headers
  else
    make_glibc_headers
  fi
}

# usage gcc_1_build <srcdir>
gcc_1_build()
{
  if [ "$USE_UCLIBC" ]; then
    pushd $1 &> /dev/null
    apply_patch $GCC_UCLIBC_PATCH
    popd &> /dev/null
  fi

  $1/configure --target=$TARGET \
               --prefix=$TOOLCHAIN \
               --with-sysroot=$SYSROOT \
               --disable-nls \
               --disable-shared \
               --enable-__cxa_atexit \
               --enable-languages=c
  do_make
}

# usage: gcc_1_install
gcc_1_install()
{
  do_make install
}

# Build and install stage 1 gcc
# 
# usage: make_gcc_1
make_gcc_1()
{
  get_basename $GCC_SOURCE
  build_dir="$BASENAME-stage1"
  make_package $GCC_SOURCE $GCC_URL $GCC_SIZE $GCC_SHA1SUM \
               $BASENAME gcc_1_build gcc_1_install 1 1
}

# usage: uclibc_build
uclibc_build()
{
  pushd $UCLIBC_BUILD_DIR &> /dev/null
  do_make CROSS=$TARGET-
  popd &> /dev/null
}

# usage: uclibc_install
uclibc_install()
{
  pushd $UCLIBC_BUILD_DIR &> /dev/null
  do_make PREFIX=$SYSROOT install
  popd &> /dev/null
}

# usage: make_uclibc
make_uclibc()
{
  build_dir="uClibc-unused"
  make_package $UCLIBC_SOURCE $UCLIBC_URL $UCLIBC_SIZE $UCLIBC_SHA1SUM \
               "uClibc" uclibc_build uclibc_install 0 0 1
}

# Different directories must be used for headers and libraries because
# configure is called with a different environment.
# 
# usage: glibc_build <srcdir>
glibc_build()
{
  pushd $1 &> /dev/null
  extract $GLIBC_LINUXTHREADS_SOURCE
  apply_patch $GLIBC_LIBGCCEH_PATCH
  popd &> /dev/null

  $1/configure --build=$BUILD \
               --host=$TARGET \
               --prefix=/usr \
               --enable-add-ons=linuxthreads \
               --with-tls \
               --with-elf \
               --without-__thread \
               --disable-profile \
               --without-cvs \
               --with-headers=$SYSROOT/usr/include
  do_make
}

# usage: glibc_install
glibc_install()
{
  do_make install_root=$SYSROOT install
}

# usage: make_glibc
make_glibc()
{
  # Building glibc requires setting $CC, $AS, $LD, etc... Set $PATH so that gcc,
  # as, ld, etc... already resolve to the target cross compiling tools.
  # Note that $BUILD_CC has already been exported by init_buildenv().
  use_extended_path
  get_basename $GLIBC_SOURCE
  make_package $GLIBC_SOURCE $GLIBC_URL $GLIBC_SIZE $GLIBC_SHA1SUM \
               $BASENAME glibc_build glibc_install 1
  use_simple_path
}

# Install uClibc/glibc, depending on $USE_UCLIBC.
# 
# usage: make_libc
make_libc()
{
  if [ "$USE_UCLIBC" ]; then
    make_uclibc
  else
    make_glibc
  fi
}

gcc_2_build()
{
  if [ "$USE_UCLIBC" ]; then
    pushd $1 &> /dev/null
    apply_patch $GCC_UCLIBC_PATCH
    popd &> /dev/null
  fi

  $1/configure --target=$TARGET \
               --prefix=$TOOLCHAIN \
               --with-sysroot=$SYSROOT \
               --disable-nls \
               --enable-__cxa_atexit \
               --enable-languages=c,c++
  do_make
}

gcc_2_install()
{
  do_make install
  cp -a $TOOLCHAIN/$TARGET/lib/libgcc_s.so* $SYSROOT/lib
  cp -a $TOOLCHAIN/$TARGET/lib/libstdc++.so* $SYSROOT/usr/lib
}

# Build and install stage 2 gcc, with C/C++ support.
# 
# usage: make_gcc_2
make_gcc_2()
{
  get_basename $GCC_SOURCE
  build_dir="$BASENAME-stage2"
  make_package $GCC_SOURCE $GCC_URL $GCC_SIZE $GCC_SHA1SUM \
               $BASENAME gcc_2_build gcc_2_install 1 1
}

# usage: linux_build
linux_build()
{
  pushd $LINUX_BUILD_DIR &> /dev/null
  do_make ARCH=$KERNEL_ARCH CROSS_COMPILE=$TARGET- $KERNEL_IMAGE_TARGET
  do_make ARCH=$KERNEL_ARCH CROSS_COMPILE=$TARGET- modules
  popd &> /dev/null
}

# usage: linux_install
linux_install()
{
  mkdir -p ~/bin
  cp $ROOTDIR/utils/installkernel ~/bin/$TARGET-installkernel
  pushd $LINUX_BUILD_DIR &> /dev/null
  do_make ARCH=$KERNEL_ARCH CROSS_COMPILE=$TARGET- INSTALL_MOD_PATH=$SYSROOT modules_install
  do_make ARCH=$KERNEL_ARCH CROSS_COMPILE=$TARGET- INSTALL_PATH=$SYSBOOT install
  popd &> /dev/null
  rm -f ~/bin/$TARGET-installkernel
}

# Build and install kernel in $SYSBOOT and modules in $SYSROOT.
# Also set $KERNEL_VERSION.
# 
# usage: make_linux
make_linux()
{
  get_basename $LINUX_SOURCE
  build_dir="$BASENAME-unused"
  make_package $LINUX_SOURCE $LINUX_URL $LINUX_SIZE $LINUX_SHA1SUM \
               $BASENAME linux_build linux_install 0 0 1
  KERNEL_VERSION=$(ls -l $SYSBOOT/vmlinuz | cut -d '>' -f 2 | cut -d '-' -f 2-)
}

# Main function.
make_toolchain()
{
  make_binutils
  make_linux_headers
  make_libc_headers
  make_gcc_1
  make_libc
  make_gcc_2
  make_linux
}
