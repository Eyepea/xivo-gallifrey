#! /usr/bin/python
# vim: set fileencoding=utf-8 :
#
# $Revision: 322 $
# $Date: 2007-04-11 13:57:07 +0200 (mer, 11 avr 2007) $
#
# Authors : Thomas Bernard, Corentin Le Gall
#           Proformatique
#           67, rue Voltaire
#           92800 PUTEAUX
#           (+33/0)1.41.38.99.60
#           mailto:technique@proformatique.com
#           (C) 2007 Proformatique
#
# script de push de fiche
#

import socket, sys, generefiche, ConfigParser, string

def log_agi(message):
	print "VERBOSE \"" + "xivo_push : " + message + "\""
	return 0

config = ConfigParser.ConfigParser()

try:
	config.readfp(open("xivo_push.conf"))
	databasekind = config.get('general', 'db')
except:
	databasekind = ""

if databasekind == "ldap":
	import ldap
	LDAP_HOST = config.get('general', 'host')
	LDAP_PORT = config.get('general', 'port')
	LDAP_USER = config.get('general', 'user')
	LDAP_PASS = config.get('general', 'pass')
	LDAP_BASE = config.get('general', 'dbname')

	class myldap:
		def __init__(self):
			try:
				self.l = ldap.initialize("ldap://%s:%s" %(LDAP_HOST, LDAP_PORT))
				self.l.protocol_version = ldap.VERSION3
				self.l.simple_bind_s(LDAP_USER, LDAP_PASS)

			except ldap.LDAPError, e:
				print e
				sys.exit()

		def getldap(self, filter, attrib):
			try:
				resultat = self.l.search_s(LDAP_BASE, ldap.SCOPE_SUBTREE, filter, attrib)
				return resultat
			except ldap.LDAPError, e:
				print e

elif databasekind == "mysql":
	try:
		import MySQLdb
		con = MySQLdb.connect(host = config.get('general', 'host'),
				      port = int(config.get('general', 'port')),
				      user = config.get('general', 'user'),
				      passwd = config.get('general', 'pass'),
				      db = config.get('general', 'dbname'))
		cursor = con.cursor()
	except Exception, e:
		log_agi("Connection to MySQL failed")
		
agency = ""
callerid = ""
daymsg = ""
firstname = ""
fullnumber = ""
homepage = ""
mail = ""
medal = ""
msgext = ""
name = ""
refnumber = ""
town = ""
urlpicture = ""
zipcode = ""

#print sys.argv[0], len(sys.argv)
if len(sys.argv) < 6:
	print "Usage :", sys.argv[0], "<server> <port> <proto> <user> <callerid> [<msgext>]"
	sys.exit(1)
else:
	shost = sys.argv[1]
	sport = int(sys.argv[2])
	proto = sys.argv[3]
	exten = sys.argv[4]
	callerid = sys.argv[5]
	user = proto + exten
	if len(sys.argv) > 6: msgext = sys.argv[6]

# first connect to the server to get ip, port of the client
z = generefiche.getuserlocation(shost, sport, user)
if z == None:
	log_agi("Could not localize user " + user)
	sys.exit(3)
sessionid = z.get('sessionid')
clientaddress = z.get('address')


if databasekind == "ldap":
	result = myldap().getldap("(|(telephonenumber=%s)(mobile=%s)(pager=%s))" %(callerid,callerid,callerid),
				  ['cn','mail'])
	try:
		r = result[0][1]['cn'][0]
		mail = result[0][1]['mail'][0]
		(name, firstname) = r.split()
		sys.stdout.write("SET CALLERID \"%s\"\n" %r)
	except:
		print "No callerid from OX"
elif databasekind == "mysql":
	table = config.get('general', 'dbtable')
	sql = "select * from " + table + " where appelant REGEXP '" + callerid + "';"
	cursor.execute(sql)
	results = cursor.fetchall()
	con.close()
	if len(results) > 0:
		x = results[0]
	try:
		fullnumber = x[0]
		agency     = x[1]
		refnumber  = x[2]
		name       = x[3]
		zipcode    = x[4]
		town       = x[5]
		medal      = x[6]
	except Exception, e:
		log_agi("Customer not found in mysql db")
		if len(callerid) == 9:
			fullnumber = callerid

	if len(fullnumber) == 9:
		tmpnum = "0" + fullnumber[0] + "." + \
			 fullnumber[1] + fullnumber[2] + "." + \
			 fullnumber[3] + fullnumber[4] + "." + \
			 fullnumber[5] + fullnumber[6] + "." + \
			 fullnumber[7] + fullnumber[8]
		fullnumber = tmpnum

class Info:
	def __init__(self, ititle, itype, ivalue, idefvalue):
		self.title = ititle
		self.type = itype
		if ivalue == "":
			self.value = idefvalue
		else:
			self.value = ivalue
	def getTitle(self):
		return self.title
	def getType(self):
		return self.type
	def getValue(self):
		return self.value


liste = []
items = config.items("fiche")
items.sort()

for field_to_display in items:
	# a "/" character splits the order of the field in the displayed popup
	# and its kind
	if field_to_display[0].find("|") >= 0:
		kindoffield = field_to_display[0].split("|")[1]
		argum = field_to_display[1].split("|")[0]
		defaultvalue = field_to_display[1].split("|")[1]
		if kindoffield == "name":       liste.append(Info(argum, 'text', name, defaultvalue))
		if kindoffield == "firstname":  liste.append(Info(argum, 'text', firstname, defaultvalue))
		if kindoffield == "callerid":   liste.append(Info(argum, 'phone', callerid, defaultvalue))
		if kindoffield == "picture":
			try:
				urlpicture = config.get('photo', callerid)
			except:
				urlpicture = defaultvalue
			liste.append(Info(argum, 'picture', urlpicture, defaultvalue))
		if kindoffield == "mail":
			liste.append(Info(argum, 'url', 'mailto:' + mail, 'mailto:' + defaultvalue))
		if kindoffield == "homepage":   liste.append(Info(argum, 'url', homepage, defaultvalue))
		if kindoffield == "daymsg":
			liste.append(Info(argum, 'text', '<b>' + defaultvalue + '</b>', ""))
		if kindoffield == "agency":     liste.append(Info(argum, 'text', agency, defaultvalue))
		if kindoffield == "refnumber":  liste.append(Info(argum, 'text', refnumber, defaultvalue))
		if kindoffield == "fullnumber": liste.append(Info(argum, 'text', fullnumber, defaultvalue))
		if kindoffield == "zipcode":    liste.append(Info(argum, 'text', zipcode, defaultvalue))
		if kindoffield == "town":       liste.append(Info(argum, 'text', town, defaultvalue))
		if kindoffield == "medal":      liste.append(Info(argum, 'text', medal, defaultvalue))

z = generefiche.getuserlocation(shost, sport, user)
if z == None:
        print "could not localize user", user

sessionid = z.get('sessionid')
clientaddress = z.get('address')
clientstate = z.get('state')

if clientstate == "available":
	print "SET VARIABLE STATUS 0"

	fiche = generefiche.Fiche(sessionid)
	fiche.setmessage(msgext)
	for x in liste:
		fiche.addinfo(x.getTitle(), x.getType(), x.getValue())

	#connect to the client and send the stuff !
	if fiche.sendtouser(clientaddress):
		print "Profile sent"
	else:
		log_agi("Could not send profile to user")

elif clientstate == "away":
	print "SET VARIABLE STATUS 1"
	print "away"

elif clientstate == "donotdisturb":
	print "SET VARIABLE STATUS 2"
	print "donotdisturb"


sys.stdout.flush()
sys.stderr.flush()

