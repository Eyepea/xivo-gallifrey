#! /usr/bin/python
# vim: set fileencoding=utf-8 :
#
# $Revision$
# $Date$
#
# Authors : Thomas Bernard, Corentin Le Gall
#           Proformatique
#           67, rue Voltaire
#           92800 PUTEAUX
#           (+33/0)1.41.38.99.60
#           mailto:technique@proformatique.com
#           (C) 2007 Proformatique
#
# AGI de push de fiche
#

import socket, sys, generefiche, ConfigParser, string, ldap, MySQLdb

## \class Info
class Info:
	def __init__(self, ititle, itype, ivalue):
		self.title = ititle
		self.type = itype
		self.value = ivalue
	def getTitle(self):
		return self.title
	def getType(self):
		return self.type
	def getValue(self):
		return self.value

## \class myldap
class myldap:
	def __init__(self, ihost, iport, iuser, ipass):
		try:
			self.l = ldap.initialize("ldap://%s:%s" %(ihost, iport))
			self.l.protocol_version = ldap.VERSION3
			self.l.simple_bind_s(iuser, ipass)
			
		except ldap.LDAPError, e:
			print e
			sys.exit()

	def getldap(self, ibase, filter, attrib):
		try:
			resultat = self.l.search_s(ibase,
						   ldap.SCOPE_SUBTREE,
						   filter,
						   attrib)
			return resultat
		except ldap.LDAPError, e:
			print e

# \brief Logs a message into the Asterisk CLI
def log_agi(message):
	print "VERBOSE \"" + "xivo_push : " + message + "\""
	return 0

# \brief Returns the kind of database
def get_dbkind(cfg):
	try:
		dbkind = cfg.get('general', 'db')
	except:
		dbkind = ""
	return dbkind

# \brief Returns informations fetched from the LDAP database
def get_ldap_infos(config, cid):
	mail = ""
	name = ""
	firstname = ""
	ldapid = myldap(config.get('general', 'host'),
			config.get('general', 'port'),
			config.get('general', 'user'),
			config.get('general', 'pass'))
	result = ldapid.getldap(config.get('general', 'dbname'),
				"(|(telephonenumber=%s)(mobile=%s)(pager=%s))" %(cid,cid,cid),
				['cn','mail'])
	try:
		r = result[0][1]['cn'][0]
		mail = result[0][1]['mail'][0]
		(name, firstname) = r.split()
		sys.stdout.write("SET CALLERID \"%s\"\n" %r)
	except:
		print "No callerid from OX"
	return [mail, name, firstname]


# \brief Returns informations fetched from the LDAP database
def get_mysql_infos(config, cid):
	try:
		con = MySQLdb.connect(host = config.get('general', 'host'),
				      port = int(config.get('general', 'port')),
				      user = config.get('general', 'user'),
				      passwd = config.get('general', 'pass'),
				      db = config.get('general', 'dbname'))
		cursor = con.cursor()
	except Exception, e:
		log_agi("Connection to MySQL failed")
	table = config.get('general', 'dbtable')
	sql = "select * from " + table + " where appelant REGEXP '" + cid + "';"
	cursor.execute(sql)
	results = cursor.fetchall()
	con.close()
	return results


# \brief fills the variable fields according to the recetived data
def set_fields_from_resultline(callerid, x):
	afield = {}
	try:
		afield["fullnumber"] = x[0]
		afield["agency"]     = x[1]
		afield["refnumber"]  = x[2]
		afield["name"]       = x[3]
		afield["zipcode"]    = x[4]
		afield["town"]       = x[5]
		afield["medal"]      = x[6]
	except Exception, e:
		log_agi("Customer not found in mysql db")
		if len(callerid) == 9:
			afield["fullnumber"] = callerid
		else:
			afield["fullnumber"] = ""

	if len(afield["fullnumber"]) == 9:
		tmpnum = "0" + afield["fullnumber"][0] + "." + \
			 afield["fullnumber"][1] + afield["fullnumber"][2] + "." + \
			 afield["fullnumber"][3] + afield["fullnumber"][4] + "." + \
			 afield["fullnumber"][5] + afield["fullnumber"][6] + "." + \
			 afield["fullnumber"][7] + afield["fullnumber"][8]
		afield["fullnumber"] = tmpnum

	return afield


# \brief Builds the contents of the Sheet according to titles and default values
def make_fields(items, formats, flds):
	liste = []
	for field_to_display in items:
		# a "/" character splits the order of the field in the displayed popup
		# and its kind
		if field_to_display[0].find("|") >= 0:
			kindoffield  = field_to_display[0].split("|")[1]

			fieldtype    = field_to_display[1].split("|")[0]
			argum        = field_to_display[1].split("|")[1]
			defaultvalue = field_to_display[1].split("|")[2]

			prestr = ""
			poststr = ""
			if kindoffield in formats.keys():
				prestr = formats[kindoffield].split("|")[0]
				poststr = formats[kindoffield].split("|")[1]
			if kindoffield in flds:
				value = prestr + flds[kindoffield] + poststr
			else:
				value = prestr + defaultvalue + poststr
			liste.append(Info(argum, fieldtype, value))
	return liste


# ==============================================================================
# Main Code starts here
# ==============================================================================

if len(sys.argv) < 6:
	print "Usage :", sys.argv[0], "<server> <port> <proto> <user> <callerid> [<msgext>]"
	sys.exit(1)
else:
	shost = sys.argv[1]
	sport = int(sys.argv[2])
	proto = sys.argv[3]
	exten = sys.argv[4]
	callerid = sys.argv[5]
	user = proto + exten
	if len(sys.argv) > 6: msgext = sys.argv[6]
	else: msgext = ""

# 1/N : connects to the server to get IP address and port of the client
z = generefiche.getuserlocation(shost, sport, user)
if z == None:
	log_agi("Could not localize user " + user)
	sys.exit(3)
sessionid = z.get('sessionid')
clientaddress = z.get('address')
clientstate = z.get('state')

# 2/N : opens the xivo_push.conf config file
config = ConfigParser.ConfigParser()
try:
	config.readfp(open("/etc/asterisk/xivo_push.conf"))
except:
	try:
		config.readfp(open("xivo_push.conf"))
	except:
		log_agi("no xivo_push.conf file found")
		sys.exit(2)

# 3/N : reads the kind of database and the sheet's format
databasekind = get_dbkind(config)
fitems = config.items("fiche")
fitems.sort()
fformats = {}
if "formats" in config.sections() :
	for x in config.items("formats"):
		fformats[x[0]] = x[1]

# 4/N : reads the informations from the database and fills them into one ore more lists

liste = []
fields = {}

if databasekind == "ldap":
	fields["req_cid"] = callerid
	fields["mail"], fields["name"], fields["firstname"] = get_ldap_infos(config, callerid)
	if callerid in config.options('photo'):
		fields["picture"] = config.get('photo', callerid)
	liste = make_fields(fitems, fformats, fields)
elif databasekind == "mysql":
	listes = []
	results = get_mysql_infos(config, callerid)
	log_agi(str(len(results)) + " result(s) found for " + callerid)
	if len(results) > 0:
		for z in xrange(len(results)):
			fields = set_fields_from_resultline(callerid, results[z])
			fields["req_cid"] = callerid
			liste = make_fields(fitems, fformats, fields)
			listes.append(liste)
	else:
		fields["req_cid"] = callerid
		liste = make_fields(fitems, fformats, fields)

# 5/N : sends the sheet to the connected peer

if clientstate == "available":
	print "SET VARIABLE STATUS 0"

	# this could be replaced by a loop if needed
	fiche = generefiche.Fiche(sessionid)
	fiche.setmessage(msgext)
	for x in liste:
		fiche.addinfo(x.getTitle(), x.getType(), x.getValue())
	# connect to the client and send the stuff !
	print "Sending Profile"
	if fiche.sendtouser(clientaddress):
		print "Profile sent"
	else:
		log_agi("Could not send profile to user")

elif clientstate == "away":
	print "SET VARIABLE STATUS 1"
elif clientstate == "donotdisturb":
	print "SET VARIABLE STATUS 2"
elif clientstate == "outtolunch":
	pass
	#print "SET VARIABLE STATUS 2"
elif clientstate == "berightback":
	pass
	#print "SET VARIABLE STATUS 2"
else:
	log_agi("Unknown user's availability status : " + clientstate)

print "availability is currently :", clientstate

sys.stdout.flush()
sys.stderr.flush()

