#!/usr/bin/perl

if (@ARGV < 1) {
	print STDERR "syntax: $0 <dll_filename> [<base_addr>] < library.exp > library.def\n";
	print STDERR "\n";
	print STDERR "This program generates a definition file suitable for the creation of a DLL\n";
	print STDERR "library by Cygwin/MinGW. This definition file mainly contains the list of\n";
	print STDERR "symbols that must be exported by the DLL.\n";
	print STDERR "\n";
	print STDERR "<dll_filename> is the wanted name for the DLL that will be created later, by\n";
	print STDERR "including the name of the file generated by this program in the parameters of\n";
	print STDERR "GCC (or possibly directly ld?)\n";
	print STDERR "\n";
	print STDERR "<base_addr> is the wanted base address for the target DLL.\n";
	print STDERR "This is an optional parameter. If omitted the default base is determined by the\n";
	print STDERR "linker.\n";
	print STDERR "\n";
	print STDERR "If <dll_filename> is to be created from an archive from which all extern\n";
	print STDERR "symbols are to be exported by the DLL, library.exp typically can be generated\n";
	print STDERR "by:\n";
	print STDERR "\tnm -Pg libfoobar.a | grep ' [BDT] ' | cut -f1 -d' ' > libfoobar.exp\n";
	print STDERR "where libfoobar.a is the archive of objects that will be used to create the DLL.\n";
	print STDERR "\n";
	print STDERR "Because we only target Windows systems and the stdin must have the same format\n";
	print STDERR "as it has when generated by the above nm+grep+cut PIPE, symbols from stdin must\n";
	print STDERR "be prepended by a single '_' character, there must be one symbol per line and\n";
	print STDERR "nothing else. Symbols containing the '\@' character are considered special and\n";
	print STDERR "silently ignored.\n";
	exit 1;
}

$library_name = $ARGV[0];
if (@ARGV > 1) {
	$base_addr = $ARGV[1];
	$base_parm = " BASE=$base_addr";
}

while(<STDIN>) {
	if (/^_([^@]+)\r?\n$/) {
		$symbols[@symbols] = $1;
	}
}
@symbols = sort @symbols;

print "LIBRARY \"$library_name\"$base_parm\r\n";
print "EXPORTS\r\n";
foreach (@symbols) {
	print "\t$_\r\n";
}
