#!/usr/bin/python
"""Provisioning AGI for XIVO
"""
# TODO WARNING: can be used only if the caller is of a SIP tech
# UPDATE: now also support SCCP protocol

__version__ = "$Revision$ $Date$"
__license__ = """
    Copyright (C) 2007-2010  Proformatique <technique@proformatique.com>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

CONFIG_FILE         = '/etc/pf-xivo/provisioning.conf' # can be overridden by cmd line param
GETOPT_SHORTOPTS    = 'c:h'
SYSLOG_NAME         = 'initconfig'

import sys

def help_screen():
    print >> sys.stderr, \
"""Syntax:
%s [-c <conffile>] [-h] <sip_uri> <provisioning_code> <user_agent>

-c <conffile>   Use <conffile> instead of %r
-h              Display this help screen and exit
""" % (sys.argv[0], CONFIG_FILE)
    sys.exit(1)

from getopt import getopt, GetoptError
def config_path():
    global CONFIG_FILE
    try:
        opts, args = getopt(sys.argv[1:], GETOPT_SHORTOPTS)
    except GetoptError, x:
        print >> sys.stderr, x
        help_screen()
    sys.argv[1:] = args # strip options for legacy code behind
    for k, v in opts: # DO NOT MERGE THE TWO LOOPS
        if k == '-h':
            help_screen()
    for k, v in opts:
        if k == '-c':
            CONFIG_FILE = v
config_path()

import socket
import httplib
import logging
from logging.handlers import SysLogHandler

from xivo import xivo_config
from xivo.xivo_config import ProvGeneralConf as Pgc
from xivo import all_phones # pylint: disable-msg=W0611

from xivo import agi
from xivo import agitb
from xivo import network

sysloghandler = SysLogHandler("/dev/log", SysLogHandler.LOG_DAEMON)
sysloghandler.setFormatter(logging.Formatter("%s[%%(process)d]: %%(message)s" % SYSLOG_NAME))
root_logger = logging.getLogger('')
root_logger.addHandler(sysloghandler)
root_logger.setLevel(logging.DEBUG) # XXX

agi_session = agi.AGI()
agitb.enable(agi_session)

def return_exit(error, playback=None):
    agi_session.verbose(error)
    if playback:
        agi_session.appexec("PLAYBACK", playback)
    sys.exit(1)

# TODO: use an RFC compliant regexp instead of
# this stupid way of parsing things
def user_ipv4_from_sip_uri(sip_addr):
    splitted_sip = sip_addr.split(':')
    if len(splitted_sip) < 2:
        return None
    splitted_sip = splitted_sip[1].split('@')
    if len(splitted_sip) < 2:
        return None
    sip_user = splitted_sip[0]
    ip = splitted_sip[1].split('>')[0]
    return (sip_user, ip)

def main():
    if len(sys.argv) < 4:
        return_exit("Too few arguments")

    sip_uri = sys.argv[1]
    code = sys.argv[2]
    ua = sys.argv[3]
    proto   = 'sip'
    macaddr = None
    if len(sys.argv) > 4:
        proto = sys.argv[4]
    if len(sys.argv) > 5:
        macaddr = sys.argv[5]

    isinalan = "1"

    # Get Sip User, IPv4 and Mac Address
    if proto == 'sip':
        user_ipv4 = user_ipv4_from_sip_uri(sip_uri)
        if not user_ipv4:
            return_exit("Could not parse Sip URI \"%s\"" % sip_uri)
        sip_user, ipv4 = user_ipv4 # pylint: disable-msg=W0612
        macaddr = xivo_config.macaddr_from_ipv4(ipv4) # XXX, agi_session.verbose)

        if not macaddr:
            return_exit("Could not find Mac Address from IPv4 \"%s\"" % ipv4)
    else:
        # SCCP phone
        if not macaddr or len(macaddr) != 15 or not macaddr.startswith('SEP'):
            return_exit("You must defined Mac Address (5th argument)")

        # we've got mac address in the following form: SEP001122334455
        # we want                                    : 00:11:22:33:44:55
        macaddr = "%s:%s:%s:%s:%s:%s" % \
            (macaddr[3:5], macaddr[5:7], macaddr[7:9], macaddr[9:11], macaddr[11:13], macaddr[13:15])
        macaddr = network.normalize_mac_address(macaddr)

        ipv4 = sip_uri
        # ua is set by sccp asterisk channel in the form "Cisco 7960", and 
        # xivo-config lib requires it like "Cisco-cp7960g/8.0"
	# added special fixe for cisco sccp softphone
        if ua == 'Cisco IP Communicator':
                ua = 'Cisco-CIPC/8.0'
        else:
                ua   = ua.replace(' ', '-cp') + 'g/8.0'

    # Get Phone description (if we are able to handle this vendor...)
    phone_desc = xivo_config.phone_desc_by_ua(ua) # XXX, agitb.handler)
    if not phone_desc:
        return_exit("Unknown UA %r" % (ua,))
    phone_vendor   = phone_desc[0]
    phone_model    = phone_desc[1]
    phone_firmware = phone_desc[2]

    if code == 'init':
        code = '0'
    if not xivo_config.well_formed_provcode(code):
        return_exit("Badly formed provisioning code", "privacy-incorrect")

    command = "\r\n".join(
              ["mode=authoritative",
               "from=ipbx",
               "actions=yes",
               "proto=%s"           % proto,
               "provcode=%s"        % code,
               "vendor=%s"          % phone_vendor,
               "model=%s"           % phone_model,
               "firmware=%s"        % phone_firmware,
               "macaddr=%s"         % macaddr,
               "ipv4=%s"            % ipv4,
               "isinalan=%s\r\n"    % isinalan])

    try:
        socket.setdefaulttimeout(float(Pgc['http_request_to_s']))
        conn = httplib.HTTPConnection(Pgc['connect_ipv4'] + ':' + str(Pgc['connect_port']))
        conn.request("POST", "/prov", command, {"Content-Type": "text/plain; charset=ISO-8859-1"})
        response = conn.getresponse()
        response.read() # eat every data sent by the provisioning server
        conn.close()
        reason = response.reason
        status = response.status
    except Exception, xcept:
        reason = str(xcept)
        status = 500
        agitb.handler()
        sys.exc_clear()

    if status != 200:
        return_exit("Provisioning failure; %s" % reason, "prov-error")

if __name__ == '__main__':
    xivo_config.LoadConfig(CONFIG_FILE)
    xivo_config.phone_classes_setup()

    main()
