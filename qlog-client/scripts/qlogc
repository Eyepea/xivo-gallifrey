#!/usr/bin/python
# -*- coding: UTF-8 -*-

from __future__ import with_statement

__license__ = """
    Copyright (C) 2011  Proformatique <technique@proformatique.com>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import logging
import optparse
from qlogclient import config
from qlogclient import client

CONFIG_FILE = '/etc/pf-xivo/qlog-client.conf'

logger = logging.getLogger()


def merge_options(opts, cli_opts):
    # Merge options from cli_opts to opts (when applicable)
    if cli_opts.gzip:
        opts['general.compress'] = True


def init_logging():
    handler = logging.StreamHandler()
    handler.setFormatter(logging.Formatter("%(message)s"))
    logger.addHandler(handler)
    logger.setLevel(logging.INFO)


if __name__ == '__main__':
    init_logging()

    parser = optparse.OptionParser()
    parser.add_option('--config', action='store',
                      help='set an alternate configuration file')
    parser.add_option('-d', '--debug', action='store_true',
                      help='display debug messages')
    parser.add_option('-q', '--quiet', action='store_true',
                      help='display only error messages')
    parser.add_option('-n', '--dry-run', dest='dry_run', action='store_true',
                      help='do a dry run')
    parser.add_option('-z', '--gzip', action='store_true',
                      help='gzip queuelog data before sending it to server')
    parser.add_option('--disable-mtime', dest='disable_mtime', action='store_true',
                      help='disable check based on file modification time')
    parser.add_option('--no-agent-infos', action='store_true',
                      help='don\'t send agent infos')
    parser.add_option('--no-qlog', action='store_true',
                      help='don\'t send queuelog')
    parser.add_option('--asternic', action='store_true',
                      help='retrieve queuelog data from asternic database')
    
    cli_opts, args = parser.parse_args()
    
    if cli_opts.debug:
        logger.setLevel(logging.DEBUG)
    elif cli_opts.quiet:
        logger.setLevel(logging.ERROR) 
    
    cfg_filename = cli_opts.config or CONFIG_FILE
    
    opts = config.read_config(cfg_filename)
    merge_options(opts, cli_opts)
    
    if cli_opts.no_qlog:
        logger.info('Not sending qlog')
    else:
        kwargs = {
            'server_uri': opts['general.qlog_server_uri'],
            'username': opts['general.username'],
            'password': opts['general.password'],
            'state_dir': opts['general.state_dir'],
            'maxlines': opts['general.maxlines_per_request'],
            'compress': opts['general.compress'],
            'dry_run': cli_opts.dry_run
        }
        if cli_opts.asternic:
            client.send_qlog_from_asternic_db(
                    opts['general.asternic_db_uri'],
                    **kwargs)
        else:
            client.send_qlog_from_files(
                    opts['general.qlog_basepath'],
                    not cli_opts.disable_mtime,
                    **kwargs)
    logger.info('')
    
    if cli_opts.no_agent_infos:
        logger.info('Not sending agent infos')
    else:
        client.send_agent_infos(
                opts['general.agents_server_uri'],
                opts['general.username'],
                opts['general.password'],
                opts['general.ast_db_uri'],
                dry_run=cli_opts.dry_run)
    logger.info('')
