r1478 | syn | 2007-09-07 15:12:19 +0200 (Fri, 07 Sep 2007) | 2 lines

Implemented #include filename support, don't cast void * pointers.

------------------------------------------------------------------------
r1476 | syn | 2007-09-07 12:04:52 +0200 (Fri, 07 Sep 2007) | 2 lines

Optimize Doxygen output for C.

------------------------------------------------------------------------
r1475 | sylvain | 2007-09-07 11:42:30 +0200 (Fri, 07 Sep 2007) | 1 line

ignore build for res_sqlite
------------------------------------------------------------------------
r1472 | syn | 2007-09-06 19:25:50 +0200 (Thu, 06 Sep 2007) | 2 lines

Changed the SQL request performed for RealTime static configurations.

------------------------------------------------------------------------
r1471 | syn | 2007-09-06 19:03:50 +0200 (Thu, 06 Sep 2007) | 2 lines

Handle cat_metric and var_metric with static RealTime configurations.

------------------------------------------------------------------------
r1470 | syn | 2007-09-06 18:38:24 +0200 (Thu, 06 Sep 2007) | 2 lines

Added -fPIC option for exotic architectures such as PowerPC.

------------------------------------------------------------------------
r1469 | syn | 2007-09-06 18:35:35 +0200 (Thu, 06 Sep 2007) | 2 lines

Improved tables format.

Index: Doxyfile
===================================================================
--- Doxyfile	(revision 1302)
+++ Doxyfile	(revision 1487)
@@ -186,7 +186,7 @@
 # For instance, some of the names that are used will be different. The list 
 # of all members will be omitted, etc.
 
-OPTIMIZE_OUTPUT_FOR_C  = NO
+OPTIMIZE_OUTPUT_FOR_C  = YES
 
 # Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java 
 # sources only. Doxygen will then generate output that is more tailored for Java. 
Index: tables.sql
===================================================================
--- tables.sql	(revision 1302)
+++ tables.sql	(revision 1487)
@@ -5,115 +5,116 @@
 /*
  * RealTime static table.
  */
-CREATE TABLE ast_config (
- id integer unsigned,
- commented tinyint(1) DEFAULT 0,
- filename varchar(128) NOT NULL,
- category varchar(128) NOT NULL,
- var_name varchar(128) NOT NULL,
- var_val varchar(128),
- PRIMARY KEY(id)
+CREATE TABLE ast_config
+(
+ id         INTEGER      NOT NULL,
+ cat_metric INT(11)      NOT NULL DEFAULT 0,
+ var_metric INT(11)      NOT NULL DEFAULT 0,
+ commented  TINYINT(1)   NOT NULL DEFAULT 0,
+ filename   VARCHAR(128) NOT NULL DEFAULT '',
+ category   VARCHAR(128) NOT NULL DEFAULT 'default',
+ var_name   VARCHAR(128) NOT NULL DEFAULT '',
+ var_val    TEXT         NOT NULL DEFAULT '',
+ PRIMARY KEY (id)
 );
 
+CREATE INDEX ast_config__idx__cat_metric         ON ast_config(cat_metric);
+CREATE INDEX ast_config__idx__var_metric         ON ast_config(var_metric);
 CREATE INDEX ast_config__idx__filename_commented ON ast_config(filename, commented);
-CREATE INDEX ast_config__idx__category ON ast_config(category);
-CREATE INDEX ast_config__idx__var_name ON ast_config(var_name);
 
 /*
  * CDR table (this table is automatically created if non existent).
- * 
- * CREATE TABLE cdr (
- *  id integer unsigned auto_increment,
- *  calldate char(19) DEFAULT '0000-00-00 00:00:00',
- *  clid varchar(80) NOT NULL DEFAULT '',
- *  src varchar(80) NOT NULL DEFAULT '',
- *  dst varchar(80) NOT NULL DEFAULT '',
- *  dcontext varchar(80) NOT NULL DEFAULT '',
- *  channel varchar(80) NOT NULL DEFAULT '',
- *  dstchannel varchar(80) NOT NULL DEFAULT '',
- *  lastapp varchar(80) NOT NULL DEFAULT '',
- *  lastdata varchar(80) NOT NULL DEFAULT '',
- *  answer char(19) DEFAULT '0000-00-00 00:00:00',
- *  end char(19) DEFAULT '0000-00-00 00:00:00',
- *  duration integer unsigned NOT NULL DEFAULT 0,
- *  billsec integer unsigned NOT NULL DEFAULT 0,
- *  disposition varchar(9) NOT NULL DEFAULT '',
- *  amaflags tinyint unsigned NOT NULL DEFAULT 0,
- *  accountcode varchar(20) NOT NULL DEFAULT '',
- *  uniqueid varchar(32) NOT NULL DEFAULT '',
- *  userfield varchar(255) NOT NULL DEFAULT '',
- *  PRIMARY KEY(id)
- * );
- *
- * CREATE INDEX cdr__idx__disposition ON cdr(disposition);
- * CREATE INDEX cdr__idx__src ON cdr(src);
- * CREATE INDEX cdr__idx__dst ON cdr(dst);
- * CREATE INDEX cdr__idx__calldate ON cdr(calldate);
  */
+CREATE TABLE ast_cdr
+(
+ id          INTEGER,
+ calldate    DATETIME     NOT NULL DEFAULT '0000-00-00 00:00:00',
+ clid        VARCHAR(80)  NOT NULL DEFAULT '',
+ src         VARCHAR(80)  NOT NULL DEFAULT '',
+ dst         VARCHAR(80)  NOT NULL DEFAULT '',
+ dcontext    VARCHAR(80)  NOT NULL DEFAULT '',
+ channel     VARCHAR(80)  NOT NULL DEFAULT '',
+ dstchannel  VARCHAR(80)  NOT NULL DEFAULT '',
+ lastapp     VARCHAR(80)  NOT NULL DEFAULT '',
+ lastdata    VARCHAR(80)  NOT NULL DEFAULT '',
+ answer      DATETIME     NOT NULL DEFAULT '0000-00-00 00:00:00',
+ end         DATETIME     NOT NULL DEFAULT '0000-00-00 00:00:00',
+ duration    INT(11)      NOT NULL DEFAULT 0,
+ billsec     INT(11)      NOT NULL DEFAULT 0,
+ disposition VARCHAR(45)  NOT NULL DEFAULT '',
+ amaflags    INT(11)      NOT NULL DEFAULT 0,
+ accountcode VARCHAR(20)  NOT NULL DEFAULT '',
+ uniqueid    VARCHAR(32)  NOT NULL DEFAULT '',
+ userfield   VARCHAR(255) NOT NULL DEFAULT '',
+ PRIMARY KEY (id)
+);
 
 /*
  * SIP RealTime table.
  */
-CREATE TABLE ast_sip (
- id integer unsigned,
- name varchar(80) NOT NULL,
- commented tinyint(1) NOT NULL DEFAULT 0,
- accountcode varchar(20),
- amaflags varchar(13),
- callgroup varchar(10),
- callerid varchar(80),
- canreinvite char(3),
- context varchar(80),
- defaultip varchar(15),
- dtmfmode varchar(7),
- fromuser varchar(80),
- fromdomain varchar(80),
- fullcontact varchar(80),
- host varchar(31) NOT NULL,
- insecure varchar(11),
- language char(2),
- mailbox varchar(50),
- md5secret varchar(80),
- nat varchar(5) NOT NULL DEFAULT 'no',
- deny varchar(95),
- permit varchar(95),
- mask varchar(95),
- pickupgroup varchar(10),
- port varchar(5) NOT NULL,
- qualify char(3),
- restrictcid char(1),
- rtptimeout char(3),
- rtpholdtimeout char(3),
- secret varchar(80),
- type varchar(6) NOT NULL DEFAULT 'friend',
- username varchar(80) NOT NULL,
- disallow varchar(100),
- allow varchar(100),
- musiconhold varchar(100),
- regseconds integer unsigned NOT NULL DEFAULT 0,
- ipaddr varchar(15) NOT NULL,
- regexten varchar(80) NOT NULL,
- cancallforward char(3),
- setvar varchar(100) NOT NULL,
- PRIMARY KEY(id)
+CREATE TABLE ast_sip
+(
+ id              INTEGER,
+ commented       TINYINT(1)   NOT NULL DEFAULT 0,
+ name            VARCHAR(80)  NOT NULL DEFAULT '',
+ host            VARCHAR(31)  NOT NULL DEFAULT '',
+ nat             VARCHAR(5)   NOT NULL DEFAULT 'no',
+ type            VARCHAR(6)   NOT NULL DEFAULT 'friend',
+ accountcode     VARCHAR(20)           DEFAULT NULL,
+ amaflags        VARCHAR(13)           DEFAULT NULL,
+ callgroup       VARCHAR(10)           DEFAULT NULL,
+ callerid        VARCHAR(80)           DEFAULT NULL,
+ cancallforward  CHAR(3)               DEFAULT 'yes',
+ canreinvite     CHAR(3)               DEFAULT 'yes',
+ context         VARCHAR(80)           DEFAULT NULL,
+ defaultip       VARCHAR(15)           DEFAULT NULL,
+ dtmfmode        VARCHAR(7)            DEFAULT NULL,
+ fromuser        VARCHAR(80)           DEFAULT NULL,
+ fromdomain      VARCHAR(80)           DEFAULT NULL,
+ insecure        VARCHAR(4)            DEFAULT NULL,
+ language        CHAR(2)               DEFAULT NULL,
+ mailbox         VARCHAR(50)           DEFAULT NULL,
+ md5secret       VARCHAR(80)           DEFAULT NULL,
+ deny            VARCHAR(95)           DEFAULT NULL,
+ permit          VARCHAR(95)           DEFAULT NULL,
+ mask            VARCHAR(95)           DEFAULT NULL,
+ musiconhold     VARCHAR(100)          DEFAULT NULL,
+ pickupgroup     VARCHAR(10)           DEFAULT NULL,
+ qualify         CHAR(3)               DEFAULT NULL,
+ regexten        VARCHAR(80)           DEFAULT NULL,
+ restrictcid     CHAR(3)               DEFAULT NULL,
+ rtptimeout      CHAR(3)               DEFAULT NULL,
+ rtpholdtimeout  CHAR(3)               DEFAULT NULL,
+ secret          VARCHAR(80)           DEFAULT NULL,
+ setvar          VARCHAR(100)          DEFAULT NULL,
+ disallow        VARCHAR(100)          DEFAULT 'all',
+ allow           VARCHAR(100)          DEFAULT 'g729;ilbc;gsm;ulaw;alaw',
+ fullcontact     VARCHAR(80)  NOT NULL DEFAULT '',
+ ipaddr          VARCHAR(15)  NOT NULL DEFAULT '',
+ port            INT(11)      NOT NULL DEFAULT 0,
+ regserver       VARCHAR(100)          DEFAULT NULL,
+ regseconds      INT(11)      NOT NULL DEFAULT 0,
+ username        VARCHAR(80)  NOT NULL DEFAULT '',
+ PRIMARY KEY (id)
+ UNIQUE (name)
 );
 
 CREATE INDEX ast_sip__idx__commented ON ast_sip(commented);
-CREATE UNIQUE INDEX ast_sip__uidx__name ON ast_sip(name);
 
 /*
  * Dialplan RealTime table.
  */
-CREATE TABLE ast_exten (
- id integer unsigned,
- commented tinyint(1) NOT NULL DEFAULT 0,
- context varchar(20) NOT NULL DEFAULT '',
- exten varchar(20) NOT NULL DEFAULT '',
- priority tinyint unsigned NOT NULL DEFAULT 0,
- app varchar(20) NOT NULL DEFAULT '',
- appdata varchar(128) NOT NULL DEFAULT '',
- PRIMARY KEY(id)
+CREATE TABLE ast_exten
+(
+ id        INTEGER,
+ commented TINYINT(1)   NOT NULL DEFAULT 0,
+ context   VARCHAR(80)  NOT NULL DEFAULT '',
+ exten     VARCHAR(40)  NOT NULL DEFAULT '',
+ priority  INT(11)      NOT NULL DEFAULT 0,
+ app       VARCHAR(128) NOT NULL DEFAULT '',
+ appdata   VARCHAR(128) NOT NULL DEFAULT '',
+ PRIMARY KEY (id)
 );
 
-CREATE INDEX ast_exten__idx__commented ON ast_exten(commented);
+CREATE INDEX ast_exten__idx__commented              ON ast_exten(commented);
 CREATE INDEX ast_exten__idx__context_exten_priority ON ast_exten(context, exten, priority);
Index: AUTOBUILD-IGNORE
===================================================================
Index: res_sqlite.c
===================================================================
--- res_sqlite.c	(revision 1302)
+++ res_sqlite.c	(revision 1487)
@@ -1,22 +1,22 @@
 /*
- * Copyright (C) 2006 Proformatique
+ * Copyright (C) 2006-2007 Proformatique
  * Written by Richard Braun <rbraun@proformatique.com>
  * Resource module for SQLite 2
- * 
+ *
  * Based on res_sqlite3 by Anthony Minessale II, res_config_mysql by
  * by Matthew Boehm and app_addon_sql_mysql by Constantine Filin and
  * Christos Ricudis.
- * 
+ *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
  * (at your option) any later version.
- * 
+ *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
@@ -24,9 +24,9 @@
 
 /**
  * \mainpage res_sqlite
- * 
+ *
  * \section intro_sec Presentation
- * 
+ *
  * res_sqlite is a module for the Asterisk Open Source PBX to support SQLite 2
  * databases. It can be used to fetch configuration from a database (static
  * configuration files and/or using the Asterisk RealTime Architecture - ARA).
@@ -36,26 +36,26 @@
  * the first is that rewriting it was a training to learn how to write a
  * simple module for Asterisk, the other is to have the same database open for
  * all kinds of operations, which improves reliability and performance.
- * 
+ *
  * There is already a module for SQLite 3 (named res_sqlite3) in the Asterisk
  * addons. res_sqlite was developed because we, at Proformatique, are using
  * PHP 4 in our embedded systems, and PHP 4 has no stable support for SQLite 3
  * at this time. We also needed RealTime support.
- * 
+ *
  * \section build_install_sec Building and installing
- * 
+ *
  * To build res_sqlite, simply enter <code>make</code>. To install it,
  * enter make install. The Makefile has been slightly designed for
  * cross compilation and installation in non standard locations, to ease
  * the work of packagers. Read it for more details.
- * 
+ *
  * \section conf_sec Configuration
- * 
+ *
  * The main configuration file is res_sqlite.conf. It must be readable or
  * res_sqlite will fail to start. It is suggested to use the sample file
  * in this package as a starting point. The file has only one section
  * named <code>general</code>. Here are the supported parameters :
- * 
+ *
  * <dl>
  *  <dt><code>dbfile</code></dt>
  *  <dd>The absolute path to the SQLite database (the file can be non existent,
@@ -69,20 +69,20 @@
  *  <dd>If set to <code>yes</code>, the SQLITE() application will be usable in
  *      the Dialplan</dd>
  * </dl>
- * 
+ *
  * To use res_sqlite for static and/or RealTime configuration, refer to the
  * Asterisk documentation. The file tables.sql can be used to create the
  * needed tables.
- * 
+ *
  * The SQLITE() application is very similar to the MYSQL() application. You
  * can find more details at
  * <a href="http://voip-info.org/wiki/view/Asterisk+cmd+MYSQL">http://voip-info.org/wiki/view/Asterisk+cmd+MYSQL</a>.
  * The main difference is that you cannot choose your database - it's the
  * file set in the <code>dbfile</code> parameter. As a result, there is no
  * Connect or Disconnect command, and there is no connid variable.
- * 
+ *
  * \section status_sec Driver status
- * 
+ *
  * The CLI command <code>show sqlite status</code> returns status information
  * about the running driver. One information is more important than others:
  * the number of registered virtual machines. A SQLite virtual machine is
@@ -93,9 +93,9 @@
  * and you're creating resource leaks. You should check your Dialplan and
  * reload res_sqlite (by unloading and then loading again - reloading isn't
  * supported)
- * 
+ *
  * \section credits_sec Credits
- * 
+ *
  * res_sqlite was developed by Richard Braun at the Proformatique company.
  */
 
@@ -133,33 +133,38 @@
 "Usage: show sqlite status\n" \
 "	" RES_SQLITE_STATUS_SUMMARY "\n"
 
-#define RES_SQLITE_CONFIG_COLUMNS 6
+#define RES_SQLITE_CONFIG_COLUMNS 8
 #define RES_SQLITE_CONFIG_ID 0
-#define RES_SQLITE_CONFIG_COMMENTED 1
-#define RES_SQLITE_CONFIG_FILENAME 2
-#define RES_SQLITE_CONFIG_CATEGORY 3
-#define RES_SQLITE_CONFIG_VAR_NAME 4
-#define RES_SQLITE_CONFIG_VAR_VAL 5
+#define RES_SQLITE_CONFIG_CAT_METRIC 1
+#define RES_SQLITE_CONFIG_VAR_METRIC 2
+#define RES_SQLITE_CONFIG_COMMENTED 3
+#define RES_SQLITE_CONFIG_FILENAME 4
+#define RES_SQLITE_CONFIG_CATEGORY 5
+#define RES_SQLITE_CONFIG_VAR_NAME 6
+#define RES_SQLITE_CONFIG_VAR_VAL 7
 
+#define MACRO_BEGIN	do {
+#define MACRO_END	} while (0)
+
 /**
  * Limit the number of maximum simultaneous registered SQLite VMs to avoid
  * a denial of service attack.
  */
 #define RES_SQLITE_VM_MAX 1024
 
-#define SET_VAR(config, to, from) \
-do \
-  { \
-    int __error; \
-    __error = set_var(&to, #to, from->value); \
-    if (__error) \
-      { \
-        ast_config_destroy(config); \
-        unload_config(); \
-        return 1; \
-      } \
-  } \
-while (0)
+#define SET_VAR(config, to, from)		\
+MACRO_BEGIN					\
+  int __error;					\
+						\
+  __error = set_var(&to, #to, from->value);	\
+						\
+  if (__error)					\
+    {						\
+      ast_config_destroy(config);		\
+      unload_config();				\
+      return 1;					\
+    }						\
+MACRO_END
 
 /**
  * Maximum number of loops before giving up executing a query. Calls to
@@ -168,11 +173,11 @@
  * <pre>
  * char *errormsg;
  * int error;
- * 
+ *
  * RES_SQLITE_BEGIN
  *   error = sqlite_exec(db, query, NULL, NULL, &errormsg);
  * RES_SQLITE_END(error)
- * 
+ *
  * if (error)
  *   ...;
  * </pre>
@@ -181,30 +186,31 @@
 
 /**
  * Macro used before executing a query.
- * 
+ *
  * @see RES_SQLITE_MAX_LOOPS.
  */
-#define RES_SQLITE_BEGIN \
-{ \
-  int __i; \
-  for (__i = 0; __i < RES_SQLITE_MAX_LOOPS; __i++) \
+#define RES_SQLITE_BEGIN					\
+MACRO_BEGIN							\
+  int __i;							\
+								\
+  for (__i = 0; __i < RES_SQLITE_MAX_LOOPS; __i++)		\
     {
 
 /**
  * Macro used after executing a query.
- * 
+ *
  * @see RES_SQLITE_MAX_LOOPS.
  */
-#define RES_SQLITE_END(error) \
-      if (error != SQLITE_BUSY && error != SQLITE_LOCKED) \
-        break; \
-      usleep(1000); \
-    } \
-}
+#define RES_SQLITE_END(error)					\
+      if ((error != SQLITE_BUSY) && (error != SQLITE_LOCKED))	\
+        break;							\
+      usleep(1000);						\
+    }								\
+MACRO_END;
 
 /**
  * Structure sent to the SQLite callback function for static configuration.
- * 
+ *
  * @see add_cfg_entry()
  */
 struct cfg_entry_args
@@ -216,7 +222,7 @@
 
 /**
  * Structure sent to the SQLite callback function for RealTime configuration.
- * 
+ *
  * @see add_rt_cfg_entry()
  */
 struct rt_cfg_entry_args
@@ -228,7 +234,7 @@
 /**
  * Structure sent to the SQLite callback function for RealTime configuration
  * (realtime_multi_handler()).
- * 
+ *
  * @see add_rt_multi_cfg_entry()
  */
 struct rt_multi_cfg_entry_args
@@ -239,7 +245,7 @@
 
 /**
  * Entry in the linked list of registered SQLite virtual machines.
- * 
+ *
  * @see app_alloc_vm()
  * @see app_free_vm()
  * @see app_register_vm()
@@ -256,7 +262,7 @@
 
 /**
  * Allocate a variable.
- * 
+ *
  * @param var   the address of the variable to set (it will be allocated)
  * @param name  the name of the variable (for error handling)
  * @param value the value to store in var
@@ -266,10 +272,10 @@
 
 /**
  * Load the configuration file.
- * 
+ *
  * This function sets dbfile, config_table, cdr_table and app_enable. It calls
  * check_vars() before returning, and unload_config() if an error occurred.
- * 
+ *
  * @return 1 if an error occurred, 0 otherwise
  * @see unload_config()
  */
@@ -277,7 +283,7 @@
 
 /**
  * Free resources related to configuration.
- * 
+ *
  * @see load_config()
  */
 static void unload_config(void);
@@ -285,17 +291,17 @@
 /**
  * Check that required parameters have been set in the configuration file,
  * and set use_cdr and use_app to enable/disable CDR/APP support.
- * 
+ *
  * @return 1 if a required parameter was not set, 0 otherwise
  */
 static int check_vars(void);
 
 /**
  * Asterisk callback function for CDR support.
- * 
+ *
  * Asterisk will call this function each time a CDR entry must be logged if
  * CDR support is enabled.
- * 
+ *
  * @param cdr the CDR entry Asterisk sends us
  * @return 1 if an error occurred, 0 otherwise
  */
@@ -303,11 +309,11 @@
 
 /**
  * SQLite callback function for static configuration.
- * 
+ *
  * This function is passed to the SQLite engine as a callback function to
  * parse a row and store it in a struct ast_config object. It relies on
- * resulting rows  being sorted by category.
- * 
+ * resulting rows being sorted by category.
+ *
  * @param arg         a pointer to a struct cfg_entry_args object
  * @param argc        number of columns
  * @param argv        values in the row
@@ -321,10 +327,10 @@
 
 /**
  * Asterisk callback function for static configuration.
- * 
+ *
  * Asterisk will call this function when it loads its static configuration,
  * which usually happens at startup and reload.
- * 
+ *
  * @param database the database to use (ignored)
  * @param table    the table to use
  * @param file     the file to load from the database
@@ -339,19 +345,19 @@
 /**
  * Helper function to parse a va_list object into 2 dynamic arrays of
  * strings, parameters and values.
- * 
+ *
  * ap must have the following format : param1 val1 param2 val2 param3 val3 ...
  * arguments will be extracted to create 2 arrays:
- * 
+ *
  * <ul>
  *  <li>params : param1 param2 param3 ...</li>
  *  <li>vals : val1 val2 val3 ...</li>
  * </ul>
- * 
+ *
  * The address of these arrays are stored in params_ptr and vals_ptr. It
  * is the responsibility of the caller to release the memory of these arrays.
  * It is considered an error that va_list has a null or odd number of strings.
- * 
+ *
  * @param ap         the va_list object to parse
  * @param params_ptr where the address of the params array is stored
  * @param vals_ptr   where the address of the vals array is stored
@@ -363,10 +369,10 @@
 
 /**
  * SQLite callback function for RealTime configuration.
- * 
+ *
  * This function is passed to the SQLite engine as a callback function to
  * parse a row and store it in a linked list of struct ast_variable objects.
- * 
+ *
  * @param arg         a pointer to a struct rt_cfg_entry_args object
  * @param argc        number of columns
  * @param argv        values in the row
@@ -380,13 +386,13 @@
 
 /**
  * Asterisk callback function for RealTime configuration.
- * 
+ *
  * Asterisk will call this function each time it requires a variable
  * through the RealTime architecture. ap is a list of parameters and
  * values used to find a specific row, e.g one parameter "name" and
  * one value "123" so that the SQL query becomes <code>SELECT * FROM
  * table WHERE name = '123';</code>.
- * 
+ *
  * @param database the database to use (ignored)
  * @param table    the table to use
  * @param ap       list of parameters and values to match
@@ -399,11 +405,11 @@
 
 /**
  * SQLite callback function for RealTime configuration.
- * 
+ *
  * This function performs the same actions as add_rt_cfg_entry() except
  * that the rt_multi_cfg_entry_args structure is designed to store
  * categories in addition of variables.
- * 
+ *
  * @param arg         a pointer to a struct rt_multi_cfg_entry_args object
  * @param argc        number of columns
  * @param argv        values in the row
@@ -417,11 +423,11 @@
 
 /**
  * Asterisk callback function for RealTime configuration.
- * 
+ *
  * This function performs the same actions as realtime_handler() except
  * that it can store variables per category, and can return several
  * categories.
- * 
+ *
  * @param database the database to use (ignored)
  * @param table    the table to use
  * @param ap       list of parameters and values to match
@@ -436,13 +442,13 @@
 /**
  * Asterisk callback function for RealTime configuration (variable
  * update).
- * 
+ *
  * Asterisk will call this function each time a variable has been modified
  * internally and must be updated in the backend engine. keyfield and entity
  * are used to find the row to update, e.g. <code>UPDATE table SET ... WHERE
  * keyfield = 'entity';</code>. ap is a list of parameters and values with the
  * same format as the other realtime functions.
- * 
+ *
  * @param database the database to use (ignored)
  * @param table    the table to use
  * @param keyfield the column of the matching cell
@@ -456,7 +462,7 @@
 
 /**
  * Compile a SQL query into a SQLite virtual machine.
- * 
+ *
  * @param query the query to compile
  * @return NULL if an error occurred, the virtual machine executing the query
  *         otherwise
@@ -466,7 +472,7 @@
 
 /**
  * Finalize a SQLite virtual machine to release it resources.
- * 
+ *
  * @param vm the virtual machine
  * @return 1 if an error occurred, 0 otherwise
  * @see vm_entry
@@ -475,9 +481,9 @@
 
 /**
  * Insert a virtual machine in the linked list of registered virtual machines.
- * 
+ *
  * This function is also responsible of finding an unused VMID.
- * 
+ *
  * @param vm the virtual machine to register
  * @return 1 if an error occurred, the VMID associated to the given VM
  *         otherwise
@@ -488,7 +494,7 @@
 /**
  * Remove a virtual machine from the linked list of registered virtual
  * machines.
- * 
+ *
  * @param vmid the VMID of the virtual machine to remove
  * @return 1 if an error occurred, 0 otherwise
  * @see vm_entry
@@ -497,7 +503,7 @@
 
 /**
  * Return the virtual machine associated with the given VMID.
- * 
+ *
  * @param vmid VMID of the virtual machine to find
  * @return NULL if the given VMID didn't match any registered virtual machine,
  *         the virtual machine associated with the given VMID otherwise
@@ -507,10 +513,10 @@
 
 /**
  * Set the virtual machine to associate with the given VMID.
- * 
+ *
  * This function doesn't release the previous virtual machine, this is left
  * to the caller.
- * 
+ *
  * @param vmid the VMID of the virtual machine to update
  * @param vm   the new virtual machine
  * @return 1 if the given VMID didn't match any registered virtual machine,
@@ -520,10 +526,10 @@
 
 /**
  * Helper function to convert an integer to a string.
- * 
+ *
  * The string is dynamically allocated. It is the responsibility of the
  * caller to release it.
- * 
+ *
  * @param i the integer to convert
  * @return NULL if an allocation error occurred, the given integer as a
  *         dynamically allocated string otherwise
@@ -532,7 +538,7 @@
 
 /**
  * Helper function to convert a string to an integer.
- * 
+ *
  * @param s the string to convert
  * @param i where to store the converted string
  * @return 1 if an error occurred, 0 otherwise
@@ -541,10 +547,10 @@
 
 /**
  * Handle the query command.
- * 
+ *
  * Extract the VMID variable name from the arguments, compile the query,
  * register the resulting virtual machine and set the VMID variable.
- * 
+ *
  * @param chan the Asterisk channel associated to the command
  * @param data the arguments of the command
  * @return -1 if an error occurred, 0 otherwise
@@ -553,11 +559,11 @@
 
 /**
  * Handle the fetch command.
- * 
+ *
  * Extract the fetchid variable name from the arguments and the VMID, retreive
  * the associated virtual machine, fetch a row from it, set variables with
  * values from the row, and set the fetchid variable to 1 or 0.
- * 
+ *
  * @param chan the Asterisk channel associated to the command
  * @param data the arguments of the command
  * @return -1 if an error occurred, 0 otherwise
@@ -566,10 +572,10 @@
 
 /**
  * Handle the clear command.
- * 
+ *
  * Extract the VMID variable from the arguments, retreive the associated virtual
  * machine, unregister it, and release its resources.
- * 
+ *
  * @param chan the Asterisk channel associated to the command
  * @param data the arguments of the command
  * @return -1 if an error occurred, 0 otherwise
@@ -578,12 +584,12 @@
 
 /**
  * Asterisk callback function for the SQLITE() application.
- * 
+ *
  * Asterisk will call this function if support for the SQLITE() application
  * is enabled (app_enable variable in the configuration file) and when the
  * SQLITE() application is used in the Dialplan. It extracts the command and
  * executes the appropriate function.
- * 
+ *
  * @param chan     the Asterisk channel associated to the command
  * @param data_ptr the string passed to the SQLITE() application
  * @return -1 if an error occurred, 0 otherwise
@@ -592,7 +598,7 @@
 
 /**
  * Asterisk callback function for the CLI status command.
- * 
+ *
  * @param fd   file descriptor provided by Asterisk to use with ast_cli()
  * @param argc number of arguments
  * @param argv arguments list
@@ -708,32 +714,29 @@
  * SQL query format to create the CDR table if non existent.
  */
 static char *sql_create_cdr_table =
-"CREATE TABLE '%q' (\n"
-" id integer unsigned auto_increment,\n"
-" calldate char(19) DEFAULT '0000-00-00 00:00:00',\n"
-" clid varchar(80) NOT NULL DEFAULT '',\n"
-" src varchar(80) NOT NULL DEFAULT '',\n"
-" dst varchar(80) NOT NULL DEFAULT '',\n"
-" dcontext varchar(80) NOT NULL DEFAULT '',\n"
-" channel varchar(80) NOT NULL DEFAULT '',\n"
-" dstchannel varchar(80) NOT NULL DEFAULT '',\n"
-" lastapp varchar(80) NOT NULL DEFAULT '',\n"
-" lastdata varchar(80) NOT NULL DEFAULT '',\n"
-" answer char(19) DEFAULT '0000-00-00 00:00:00',\n"
-" end char(19) DEFAULT '0000-00-00 00:00:00',\n"
-" duration integer unsigned NOT NULL DEFAULT 0,\n"
-" billsec integer unsigned NOT NULL DEFAULT 0,\n"
-" disposition varchar(9) NOT NULL DEFAULT '',\n"
-" amaflags tinyint unsigned NOT NULL DEFAULT 0,\n"
-" accountcode varchar(20) NOT NULL DEFAULT '',\n"
-" uniqueid varchar(32) NOT NULL DEFAULT '',\n"
-" userfield varchar(255) NOT NULL DEFAULT '',\n"
-" PRIMARY KEY(id)\n"
-");\n\n"
-"CREATE INDEX cdr__idx__disposition ON cdr(disposition);\n"
-"CREATE INDEX cdr__idx__src ON cdr(src);\n"
-"CREATE INDEX cdr__idx__dst ON cdr(dst);\n"
-"CREATE INDEX cdr__idx__calldate ON cdr(calldate);";
+"CREATE TABLE '%q'\n"
+"(\n"
+" id          INTEGER,\n"
+" calldate    DATETIME     NOT NULL DEFAULT '0000-00-00 00:00:00',\n"
+" clid        VARCHAR(80)  NOT NULL DEFAULT '',\n"
+" src         VARCHAR(80)  NOT NULL DEFAULT '',\n"
+" dst         VARCHAR(80)  NOT NULL DEFAULT '',\n"
+" dcontext    VARCHAR(80)  NOT NULL DEFAULT '',\n"
+" channel     VARCHAR(80)  NOT NULL DEFAULT '',\n"
+" dstchannel  VARCHAR(80)  NOT NULL DEFAULT '',\n"
+" lastapp     VARCHAR(80)  NOT NULL DEFAULT '',\n"
+" lastdata    VARCHAR(80)  NOT NULL DEFAULT '',\n"
+" answer      DATETIME     NOT NULL DEFAULT '0000-00-00 00:00:00',\n"
+" end         DATETIME     NOT NULL DEFAULT '0000-00-00 00:00:00',\n"
+" duration    INT(11)      NOT NULL DEFAULT 0,\n"
+" billsec     INT(11)      NOT NULL DEFAULT 0,\n"
+" disposition VARCHAR(45)  NOT NULL DEFAULT '',\n"
+" amaflags    INT(11)      NOT NULL DEFAULT 0,\n"
+" accountcode VARCHAR(20)  NOT NULL DEFAULT '',\n"
+" uniqueid    VARCHAR(32)  NOT NULL DEFAULT '',\n"
+" userfield   VARCHAR(255) NOT NULL DEFAULT '',\n"
+" PRIMARY KEY (id)\n"
+");";
 
 /**
  * SQL query format to insert a CDR entry.
@@ -781,15 +784,14 @@
 
 /**
  * SQL query format to fetch the static configuration of a file.
- * Rows must be sorted by category.
- * 
+ *
  * @see add_cfg_entry()
  */
 static char *sql_get_config_table =
 "SELECT *"
 "	FROM '%q'"
 "	WHERE filename = '%q' AND commented = 0"
-"	ORDER BY category;";
+"	ORDER BY cat_metric ASC, var_metric ASC;";
 
 static int
 set_var(char **var, char *name, char *value)
@@ -914,8 +916,6 @@
   return 0;
 }
 
-/*
- */
 static int
 add_cfg_entry(void *arg, int argc, char **argv, char **columnNames)
 {
@@ -928,8 +928,29 @@
       return 1;
     }
 
-  args = (struct cfg_entry_args *)arg;
+  args = arg;
 
+  if (strcmp(argv[RES_SQLITE_CONFIG_VAR_NAME], "#include") == 0)
+    {
+      struct ast_config *cfg;
+      char *val;
+
+      val = argv[RES_SQLITE_CONFIG_VAR_VAL];
+      cfg = ast_config_internal_load(val, args->cfg);
+
+      if (cfg == NULL)
+        {
+          ast_log(LOG_WARNING, "Unable to include %s\n", val);
+          return 1;
+        }
+
+      else
+        {
+          args->cfg = cfg;
+          return 0;
+        }
+    }
+
   if (args->cat_name == NULL
       || (strcmp(args->cat_name, argv[RES_SQLITE_CONFIG_CATEGORY]) != 0))
     {
@@ -1071,7 +1092,7 @@
   struct ast_variable *var;
   int i;
 
-  args = (struct rt_cfg_entry_args *)arg;
+  args = arg;
 
   for (i = 0; i < argc; i++)
     {
@@ -1209,7 +1230,7 @@
   char *cat_name;
   size_t i;
 
-  args = (struct rt_multi_cfg_entry_args *)arg;
+  args = arg;
   cat_name = NULL;
 
   /*
Index: Makefile
===================================================================
--- Makefile	(revision 1302)
+++ Makefile	(revision 1487)
@@ -6,7 +6,7 @@
 # export CC=gcc
 
 # you can override default options by calling make OPTIONS=...
-CFLAGS ?= -O2
+CFLAGS ?= -O2 -fPIC
 Z_CFLAGS := $(CFLAGS) -D _GNU_SOURCE -Wall -Wmissing-prototypes -Wstrict-prototypes
 LIBS ?=
 Z_LIBS := $(LIBS) -lpthread -lsqlite
