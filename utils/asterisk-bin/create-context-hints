#!/usr/bin/python
__version__ = "$Revision$ $Date$"
__license__ = """
    Copyright (C) 2006-2010  Proformatique <technique@proformatique.com>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

CONFIG_CONTEXT_TEMPLATE = "/etc/asterisk/xivo_context.conf"

import sys
from xivo import OrderedConf
from xivo import xivo_helpers

cursor = xivo_helpers.db_connect().cursor()

xfeatures = {'bsfilter':            {},
             'callgroup':           {},
             'callmeetme':          {},
             'callqueue':           {},
             'calluser':            {},
             'fwdbusy':             {},
             'fwdrna':              {},
             'fwdunc':              {},
             'phoneprogfunckey':    {},
             'vmusermsg':           {}}

cursor.query("SELECT ${columns} FROM extenumbers "
             "INNER JOIN extensions ON "
             "extenumbers.typeval = extensions.name "
             "AND extensions.context = 'xivo-features' "
             "WHERE extenumbers.type = 'extenfeatures' "
             "AND extenumbers.typeval IN (" + ", ".join(["%s"] * len(xfeatures)) + ")",
             ('extenumbers.typeval', 'extenumbers.exten', 'extensions.commented'),
             xfeatures.keys())
res = cursor.fetchall()

if res:
    xfeatures.update(dict([x[0], {'exten': x[1], 'commented': x[2]}] for x in res))

cursor.query("SELECT ${columns} FROM voicemenu "
             "WHERE commented = 0 "
             "ORDER BY name DESC",
             ('name',))
res = cursor.fetchall()

for (context,) in res:
    print "[voicemenu-" + context + "]"
    print "switch = Realtime/voicemenu-%s@extensions" % context


cursor.query("SELECT ${columns} FROM context "
             "WHERE commented = 0 "
             "ORDER BY name DESC",
             ('name',))
res = cursor.fetchall()

if not res:
    # No context time to exit
    sys.exit()

# /!\ Do not change the path before asking everybody in the office /!\
config = OrderedConf.OrderedRawConf(filename=CONFIG_CONTEXT_TEMPLATE)

if config.has_conflicting_section_names():
    raise ValueError, CONFIG_CONTEXT_TEMPLATE + " has conflicting section names"

if not config.has_section('template'):
    raise ValueError, "Template section doesn't exist"

for (context,) in res:
    print "[" + context + "]"

    # Maybe a relation exists between hints and realtime TODO check
    cursor.query("SELECT ${columns} FROM userfeatures "
                 "LEFT JOIN voicemail "
                 "ON userfeatures.voicemailid = voicemail.uniqueid "
                 "AND voicemail.commented = 0 "
                 "WHERE userfeatures.context = %s "
                 "AND userfeatures.internal = 0 "
                 "AND userfeatures.enablehint = 1",
             ('userfeatures.id', 'userfeatures.number',
              'userfeatures.protocol', 'userfeatures.name',
              'userfeatures.enablevoicemail', 'voicemail.uniqueid'),
             (context,))
    res2 = cursor.fetchall()

    for row in res2:
        xid         = row['userfeatures.id']
        number      = row['userfeatures.number']
        protocol    = row['userfeatures.protocol'].upper()
        name        = row['userfeatures.name']

        if protocol == 'IAX':
            protocol = 'IAX2'

        if number:
            print "exten = %s,hint,%s/%s" % (number, protocol, name)

        if not xfeatures['calluser'].get('commented', 1):
            print "exten = %s,hint,%s/%s" % (xivo_helpers.fkey_extension(
                                                    xfeatures['calluser']['exten'],
                                                    (xid,)),
                                             protocol,
                                             name)

        if not xfeatures['vmusermsg'].get('commented', 1) \
            and int(row['userfeatures.enablevoicemail']) \
            and row['voicemail.uniqueid']:
            print "exten = %s%s,hint,%s/%s" % (xfeatures['vmusermsg']['exten'], number, protocol, name)

    cursor.query("SELECT ${columns} FROM userfeatures "
                 "INNER JOIN phonefunckey "
                 "ON userfeatures.id = phonefunckey.iduserfeatures "
                 "AND phonefunckey.typeextenumbers IS NULL "
                 "AND phonefunckey.typevalextenumbers IS NULL "
                 "AND phonefunckey.typeextenumbersright IN ('user', 'group', 'queue', 'meetme') "
                 "AND phonefunckey.supervision = 1 "
                 "LEFT OUTER JOIN extenumbers "
                 "ON phonefunckey.typeextenumbersright = extenumbers.type "
                 "AND phonefunckey.typevalextenumbersright = extenumbers.typeval "
                 "WHERE userfeatures.context = %s",
                 ('phonefunckey.typeextenumbersright',
                  'phonefunckey.typevalextenumbersright',
                  'extenumbers.exten'),
                 (context,))
    res2 = cursor.fetchall()

    xset = set()

    for row in res2:
        xtype       = row['phonefunckey.typeextenumbersright']
        calltype    = "call%s" % xtype

        if row['extenumbers.exten'] is not None:
            exten = xivo_helpers.clean_extension(row['extenumbers.exten'])
        elif xfeatures.has_key(calltype) and \
            not xfeatures[calltype].get('commented', 1):
            exten = xivo_helpers.fkey_extension(
                            xfeatures[calltype]['exten'],
                            (row['phonefunckey.typevalextenumbersright'],))
        else:
            continue

        if xtype == 'meetme':
            xset.add((exten, "MeetMe:%s" % exten))
        else:
            xset.add((exten, "Custom:%s" % exten))

    for hint in xset:
        print "exten = %s,hint,%s" % hint

    # Ewww. The following query is a closure of one in provisioning/autoprov
    cursor.query("SELECT ${columns} FROM userfeatures "
                 "INNER JOIN phonefunckey "
                 "ON userfeatures.id = phonefunckey.iduserfeatures "
                 "AND phonefunckey.typeextenumbers = 'extenfeatures' "
                 "AND phonefunckey.typevalextenumbers = 'bsfilter' "
                 "AND phonefunckey.typeextenumbersright = 'user' "
                 "AND phonefunckey.supervision = 1 "
                 "INNER JOIN extenumbers AS extenumright "
                 "ON phonefunckey.typeextenumbersright = extenumright.type "
                 "AND phonefunckey.typevalextenumbersright = extenumright.typeval "
                 "WHERE userfeatures.context = %s "
                 "AND IFNULL(userfeatures.number,'') != ''",
                 ('extenumright.exten', 'userfeatures.number'),
                 (context,))
    res2 = cursor.fetchall()
    extens = set(xivo_helpers.speed_dial_key_extension(xfeatures['bsfilter'].get('exten'),
                                                       row['extenumright.exten'],
                                                       None,
                                                       row['userfeatures.number'],
                                                       True)
             for row in res2)

    for exten in extens:
        print "exten = %s,hint,Custom:%s" % (exten, exten)

    cursor.query("SELECT ${columns} FROM userfeatures "
                 "INNER JOIN phonefunckey "
                 "ON userfeatures.id = phonefunckey.iduserfeatures "
                 "AND phonefunckey.typeextenumbers IS NOT NULL "
                 "AND phonefunckey.typevalextenumbers IS NOT NULL "
                 "AND phonefunckey.supervision = 1 "
                 "AND phonefunckey.progfunckey = 1 "
                 "INNER JOIN extenumbers AS extenumleft "
                 "ON phonefunckey.typeextenumbers = extenumleft.type "
                 "AND phonefunckey.typevalextenumbers = extenumleft.typeval "
                 "WHERE userfeatures.context = %s",
                 ('phonefunckey.iduserfeatures',
                  'phonefunckey.exten',
                  'phonefunckey.typeextenumbers',
                  'phonefunckey.typevalextenumbers',
                  'phonefunckey.typeextenumbersright',
                  'phonefunckey.typevalextenumbersright',
                  'extenumleft.exten'),
                 (context,))
    res2 = cursor.fetchall()

    extens = set()

    for row in res2:
        exten = row['phonefunckey.exten']

        if exten is None and row['phonefunckey.typevalextenumbersright'] is not None:
            exten = "*%s" % row['phonefunckey.typevalextenumbersright']

        extens.add(xivo_helpers.fkey_extension(xfeatures['phoneprogfunckey'].get('exten'),
                                               (row['phonefunckey.iduserfeatures'],
                                                row['extenumleft.exten'],
                                                exten)))

    for exten in extens:
        print "exten = %s,hint,Custom:%s" % (exten, exten)

    cursor.query("SELECT ${columns} FROM contextinclude "
                 "WHERE context = %s "
                 "ORDER BY priority ASC",
                 ('include',),
                 (context,))
    res2 = cursor.fetchall()

    for row in res2:
        print "include = %s" % row['include']

    if config.has_section(context):
        section_name = context
    else:
        section_name = 'template'

    for option in config.iter_options(section_name):
        print "%s = %s" % (option.get_name(), option.get_value().replace('%%CONTEXT%%', context))

cfeatures = []

if not xfeatures['vmusermsg'].get('commented', 1):
    vmusermsgexten = xfeatures['vmusermsg']['exten']

    for line in (
        "1,AGI(agi://${XIVO_AGID_IP}/user_get_vmbox,${EXTEN:%d})" % len(vmusermsgexten),
        "n,Gosub(xivo-pickup,0,1)",
        "n,VoiceMailMain(${XIVO_MAILBOX}@${XIVO_MAILBOX_CONTEXT}|${XIVO_VMMAIN_OPTIONS})",
        "n,Hangup()"):
        cfeatures.append("_%s.," % (vmusermsgexten + line))

for x in ('busy', 'rna', 'unc'):
    fwdtype = "fwd%s" % x
    if not xfeatures[fwdtype].get('commented', 1):
        cfeatures.append("%s,1,Macro(feature_forward|%s|)"
                         % (xivo_helpers.clean_extension(xfeatures[fwdtype]['exten']), x))

if cfeatures:
    print "[xivo-features]"
    print "exten = " + "\nexten = ".join(cfeatures)
