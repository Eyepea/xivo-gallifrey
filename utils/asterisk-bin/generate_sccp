#!/usr/bin/python
__version__ = "$Revision$ $Date$"
__author__  = "Guillaume Bour <gbour@proformatique.com>"
__license__ = """
    Copyright (C) 2010  Proformatique <technique@proformatique.com>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import sys
from xivo import OrderedConf
from xivo import xivo_config
from xivo import all_phones
from xivo.xivo_helpers import db_connect, speed_dial_key_extension, fkey_extension
from xivo.provisioning import get_funckeys

cursor = db_connect().cursor()

codecs = {'allow': None, 'disallow': None}
cursor.query("SELECT ${columns} FROM staticsccp WHERE commented = 0 AND var_val IS NOT NULL ORDER BY var_name",
    ('var_name', 'var_val'))
print "[general]"
for r in cursor.fetchall():
    if r['var_name'] not in ['allow', 'disallow']:
        print "%s = %s" % (r['var_name'], r['var_val'])
    else:
		    codecs[r['var_name']] = r['var_val']

if codecs['disallow'] is not None:
    print "disallow = %s" % codecs['disallow']
if codecs['allow'] is not None:
    print "allow = %s" % codecs['allow']



#
# Generate devices sections
#
# minimum required fields per device:
#  type = device, devicetype

cursor.query("SELECT ${columns} FROM usersccp s, userfeatures u, phone p " +
  "WHERE s.commented = 0 AND s.id = u.protocolid AND u.protocol = 'sccp' AND u.id = p.iduserfeatures",
  ('s.id', 's.devicetype', 'p.macaddr', 'p.model', 'p.vendor', 'u.description', 
   'u.id', 'u.number',
   's.keepalive',
   's.tzoffset',
   's.dtmfmode',
   's.transfer',
   's.park',
   's.cfwdall',
   's.cfwdbusy',
   's.cfwdnoanswer',
   's.mwilamp',
   's.mwioncall',
   's.dnd',
   's.pickupexten',
   's.pickupcontext',
   's.pickupmodeanswer',
   's.permit',
   's.deny',
   's.addons',
   's.imageversion',
   's.trustphoneip',
   's.nat',
   's.directrtp',
   's.earlyrtp',
   's.private',
   's.privacy',
   's.defaultline',
   's.softkey_onhook',
   's.softkey_connected',
   's.softkey_onhold',
   's.softkey_ringin',
   's.softkey_offhook',
   's.softkey_conntrans',
   's.softkey_digitsfoll',
   's.softkey_connconf',
   's.softkey_ringout',
   's.softkey_offhookfeat',
   's.softkey_onhint',
  ))
for r in cursor.fetchall():
    name  = 'SEP' + r['p.macaddr'].replace(':', '')
    phone_class = xivo_config.phone_factory({'vendor': r['p.vendor'], 'model': r['p.model']})
    if not phone_class:
        continue

    addons = []
    if r['s.addons'] and len(r['s.addons']) > 0:
        addons = r['s.addons'].split(',')
        devicetype = addons[0]
    else:
        devicetype = phone_class.get_sccp_devicetype(r['p.model'])
        if not devicetype:
            continue
#    phone = xivo_config.phone_desc_by_ua(ua)
    
    print "\n[%s]" % name
    print "type = device"
    print "devicetype = %s" % devicetype
    for addon in addons:
        print "addon = %s" % addon

    softkeys = {}
    for k, v in r.iteritems():
        k = k.split('.')[1]
        if k in ['id', 'macaddr', 'vendor', 'model','defaultline', 'addons', 'number'] \
        or v is None or len(str(v)) == 0:
            continue

        if k.startswith('softkey_'):
            softkeys[k[8:]] = v
            continue

        print "%s = %s" % (k, v)

    # default line (map to 1st button)
    cursor.query("SELECT ${columns} FROM sccpline WHERE commented = 0 AND id = %d" % r['s.defaultline'], 
        ('name',))
    dftline = cursor.fetchone()
    if dftline:
        print "button = line, %s" % dftline['name']

    # map buttons
    fknum = 2
    funckeys = get_funckeys(cursor, r['u.id'], r['u.number'])
#    import pprint; pprint.pprint(funckeys)
    ids = funckeys.keys()
    ids.sort()
    
    for num in ids:
#        print btn
        # button #1 is reserved for phone default line
        if num == 1:
            continue

        # fill empty buttons
#        print fknum,  btn['fknum']
        for i in xrange(fknum, num):
            print "button = empty"
        fknum = num

        btn = funckeys[num]
        label = btn['label']
        if label is None:
            label = btn.get('altlabel')

        print "button = speeddial, %s, %s," % (label, btn['exten']),
        if btn['supervision']:
            print "%s@%s" % (btn['exten'], btn['context'])
        else:
            print

        fknum += 1

    # soft keys
    if len(softkeys) > 0:
        print "softkeyset = keyset_%s" % name

        ## END OF DEVICE / START OF SOFTKEY
        print "\n[keyset_%s]" % name
        print "type = softkeyset"
        
        for k, v in softkeys.iteritems():
            print "%s = %s" % (k, v)


#
# Generate line sections
# minimum required fields (per line):
#   label, pin, cid_name, cid_num
cursor.query("SELECT ${columns} FROM sccpline WHERE commented = 0", ('id', 
  'name', 'pin', 'label', 'cid_name', 'cid_num', 'context', 'setvar',
  'description',
  'incominglimit',
  'transfer',
  'mailbox',
  'vmnum',
  'meetmenum',
  'trnsfvm',
  'secondary_dialtone_digits',
  'secondary_dialtone_tone',
  'musicclass',
  'language',
  'accountcode',
  'audio_tos',
  'audio_cos',
  'video_tos',
  'video_cos',
  'echocancel',
  'silencesuppression',
  'callgroup',
  'pickupgroup',
  'amaflags',
  'adhocnumber',
 ))
for r in cursor.fetchall():
    label = r['label']
    if not label or len(label) == 0:
        label = r['name']

    
    print "\n[%s]" % r['name']
    print "type = line"
    print "id = %s" % r['name']
    print "label = %s" % label
    print "pin = %s" % r['pin']
    print "cid_name = %s" % r['cid_name'].encode('utf8','ignore')
    print "cid_num = %s" % r['cid_num']
    
    for k, v in r.iteritems():
        if k in ['id', 'name', 'label', 'cid_name', 'cid_num'] or v is None or len(str(v)) == 0:
            continue
        print "%s = %s" % (k, v)
